{"version":3,"file":"59268.e1f8f4769c73d50af13a.js","mappings":"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","sources":["xhh/./webapp-static/lux/components/BottomSheetHeader/index.tsx","xhh/./webapp-static/lux/components/EmployerVacancies/BillInfo.tsx","xhh/./webapp-static/lux/components/EmployerVacancies/CheckContext.ts","xhh/./webapp-static/lux/components/EmployerVacancies/FilterContext.ts","xhh/./webapp-static/lux/components/EmployerVacancies/checkReducer.js","xhh/./webapp-static/lux/components/EmployerVacancies/fetchClustersInfo.ts","xhh/./webapp-static/lux/components/EmployerVacancies/fetchGroupsInfo.ts","xhh/./webapp-static/lux/components/EmployerVacancies/filterReducer.js","xhh/./webapp-static/lux/components/EmployerVacancies/employerManager.ts","xhh/./webapp-static/lux/components/EmployerVacancies/filters.ts","xhh/./webapp-static/lux/components/IFrame/index.jsx","xhh/./webapp-static/lux/hooks/usePostMessages.js","xhh/./webapp-static/lux/components/VacancyActions/AutoUpdateAction.jsx","xhh/./webapp-static/lux/components/VacancyActions/FreeRenewalTip.tsx","xhh/./webapp-static/lux/components/VacancyActions/fetchUpdateInfo.js","xhh/./webapp-static/lux/components/VacancyActions/ProlongateAction.jsx","xhh/./webapp-static/lux/components/VacancyActions/getMenuButtonIconByName.tsx","xhh/./webapp-static/lux/components/VacancyActions/getMenuButtonIconProps.ts","xhh/./webapp-static/lux/components/VacancyActions/vacancyAutoProlongation.js","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/RenewalObjectType.js","webpack://xhh/./webapp-static/lux/components/VacancyModals/HiringSurvey/hiring-survey.less?0b61","xhh/./webapp-static/lux/components/VacancyModals/HiringSurvey/index.tsx","xhh/./webapp-static/lux/modules/employer/videoInterview.js","xhh/./webapp-static/lux/components/VacancyModals/VideoInterviewModal/index.jsx","xhh/./webapp-static/lux/components/VacancyModals/ArchiveVacancyApplicantsFeedback/index.tsx","webpack://xhh/./webapp-static/lux/components/VacancyModals/Archive/styles.less?900d","xhh/./webapp-static/lux/components/VacancyModals/Archive/ArchiveModal.tsx","xhh/./webapp-static/lux/components/VacancyModals/Archive/useArchiveVacancyFetcher.ts","xhh/./webapp-static/lux/components/VacancyModals/Archive/index.tsx","xhh/./webapp-static/lux/components/Employer/PayerAccountSelect/index.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoProlongation/AutoProlongationPurchase.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoProlongation/usePrepareRequirements.ts","xhh/./webapp-static/lux/components/VacancyModals/AutoProlongation/index.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoPublication/index.tsx","xhh/./webapp-static/lux/components/VacancyModals/AutoPublication/disableAutoPublication.ts","xhh/./webapp-static/lux/components/VacancyModals/AutoPublication/DisableAutoPublicationModal.tsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/DateSelect.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/Summary.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/TimeSelect.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/VacanciesWithLocation.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/Warnings.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/index.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/autoUpdateSchedule.js","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/GroupAutoUpdateSummary.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/Remove.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/UpdatesSchedule.jsx","xhh/./webapp-static/lux/components/VacancyModals/AutoUpdateModal/Warning.jsx","webpack://xhh/./webapp-static/lux/components/VacancyModals/BuyOptionModal/buy-option-modal.less?90aa","xhh/./webapp-static/lux/components/VacancyModals/BuyOptionModal/index.jsx","webpack://xhh/./webapp-static/lux/components/VacancyModals/HiringPlan/styles.less?3245","xhh/./webapp-static/lux/components/VacancyModals/HiringPlan/index.tsx","xhh/./webapp-static/lux/components/VacancyModals/Prolongation/AvailableProlongation.jsx","xhh/./webapp-static/lux/components/VacancyModals/Prolongation/UnavailableProlongation.jsx","xhh/./webapp-static/lux/components/VacancyModals/Prolongation/ProlongateContent.jsx","xhh/./webapp-static/lux/components/VacancyModals/Prolongation/index.jsx","xhh/./webapp-static/lux/components/EmployerVacancies/updateVacancy.js","xhh/./webapp-static/lux/components/VacancyModals/Transfer/moveVacancies.ts","xhh/./webapp-static/lux/components/VacancyModals/Transfer/index.tsx","xhh/./webapp-static/lux/components/VacancyModals/TransferDrafts/moveDrafts.ts","xhh/./webapp-static/lux/components/VacancyModals/TransferDrafts/index.tsx","webpack://xhh/./webapp-static/lux/components/VacancyModals/VacancyAdviceModal/vacancyAdviceModal.less?b9e6","xhh/./webapp-static/lux/components/VacancyModals/VacancyAdviceModal/VacancyAdviceItem.tsx","xhh/./webapp-static/lux/components/VacancyModals/VacancyAdviceModal/index.tsx","xhh/./webapp-static/lux/components/VacancyModals/index.jsx","xhh/./webapp-static/lux/models/employerNegotiationsChangeTopic/stateId.types.ts","xhh/./webapp-static/lux/modules/formatToInt.ts"],"sourcesContent":["import { FC, PropsWithChildren } from 'react';\n\nimport { Card, Title } from '@hh.ru/magritte-ui';\n\nconst BottomSheetHeader: FC<PropsWithChildren> = ({ children }) => {\n    return (\n        <Card stretched paddingLeft={16} paddingRight={16}>\n            <Title size=\"small\">{children}</Title>\n        </Card>\n    );\n};\n\nexport default BottomSheetHeader;\n","import { Link as MagritteLink, TextTypography } from '@hh.ru/magritte-ui';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport format from 'bloko/common/format';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport { updateUrl } from 'Modules/url';\nimport translation from 'lux/components/translation';\n\nconst TrlKeys = {\n    billNumber: {\n        nominative: 'employer.vacancy.draft.autoPublication.billNumber',\n        genitive: 'employer.vacancy.draft.autoPublication.billNumber.genitive',\n    },\n};\n\ninterface AutoPublicationBillInfo {\n    billUid: string;\n    cartId: number;\n    useGenitive?: boolean;\n}\n\nconst AutoPublicationBillInfo: TranslatedComponent<AutoPublicationBillInfo> = ({\n    trls,\n    billUid,\n    cartId,\n    useGenitive,\n}) => (\n    <MagritteLink\n        Element={Link}\n        typography={TextTypography.Label3Regular}\n        to={updateUrl('/employer/carts', { cartId })}\n    >\n        {format(trls[TrlKeys.billNumber[useGenitive ? 'genitive' : 'nominative']], {\n            '{}': billUid,\n        })}\n    </MagritteLink>\n);\n\nexport default translation(AutoPublicationBillInfo);\n","import { createContext } from 'react';\n\ninterface CheckContextType {\n    checkedDrafts: number[];\n    dispatchCheckDraft: ({ type }: { type: string }) => void;\n}\n\nconst DUMMY_FUNCTION = () => {\n    // do nothing\n};\n\nconst CheckContext = createContext<CheckContextType>({\n    checkedDrafts: [],\n    dispatchCheckDraft: DUMMY_FUNCTION,\n});\n\nexport default CheckContext;\n","import { createContext } from 'react';\n\nimport { DEFAULT_FILTERS_VALUES, VacanciesFilters } from 'lux/models/employerVacancies/vacancy.types';\n\ninterface FilterContextType {\n    filters: VacanciesFilters;\n    dispatchFilter: ({ type }: { type: string; payload?: VacanciesFilters }) => void;\n}\n\nconst DUMMY_FUNCTION = () => {\n    // do nothing\n};\n\nconst FilterContext = createContext<FilterContextType>({\n    filters: DEFAULT_FILTERS_VALUES,\n    dispatchFilter: DUMMY_FUNCTION,\n});\n\nexport default FilterContext;\n","export const CHECK_SINGLE = 'single';\nexport const CHECK_ALL = 'all';\nexport const UNCHECK_ALL = 'uncheckAll';\nexport const FILTER_CHECKED = 'filterChecked';\n\nexport default (state = [], { type, payload = {} }) => {\n    const { itemsIds } = payload;\n    const ids = [].concat(itemsIds);\n    const itemId = ids[0];\n\n    switch (type) {\n        case CHECK_SINGLE: {\n            if (state.includes(itemId)) {\n                return state.filter((id) => id !== itemId);\n            }\n            return state.concat(itemId);\n        }\n\n        case CHECK_ALL:\n            if (ids.every((id) => state.includes(id))) {\n                return [];\n            }\n\n            return ids;\n\n        case FILTER_CHECKED:\n            return state.filter((id) => ids.includes(id));\n\n        case UNCHECK_ALL:\n            return [];\n\n        default:\n            return state;\n    }\n};\n","import { DefaultRootState } from 'react-redux';\nimport { AnyAction } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { makeSetStoreField } from '@hh.ru/redux-create-reducer';\n\nimport { VacanciesFilters } from 'lux/models/employerVacancies/vacancy.types';\nimport { ManagerCluster } from 'lux/models/managerCluster';\nimport fetcher from 'lux/modules/fetcher';\n\nimport { SET_FILTERS } from 'lux/components/EmployerVacancies/filterReducer';\nimport {\n    getAvailableFiltersByClusters,\n    intersectFiltersAndAvailableFilters,\n    prepareManagerCluster,\n} from 'lux/components/EmployerVacancies/filters';\n\nconst employerManagerAction = makeSetStoreField('managerCluster');\n\nconst VACANCIES_CLUSTERS_URL = '/shards/employer/vacancies_dashboard/clusters';\n\ndeclare global {\n    interface FetcherGetApi {\n        [VACANCIES_CLUSTERS_URL]: {\n            queryParams: { groupId: string | undefined };\n            response: ManagerCluster;\n        };\n    }\n}\n\nexport default (\n        filters: VacanciesFilters,\n        dispatchFilter: ({ type }: { type: string; payload: VacanciesFilters }) => void,\n        groupId: string | undefined\n    ): ThunkAction<Promise<unknown>, DefaultRootState, unknown, AnyAction> =>\n    async (dispatch) => {\n        let clusters;\n        try {\n            clusters = await fetcher.get(VACANCIES_CLUSTERS_URL, { params: { groupId } });\n        } catch (errror) {\n            console.error(errror);\n            return filters;\n        }\n\n        const managerClusters = prepareManagerCluster(clusters);\n        const availableFilters = getAvailableFiltersByClusters(managerClusters);\n\n        const newFilters = intersectFiltersAndAvailableFilters(filters, availableFilters);\n\n        dispatch(employerManagerAction(clusters));\n        dispatchFilter({ type: SET_FILTERS, payload: newFilters });\n\n        return newFilters;\n    };\n","import { DefaultRootState } from 'react-redux';\nimport { AnyAction } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { updateVacanciesGroups, VacancyGroup } from 'lux/models/employerVacancies/managerVacanciesGroups';\nimport fetcher from 'lux/modules/fetcher';\n\nconst VACANCIES_GROUPS_URL = '/shards/employer/vacancies_dashboard/groups';\n\ndeclare global {\n    interface FetcherGetApi {\n        [VACANCIES_GROUPS_URL]: {\n            queryParams: void;\n            response: { managerVacanciesGroups: VacancyGroup[] };\n        };\n    }\n}\nexport default (currentGroupId: string): ThunkAction<Promise<unknown>, DefaultRootState, unknown, AnyAction> =>\n    async (dispatch) => {\n        let groupsResponse = null;\n        try {\n            groupsResponse = await fetcher.get(VACANCIES_GROUPS_URL);\n        } catch (e) {\n            console.error(e);\n        }\n\n        if (groupsResponse) {\n            dispatch(updateVacanciesGroups({ groups: groupsResponse.managerVacanciesGroups, currentGroupId }));\n        }\n    };\n","export const CHECK_AREA = 'CHECK_AREA';\nexport const CHECK_MANAGER = 'CHECK_MANAGER';\nexport const CHECK_METALLIC = 'CHECK_METALLIC';\nexport const CHECK_VACANCY = 'CHECK_VACANCY';\nexport const CHECK_PREMODERATION = 'CHECK_PREMODERATION';\nexport const VACANCY_NAME = 'VACANCY_NAME';\nexport const CLEAR_CHECKS = 'CLEAR';\nexport const SET_FILTERS = 'SET_FILTERS';\n\nconst getChecked = (state, value) => {\n    if (Array.isArray(value)) {\n        return value;\n    }\n\n    if (state.includes(value)) {\n        return state.filter((id) => id !== value);\n    }\n\n    return state.concat(value);\n};\n\nexport default (state, action) => {\n    switch (action.type) {\n        case VACANCY_NAME:\n            return {\n                ...state,\n                vacancyName: action.payload,\n            };\n        case CHECK_AREA:\n            return {\n                ...state,\n                areaId: getChecked(state.areaId, action.payload),\n            };\n\n        case CHECK_MANAGER:\n            return {\n                ...state,\n                employerManagerId: getChecked(state.employerManagerId, action.payload),\n            };\n\n        case CHECK_METALLIC:\n            return {\n                ...state,\n                vacancyMetallic: getChecked(state.vacancyMetallic, action.payload),\n            };\n\n        case CHECK_VACANCY:\n            return {\n                ...state,\n                vacancyType: getChecked(state.vacancyType, action.payload),\n            };\n\n        case CHECK_PREMODERATION:\n            return {\n                ...state,\n                premoderateStatus: getChecked(state.premoderateStatus, action.payload),\n            };\n        case CLEAR_CHECKS: {\n            const { vacancyName, ...restFilters } = state;\n            const newFiltersValues = Object.keys(restFilters).reduce((result, filterKey) => {\n                result[filterKey] = [];\n                return result;\n            }, {});\n            return {\n                vacancyName,\n                ...newFiltersValues,\n            };\n        }\n        case SET_FILTERS:\n            return {\n                ...state,\n                ...action.payload,\n            };\n\n        default:\n            return state;\n    }\n};\n","import { ManagerName } from 'lux/models/managerCluster';\n\nexport const getFullName = (name: ManagerName, isOwnVacancies = false, ownName = ''): string => {\n    if (isOwnVacancies) {\n        return ownName;\n    }\n\n    return `${name.lastName} ${name.firstName} ${name.middleName || ''}`;\n};\n","import createStaticDataProvider from 'bloko/blocks/suggest/createStaticDataProvider';\nimport { DataProvider } from 'bloko/blocks/suggest/types';\nimport { fromTree } from 'bloko/common/tree/treeCollectionHelper';\n\nimport { AvailableVacanciesFilters, VacanciesFilters } from 'lux/models/employerVacancies/vacancy.types';\nimport { AreaGroup, ClusterGroup, ManagerCluster, ManagerClusterGroup, ManagerName } from 'lux/models/managerCluster';\n\nimport { getFullName } from 'lux/components/EmployerVacancies/employerManager';\n\nconst getAreaGroup = (areaCluster: AreaGroup[]) =>\n    areaCluster.reduce<AreaGroup[]>((allAreas, { childrenAreas }) => [...allAreas, ...childrenAreas], []);\n\nconst isAreaGroup = (groupName: string | ManagerName, isArea: boolean): groupName is string => isArea;\n\nconst getComplexClusterData = (\n    { isComposite, clusterGroups }: { isComposite?: boolean; clusterGroups: AreaGroup[] | ManagerClusterGroup[] },\n    isArea = false\n) => {\n    const clusterData = isArea ? getAreaGroup(clusterGroups as AreaGroup[]) : clusterGroups;\n    const preparedData = clusterData.map<{ id: string; text: string }>(({ value, name }) => ({\n        id: value,\n        text: isAreaGroup(name, isArea) ? name : getFullName(name),\n    }));\n\n    if (isComposite) {\n        return {\n            isComposite,\n            data: {\n                suggest: createStaticDataProvider(preparedData),\n                popup: fromTree(preparedData),\n                raw: preparedData,\n            },\n        };\n    }\n\n    return { isComposite, data: preparedData };\n};\n\ninterface SimpleFilter {\n    isComposite?: boolean;\n    data: { id: string; text: string }[];\n}\n\ninterface ComplexFilter {\n    isComposite?: boolean;\n    data: {\n        suggest: DataProvider;\n        popup: ReturnType<typeof fromTree>;\n        raw: { id: string; text: string }[];\n    };\n}\n\nexport interface FilterCluster {\n    area: SimpleFilter | ComplexFilter;\n    managers: SimpleFilter | ComplexFilter;\n    metallic: { data: ClusterGroup[] };\n    vacancy: { data: ClusterGroup[] };\n    premoderation: { data: ClusterGroup[] };\n}\nexport const prepareManagerCluster = (managerCluster: ManagerCluster): FilterCluster => {\n    const {\n        areaCluster,\n        employerManagerCluster,\n        premoderationStatusCluster,\n        vacancyMetallicCluster,\n        vacancyTypeCluster,\n    } = managerCluster;\n\n    return {\n        area: areaCluster && getComplexClusterData(areaCluster, true),\n        managers: employerManagerCluster && getComplexClusterData(employerManagerCluster),\n        metallic: vacancyMetallicCluster && { data: vacancyMetallicCluster.clusterGroups },\n        vacancy: vacancyTypeCluster && { data: vacancyTypeCluster.clusterGroups },\n        premoderation: premoderationStatusCluster && { data: premoderationStatusCluster.clusterGroups },\n    };\n};\n\nconst isSimpleFilter = (filter: SimpleFilter | ComplexFilter | undefined): filter is SimpleFilter =>\n    !!filter && !filter.isComposite;\n\nexport const getAvailableFiltersByClusters = ({\n    area,\n    managers,\n    metallic,\n    vacancy,\n    premoderation,\n}: FilterCluster): AvailableVacanciesFilters => {\n    const areaData = isSimpleFilter(area) ? area.data : area?.data.raw;\n    const managersData = isSimpleFilter(managers) ? managers.data : managers?.data.raw;\n    return {\n        areaId: areaData && new Set(areaData.map(({ id }) => id)),\n        employerManagerId: managersData && new Set(managersData.map(({ id }) => id)),\n        vacancyMetallic: metallic && new Set(metallic.data.map(({ value }) => value)),\n        vacancyType: vacancy && new Set(vacancy.data.map(({ value }) => value)),\n        premoderateStatus: premoderation && new Set(premoderation.data.map(({ value }) => value)),\n    };\n};\n\nconst isAvailableFiltersHasValue = (\n    availableFilters: AvailableVacanciesFilters,\n    key: keyof AvailableVacanciesFilters\n): availableFilters is Record<keyof AvailableVacanciesFilters, Set<string>> => !!availableFilters[key];\n\nexport const intersectFiltersAndAvailableFilters = (\n    filters: VacanciesFilters,\n    availableFilters: AvailableVacanciesFilters\n): VacanciesFilters => {\n    const { vacancyName, ...checkableFilters } = filters;\n\n    for (const filterName of Object.keys(checkableFilters)) {\n        checkableFilters[filterName] = isAvailableFiltersHasValue(availableFilters, filterName)\n            ? filters[filterName].filter((id) => availableFilters[filterName].has(id))\n            : (checkableFilters[filterName] = []);\n    }\n\n    return { ...checkableFilters, vacancyName };\n};\n","import { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport usePostMessages from 'lux/hooks/usePostMessages';\n\nconst IFrame = forwardRef(({ src, callbacks, ...rest }, ref) => {\n    usePostMessages(callbacks);\n\n    return <iframe ref={ref} {...rest} src={src} />;\n});\n\nIFrame.propTypes = {\n    src: PropTypes.string,\n    callbacks: PropTypes.object,\n};\n\nexport default IFrame;\n","import { useEffect } from 'react';\n\nimport postMessage from 'Modules/PostMessage';\n\n/**\n * usePostMessages\n * @param handlers – ключ-значение, где ключ - имя события, значение - обработчик\n */\nexport default (handlers = {}) => {\n    useEffect(() => {\n        return postMessage.on({\n            handlers,\n        });\n    }, [handlers]);\n};\n","import { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ArrowUpOutlinedSize24 } from '@hh.ru/magritte-ui/icon';\n\nimport axios from 'HHC/Axios';\nimport {\n    ADD_MODAL,\n    MODAL_AUTO_UPDATE_SUMMARY,\n    MODAL_AUTO_UPDATE,\n    MODAL_AUTO_UPDATE_WARNING,\n} from 'lux/components/VacancyModals/constants';\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nimport { UPDATE_CREATE_PERMISSION } from 'lux/components/VacancyActions/ProlongateAction';\nimport getMenuButtonIconProps from 'lux/components/VacancyActions/getMenuButtonIconProps';\n\nexport const useAutoRenewalModal = (\n    vacancyId,\n    vacancyName,\n    autoProlongationCanBeCanceled,\n    dispatchModal,\n    isEdit,\n    isLoading,\n    setLoading,\n    onClose = null,\n    isGroup = false,\n    afterSuccessAction\n) => {\n    const dispatch = useDispatch();\n    return useCallback(async () => {\n        const modalType = autoProlongationCanBeCanceled ? MODAL_AUTO_UPDATE_WARNING : MODAL_AUTO_UPDATE;\n\n        if (isLoading) {\n            return;\n        }\n        setLoading(true);\n\n        let renewalResponse;\n        try {\n            renewalResponse = await axios.putFormData('/shards/employer/vacancies/auto_update/info', {\n                vacancyId,\n            });\n        } catch (err) {\n            dispatch(showDefaultError(err));\n            return;\n        } finally {\n            setLoading(false);\n        }\n\n        const { data: renewalInfo, headers } = renewalResponse;\n\n        onClose?.();\n\n        if (isGroup) {\n            const groupId = headers['x-request-id'].split(',')[0];\n            const renewalSteps = Object.values(renewalInfo.unscheduled).concat(Object.values(renewalInfo.scheduled));\n            const failedToUpdate = Object.keys(renewalInfo.forbidden.vacancies).map((id) => Number(id));\n\n            dispatchModal({\n                type: ADD_MODAL,\n                payload: {\n                    modalType: renewalSteps.length === 0 ? MODAL_AUTO_UPDATE_SUMMARY : MODAL_AUTO_UPDATE,\n                    data: {\n                        vacancyName,\n                        renewalSteps,\n                        failedToUpdate,\n                        groupId,\n                        afterSuccessAction,\n                    },\n                },\n            });\n\n            return;\n        }\n\n        const prolongationFailureReason = renewalInfo.singleVacancyProlongationFailureReason;\n        const [singleRenewalInfo] = Object.values(isEdit ? renewalInfo.scheduled : renewalInfo.unscheduled);\n\n        dispatchModal({\n            type: ADD_MODAL,\n            payload: {\n                modalType,\n                data: {\n                    vacancyId,\n                    vacancyName,\n                    autoRenewal: { ...singleRenewalInfo, prolongationFailureReason },\n                    isEdit,\n                    afterSuccessAction,\n                },\n            },\n        });\n    }, [\n        autoProlongationCanBeCanceled,\n        isLoading,\n        setLoading,\n        onClose,\n        isGroup,\n        vacancyId,\n        isEdit,\n        dispatchModal,\n        vacancyName,\n        dispatch,\n        afterSuccessAction,\n    ]);\n};\n\nconst AutoUpdateAction = ({\n    Component,\n    triggerType,\n    vacancyId,\n    dispatchModal,\n    vacancyName,\n    autoProlongationCanBeCanceled,\n    onClose,\n    vacanciesIds = [],\n    additionalAnalyticsParams,\n    trls,\n    afterSuccessAction,\n    icon,\n}) => {\n    const [isLoading, setLoading] = useState(false);\n    const permissions = useSelector((state) => state.permissions);\n    const triggerName = 'auto-update';\n    const iconProps = getMenuButtonIconProps({\n        triggerType,\n        triggerName,\n        icon: <ArrowUpOutlinedSize24 />,\n    });\n\n    const openModal = useAutoRenewalModal(\n        vacancyId || vacanciesIds,\n        vacancyName,\n        autoProlongationCanBeCanceled,\n        dispatchModal,\n        false,\n        isLoading,\n        setLoading,\n        onClose,\n        !vacancyId,\n        afterSuccessAction\n    );\n\n    return (\n        <Component\n            triggerName={triggerName}\n            triggerType={triggerType}\n            onTrigger={openModal}\n            isLoading={isLoading}\n            isPermitted={permissions.includes(UPDATE_CREATE_PERMISSION)}\n            batchLength={vacanciesIds.length}\n            additionalAnalyticsParams={{ ...additionalAnalyticsParams, action: 'new' }}\n            icon={icon}\n            {...iconProps}\n        >\n            {trls[AutoUpdateAction.trls.autoUpdate]}\n        </Component>\n    );\n};\n\nAutoUpdateAction.propTypes = {\n    Component: PropTypes.elementType.isRequired,\n    triggerType: PropTypes.string,\n    vacanciesIds: PropTypes.array,\n    vacancyId: PropTypes.number,\n    dispatchModal: PropTypes.func,\n    vacancyName: PropTypes.string,\n    autoProlongationCanBeCanceled: PropTypes.bool,\n    onClose: PropTypes.func,\n    additionalAnalyticsParams: PropTypes.object,\n    trls: PropTypes.object,\n    afterSuccessAction: PropTypes.func,\n    icon: PropTypes.element,\n};\n\nAutoUpdateAction.trls = {\n    autoUpdate: 'vacancy.autoUpdate.trigger',\n};\n\nexport default translation(AutoUpdateAction);\n","import addMinutes from 'date-fns/addMinutes';\nimport differenceInSeconds from 'date-fns/differenceInSeconds';\n\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nconst TrlKeys = {\n    freeRenewalTip: 'vacancy.update.freeRenewalTip',\n    freeRenewalAvailableNowTip: 'vacancy.update.freeRenewalAvailableNowTip',\n    minutesOne: 'interval.minutes.0',\n    minutesSome: 'interval.minutes.1',\n    minutesMany: 'interval.minutes.2',\n    hoursOne: 'interval.hours.0',\n    hoursSome: 'interval.hours.1',\n    hoursMany: 'interval.hours.2',\n};\nconst getNextFreeRenewalInterval = (lastActivation: Date, interval: number) => {\n    const nextActivation = addMinutes(lastActivation, interval);\n    return differenceInSeconds(nextActivation, new Date());\n};\n\ninterface FreeRenewalTipProps {\n    lastFreeRenewal: string;\n    freeRenewalInterval: string;\n}\n\nconst FreeRenewalTip: TranslatedComponent<FreeRenewalTipProps> = ({ lastFreeRenewal, freeRenewalInterval, trls }) => {\n    const nextFreeRenewalInterval = getNextFreeRenewalInterval(new Date(lastFreeRenewal), Number(freeRenewalInterval));\n\n    if (nextFreeRenewalInterval <= 0) {\n        return <>{trls[TrlKeys.freeRenewalAvailableNowTip]}</>;\n    }\n\n    const hours = nextFreeRenewalInterval / 3600;\n    const roundedHours = Math.floor(hours);\n    const minutes = (hours - roundedHours) * 60;\n    const roundedMinutes = minutes < 59 ? Math.ceil(minutes) : Math.floor(minutes);\n\n    return formatToReactComponent(trls[TrlKeys.freeRenewalTip], {\n        '{0}': (\n            <>\n                <ConversionNumber\n                    value={roundedHours}\n                    many={trls[TrlKeys.hoursMany]}\n                    some={trls[TrlKeys.hoursSome]}\n                    one={trls[TrlKeys.hoursOne]}\n                />\n                {roundedHours > 0 && NON_BREAKING_SPACE}\n                <ConversionNumber\n                    value={roundedMinutes}\n                    many={trls[TrlKeys.minutesMany]}\n                    some={trls[TrlKeys.minutesSome]}\n                    one={trls[TrlKeys.minutesOne]}\n                />\n            </>\n        ),\n    });\n};\n\nexport default translation(FreeRenewalTip);\n","import { makeSetStoreField } from '@hh.ru/redux-create-reducer';\n\nimport fetcher from 'lux/modules/fetcher';\n\nconst fetchUpdateInfoSuccess = makeSetStoreField('updateInfo');\n\nexport default ({ params }) =>\n    async (dispatch) => {\n        const updateInfo = await fetcher.post('/employer/vacancy/update_info', params);\n\n        dispatch(fetchUpdateInfoSuccess(updateInfo.data));\n\n        return updateInfo.data;\n    };\n","import { useCallback, useState, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport HoverTip, { TipPlacement } from 'bloko/blocks/drop/Tip/HoverTip';\nimport useBreakpoint, { Breakpoint } from 'bloko/common/hooks/useBreakpoint';\n\nimport { VACANCY_ACTION_ERROR } from 'lux/components/Notifications/VacancyActionError';\nimport { ADD_MODAL, MODAL_PROLONGATE } from 'lux/components/VacancyModals/constants';\nimport translation from 'lux/components/translation';\nimport addNotification from 'lux/requests/notifications/addNotification';\n\nimport FreeRenewalTip from 'lux/components/VacancyActions/FreeRenewalTip';\nimport fetchUpdateInfo from 'lux/components/VacancyActions/fetchUpdateInfo';\n\nexport const UPDATE_CREATE_PERMISSION = 'CreateVacancy';\n\nexport const ProlongateActionComponent = ({\n    Component,\n    triggerType,\n    onClose,\n    vacanciesIds,\n    dispatchModal,\n    permissions,\n    managerVacancies,\n    fetchUpdateInfo,\n    addNotification,\n    freeRenewalInfo,\n    availableVacancyActions,\n    additionalAnalyticsParams,\n    displayInOwnColumn,\n    actionType,\n    afterSuccessAction,\n    icon,\n    trls,\n}) => {\n    const [isLoading, setLoading] = useState(false);\n    const breakpoint = useBreakpoint();\n    const canShowHoverTip = [Breakpoint.M, Breakpoint.L].includes(breakpoint);\n\n    const { isFreeRenewalAvailable, lastFreeRenewal, freeRenewalInterval } = freeRenewalInfo || {\n        isFreeRenewalAvailable: false,\n        lastFreeRenewal: '',\n        freeRenewalInterval: '',\n    };\n\n    const vacanciesToProlongate = useMemo(() => {\n        const allVacancies = managerVacancies?.vacancies?.list || [];\n\n        return allVacancies.reduce((vacanciesToProlongate, { vacancyId, suggestProlongate }) => {\n            if (vacanciesIds.includes(vacancyId) && (suggestProlongate || availableVacancyActions?.update)) {\n                return vacanciesToProlongate.concat(vacancyId);\n            }\n\n            return vacanciesToProlongate;\n        }, []);\n    }, [availableVacancyActions.update, managerVacancies, vacanciesIds]);\n\n    const openModal = useCallback(() => {\n        dispatchModal({\n            type: ADD_MODAL,\n            payload: {\n                modalType: MODAL_PROLONGATE,\n                data: {\n                    vacanciesToProlongate,\n                    vacanciesIds,\n                    afterSuccessAction,\n                    freeRenewalData: {\n                        isFreeRenewalAvailable,\n                        lastFreeRenewal,\n                        freeRenewalInterval,\n                    },\n                },\n            },\n        });\n        onClose && onClose();\n    }, [\n        dispatchModal,\n        vacanciesToProlongate,\n        vacanciesIds,\n        afterSuccessAction,\n        isFreeRenewalAvailable,\n        lastFreeRenewal,\n        freeRenewalInterval,\n        onClose,\n    ]);\n\n    const loadUpdateInfo = useCallback(() => {\n        setLoading(true);\n\n        return fetchUpdateInfo({ params: { id: vacanciesIds } }).then(\n            () => {\n                openModal();\n                setLoading(false);\n            },\n            () => {\n                addNotification(VACANCY_ACTION_ERROR);\n                setLoading(false);\n            }\n        );\n    }, [fetchUpdateInfo, vacanciesIds, addNotification, openModal]);\n\n    return (\n        <Component\n            triggerName=\"prolongate\"\n            triggerType={triggerType}\n            onTrigger={loadUpdateInfo}\n            batchLength={vacanciesIds.length}\n            isPermitted={permissions.includes(UPDATE_CREATE_PERMISSION)}\n            isLoading={isLoading}\n            additionalAnalyticsParams={additionalAnalyticsParams}\n            actionType={actionType}\n            displayInOwnColumn={displayInOwnColumn}\n            icon={icon}\n        >\n            {isFreeRenewalAvailable && canShowHoverTip ? (\n                <HoverTip\n                    placement={TipPlacement.Bottom}\n                    render={() => (\n                        <FreeRenewalTip lastFreeRenewal={lastFreeRenewal} freeRenewalInterval={freeRenewalInterval} />\n                    )}\n                    host={!process.env.LUX_SERVER ? document.body : null}\n                >\n                    {trls[ProlongateActionComponent.trls.renewal]}\n                </HoverTip>\n            ) : (\n                trls[ProlongateActionComponent.trls.renewal]\n            )}\n        </Component>\n    );\n};\n\nProlongateActionComponent.propTypes = {\n    Component: PropTypes.elementType.isRequired,\n    triggerType: PropTypes.string,\n    onClose: PropTypes.func,\n    vacanciesIds: PropTypes.arrayOf(PropTypes.number).isRequired,\n    dispatchModal: PropTypes.func,\n    permissions: PropTypes.array,\n    managerVacancies: PropTypes.object,\n    fetchUpdateInfo: PropTypes.func,\n    addNotification: PropTypes.func,\n    freeRenewalInfo: PropTypes.object,\n    additionalAnalyticsParams: PropTypes.object,\n    trls: PropTypes.object,\n    availableVacancyActions: PropTypes.object,\n    displayInOwnColumn: PropTypes.bool,\n    actionType: PropTypes.string,\n    icon: PropTypes.element,\n    afterSuccessAction: PropTypes.func,\n};\n\nProlongateActionComponent.trls = {\n    prolongate: 'vacancy.update.trigger',\n    renewal: 'vacancy.action.renewal',\n};\n\nexport default connect(\n    ({ permissions, managerVacancies, availableVacancyActions }) => ({\n        permissions,\n        managerVacancies,\n        availableVacancyActions,\n    }),\n    {\n        fetchUpdateInfo,\n        addNotification,\n    }\n)(translation(ProlongateActionComponent));\n","import { ReactNode } from 'react';\n\nimport {\n    SquaresIntersectedSize16,\n    FolderOutlinedSize16,\n    PenSquareOutlinedSize16,\n    CalendarOutlinedSize16,\n    AstrostarOutlinedSize16,\n    ArrowUpOutlinedSize16,\n    LinkOutlinedSize16,\n} from '@hh.ru/magritte-ui/icon';\n\nexport const BUTTON_ICONS: Record<string, ReactNode> = {\n    archive: <FolderOutlinedSize16 />,\n    edit: <PenSquareOutlinedSize16 />,\n    'auto-prolongation-toggle': <CalendarOutlinedSize16 />,\n    duplicate: <SquaresIntersectedSize16 />,\n    upgrade: <AstrostarOutlinedSize16 />,\n    'option-toggle': <ArrowUpOutlinedSize16 />,\n    videointerview: <LinkOutlinedSize16 />,\n};\n\nconst getMenuButtonIconByName = (tirggerName: string): ReactNode | undefined => BUTTON_ICONS[tirggerName];\nexport default getMenuButtonIconByName;\n","import { ReactNode } from 'react';\n\nimport { ButtonIconPosition } from 'bloko/blocks/button';\n\nimport getMenuButtonIconByName from 'lux/components/VacancyActions/getMenuButtonIconByName';\n\ntype IconNode = ReactNode;\n\nconst getMenuButtonIconProps = ({\n    triggerType,\n    triggerName,\n    icon,\n}: {\n    triggerType?: string;\n    triggerName?: string;\n    icon: IconNode;\n}): { icon: IconNode; iconPosition: ButtonIconPosition } | undefined => {\n    if (\n        triggerName &&\n        [\n            'archive',\n            'edit',\n            'auto-prolongation-toggle',\n            'duplicate',\n            'upgrade',\n            'option-toggle',\n            'videointerview',\n        ].includes(triggerName) &&\n        ['button', 'menu'].includes(triggerType)\n    ) {\n        const icon = getMenuButtonIconByName(triggerName);\n        return icon ? { icon, iconPosition: ButtonIconPosition.Left } : undefined;\n    }\n\n    if (\n        !icon ||\n        !['buttonMenu', 'actionList'].includes(triggerType) ||\n        ![\n            'archive',\n            'auto-update',\n            'auto-prolongation-toggle',\n            'auto-publication-preview',\n            'cancelAutoPublication',\n            'cancel-scheduled-publication',\n            'delete-draft',\n            'draft-publish-scheduled',\n            'duplicate',\n            'edit',\n            'edit-auto-update',\n            'edit-draft',\n            'option-toggle',\n            'statistics',\n            'transfer',\n            'transfer-draft',\n            'upgrade',\n            'videointerview',\n            'change-visibility',\n        ].includes(triggerName)\n    ) {\n        return undefined;\n    }\n\n    return { icon, iconPosition: ButtonIconPosition.Right };\n};\n\nexport default getMenuButtonIconProps;\n","import { push } from 'connected-react-router';\n\nimport {\n    AUTO_PROLONGATION_PURCHASE_SUCCESS,\n    AUTO_PROLONGATION_PURCHASE_SUCCESSES,\n    VACANCY_AUTO_PROLONGATION_ERROR,\n    VACANCY_AUTO_PROLONGATION_ERRORS,\n    VACANCY_AUTO_PROLONGATION_SUCCESS,\n    VACANCY_AUTO_PROLONGATION_SUCCESSES,\n} from 'lux/components/Notifications/EmployerVacancies';\nimport { updateManagerVacancies } from 'lux/models/employerVacancies/managerVacancies';\nimport fetcher from 'lux/modules/fetcher';\nimport addNotification from 'lux/requests/notifications/addNotification';\n\nexport default ({ action, vacanciesIds, withPurchasing = false, agreementId, location }) =>\n    (dispatch, getState) => {\n        const vacancies = getState()\n            .managerVacancies.vacancies.list.filter((item) => vacanciesIds.includes(item.vacancyId))\n            .map((item) => ({\n                ...item,\n                ...{\n                    canEnableAutoProlongation: action === 'disable',\n                    canDisableAutoProlongation: action === 'enable',\n                },\n            }));\n\n        return fetcher\n            .post(`/shards/employer/vacancies/auto_prolongation/${action}`, {\n                vacanciesIds,\n                withPurchasing,\n                agreementId,\n            })\n            .then(\n                (response) => {\n                    if (location.pathname.match('/vacancy/')) {\n                        dispatch(push(`${location.pathname}${response.data.query}`));\n                        return;\n                    }\n                    if (vacanciesIds.length === 1) {\n                        dispatch(\n                            addNotification(VACANCY_AUTO_PROLONGATION_SUCCESS, { name: vacancies[0].name, action })\n                        );\n                        withPurchasing && dispatch(addNotification(AUTO_PROLONGATION_PURCHASE_SUCCESS));\n                    } else {\n                        dispatch(addNotification(VACANCY_AUTO_PROLONGATION_SUCCESSES));\n                        withPurchasing && dispatch(addNotification(AUTO_PROLONGATION_PURCHASE_SUCCESSES));\n                    }\n\n                    dispatch(updateManagerVacancies({ vacancies }));\n                },\n                () => {\n                    if (vacanciesIds.length === 1) {\n                        dispatch(addNotification(VACANCY_AUTO_PROLONGATION_ERROR, { name: vacancies[0].name, action }));\n                    } else {\n                        dispatch(addNotification(VACANCY_AUTO_PROLONGATION_ERRORS));\n                    }\n                }\n            );\n    };\n","import PropTypes from 'prop-types';\n\nexport const RenewalObjectType = PropTypes.shape({\n    ids: PropTypes.arrayOf(PropTypes.number),\n    publicationType: PropTypes.string,\n    scheduleTypesWithUpdatesCount: PropTypes.object,\n    closestPossibleProlongation: PropTypes.string,\n    maxLastUpdateDateTime: PropTypes.string,\n    prolongationFailureReason: PropTypes.string,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"hiringSurvey\":\"hiring-survey--YGz3M5Wer2_oE2DLY8gs\",\"hiringSurveyFooter\":\"hiring-survey-footer--SLTjGjvDVopZJxD8MjOB\",\"checkboxWrapper\":\"checkbox-wrapper--i8OCpf1xdTZtb_8g9xvQ\",\"candidateWrapper\":\"candidate-wrapper--JciVl8aPNMAv402Vy0fZ\",\"sendButtonWrapper\":\"send-button-wrapper--DPITIuUZ96DVmOWwawwr\",\"otherCandidates\":\"other-candidates--tHOPCEPgS3YPJUhEUwst\",\"otherCandidatesCountWrapper\":\"other-candidates-count-wrapper--H3lB0tSEI_yOwTTyWFFt\"};","import { useEffect, useMemo, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport employerHiringInterviewArchiveButtonClick from '@hh.ru/analytics-js-events/build/xhh/employer/archive/employer_hiring_interview_archive_button_click';\nimport employerHiringInterviewArchiveElementShown from '@hh.ru/analytics-js-events/build/xhh/employer/archive/employer_hiring_interview_archive_element_shown';\nimport {\n    BottomSheet,\n    BottomSheetFooter,\n    Button,\n    ButtonMode,\n    ButtonStyle,\n    Card,\n    Checkbox,\n    Input,\n    Link as MagritteLink,\n    LinkStyle,\n    Loader,\n    Modal,\n    NumberInput,\n    Text,\n    TextTypography,\n    useBreakpoint,\n} from '@hh.ru/magritte-ui';\nimport { MinusCircleOutlinedSize24, PlusCircleOutlinedSize24 } from '@hh.ru/magritte-ui/icon';\nimport { useSelectorNonNullable } from '@hh.ru/redux-create-reducer';\nimport Suggest, { SuggestLayer } from 'bloko/blocks/suggest';\nimport createRemoteDataProvider from 'bloko/blocks/suggest/createRemoteDataProvider';\nimport { DataProvider, DataProviderItem } from 'bloko/blocks/suggest/types';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format } from 'bloko/common/trl';\n\nimport BottomSheetHeader from 'lux/components/BottomSheetHeader';\nimport translation from 'lux/components/translation';\nimport { StateId } from 'lux/models/employerNegotiationsChangeTopic/stateId.types';\nimport { HiringPlanType } from 'lux/models/employerVacancies/vacancyHiringPlans';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nimport styles from './hiring-survey.less';\n\nconst WILDCARD = '%QUERY%';\nconst ANOTHER_CANDIDATE_ID = 'another';\n\nconst GET_HIRING_PLAN_URL = '/shards/employer/vacancies/hiring_plan/get_hiring_plan';\nconst UPDATE_HIRING_PLAN_URL = '/shards/employer/vacancies/hiring_plan/update_hiring_plan';\nconst GET_CANDIDATES_TO_SHOW = '/shards/negotiations/candidates_for_interview';\n\ninterface Candidate {\n    id: string;\n    title: string;\n    firstName: string;\n    middleName: string;\n    lastName: string;\n    hash: string;\n    hired?: boolean;\n}\n\nconst TrlKeys = {\n    title: 'employerHiringStatus.positive.title',\n    another: 'employerHiringStatus.positive.answer.another',\n    continue: 'employerHiringStatus.continue',\n    search: 'employerHiringStatus.search',\n};\n\ndeclare global {\n    interface FetcherGetApi {\n        [GET_CANDIDATES_TO_SHOW]: {\n            queryParams: {\n                vacancyId: number;\n                excludeHired?: boolean;\n            };\n            response: {\n                candidates: Candidate[];\n            };\n        };\n    }\n}\n\ndeclare global {\n    interface FetcherPostApi {\n        [UPDATE_HIRING_PLAN_URL]: {\n            body: HiringPlanType;\n            queryParams: {\n                vacancyId: string;\n            };\n            response: void;\n        };\n    }\n}\n\ndeclare global {\n    interface FetcherGetApi {\n        [GET_HIRING_PLAN_URL]: {\n            queryParams: {\n                vacancyId: string;\n            };\n            response: {\n                hiringPlan: HiringPlanType;\n            };\n        };\n    }\n}\n\nconst onMoveCandidatesToHired = async (vacancyId: string, resumeHash: string[]) => {\n    if (resumeHash.length > 0) {\n        await fetcher.postFormData('/employer/negotiations/change_topic', {\n            vacancyId,\n            state: StateId.Hired,\n            resumeHash,\n        });\n    }\n};\n\nconst updateCandidatesWithoutHHResume = async (vacancyId: string, candidatesWithoutHHResume: number) => {\n    await fetcher.post(\n        UPDATE_HIRING_PLAN_URL,\n        {\n            hiredWithoutResumeCount: candidatesWithoutHHResume,\n        },\n        {\n            params: {\n                vacancyId,\n            },\n        }\n    );\n};\n\nconst getHiringPlan = (vacancyId: string) => {\n    return fetcher.get(GET_HIRING_PLAN_URL, {\n        params: { vacancyId },\n    });\n};\n\ninterface HiringSurveyProps {\n    visible: boolean;\n    vacancyId: number;\n    onClose: () => void;\n    isVacancyArchived?: boolean;\n    isVacancyView?: boolean;\n    onTriggerUxFeedbackSurvey?: () => void;\n}\n\ninterface CandidateItem extends DataProviderItem {\n    candidate?: Candidate;\n}\n\nconst HiringSurvey: TranslatedComponent<HiringSurveyProps> = ({\n    trls,\n    visible,\n    vacancyId,\n    onClose,\n    isVacancyArchived = false,\n    isVacancyView = false,\n    onTriggerUxFeedbackSurvey,\n}) => {\n    const [inputValue, setInputValue] = useState('');\n    const candidatesRef = useRef<HTMLDivElement>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [candidates, setCandidates] = useState<Candidate[]>([]);\n    const domain = useSelectorNonNullable((state) => state.topLevelDomain);\n    const hiredWithoutResumeCount = useSelector(\n        (state) => state.vacancyHiringPlans[vacancyId]?.[0].hiredWithoutResumeCount\n    );\n    const [hiredWithoutResumeState, setHiredWithoutResumeState] = useState<string>(`${hiredWithoutResumeCount || 0}`);\n    const [isOtherCandidatesInputVisible, setOtherCandidatesInputVisible] = useState(!!hiredWithoutResumeCount);\n    const [result, setResult] = useState<string[]>(hiredWithoutResumeCount ? [ANOTHER_CANDIDATE_ID] : []);\n    const [isHiringPlanEnabledOnArchivedVacancy, setHiringPlanEnabledOnArchivedVacancy] = useState(false);\n    const dispatch = useDispatch();\n    const { isMobile } = useBreakpoint();\n\n    useEffect(() => {\n        async function prepareData() {\n            const [{ candidates }, { hiringPlan }] = await Promise.all([\n                fetcher.get(GET_CANDIDATES_TO_SHOW, {\n                    params: { vacancyId, excludeHired: !isVacancyArchived },\n                }),\n                isVacancyArchived ? getHiringPlan(String(vacancyId)) : { hiringPlan: {} as HiringPlanType },\n            ]);\n\n            setLoading(false);\n            setCandidates(candidates);\n            if (hiringPlan.plannedCount) {\n                setHiringPlanEnabledOnArchivedVacancy(true);\n            }\n            if (hiringPlan.hiredWithoutResumeCount) {\n                setHiredWithoutResumeState(String(hiringPlan.hiredWithoutResumeCount));\n                setResult([ANOTHER_CANDIDATE_ID]);\n                setOtherCandidatesInputVisible(true);\n            }\n            if (candidatesRef.current && isVacancyArchived) {\n                employerHiringInterviewArchiveElementShown(candidatesRef.current, {\n                    vacancyId: String(vacancyId),\n                    resumeIdList: candidates.map(({ id }) => id).join(),\n                });\n            }\n            if (isVacancyArchived) {\n                setResult((result) => [\n                    ...result,\n                    ...candidates.filter((candidate) => candidate.hired).map(({ id }) => id),\n                ]);\n            }\n        }\n        void prepareData();\n    }, [vacancyId, isVacancyArchived]);\n\n    const dataProvider = useMemo(\n        () =>\n            createRemoteDataProvider(\n                `/shards/employer/vacancyresponses/by_name?vacancyId=${vacancyId}&q=${WILDCARD}`,\n                WILDCARD\n            ),\n        [vacancyId]\n    ) as DataProvider<CandidateItem>;\n\n    const checkItem = (candidateId: string) => {\n        if (result.includes(candidateId)) {\n            setResult(result.filter((item) => item !== candidateId));\n        } else {\n            setResult([...result, candidateId]);\n        }\n    };\n\n    const handleContinue = async () => {\n        if (isVacancyArchived) {\n            employerHiringInterviewArchiveButtonClick({ vacancyId: String(vacancyId), resumeIdList: result.join() });\n        }\n        if (isHiringPlanEnabledOnArchivedVacancy || !isVacancyArchived) {\n            await Promise.all([\n                onMoveCandidatesToHired(\n                    String(vacancyId),\n                    candidates.filter(({ id }) => result.includes(id)).map(({ hash }) => hash)\n                ),\n                updateCandidatesWithoutHHResume(\n                    String(vacancyId),\n                    isOtherCandidatesInputVisible ? Number(hiredWithoutResumeState) : 0\n                ),\n            ]).catch((error) => {\n                dispatch(showDefaultError(error));\n            });\n        }\n        if (isVacancyView) {\n            onTriggerUxFeedbackSurvey && onTriggerUxFeedbackSurvey();\n        }\n        onClose();\n    };\n\n    const modalTitle = trls[TrlKeys.title];\n    const modalLeftButtons = (\n        <div className={styles.hiringSurveyFooter}>\n            <div className={styles.otherCandidates}>\n                <label className={styles.checkboxWrapper}>\n                    <Checkbox\n                        data-qa=\"hiring-survey-another\"\n                        value={ANOTHER_CANDIDATE_ID}\n                        checked={isOtherCandidatesInputVisible}\n                        onChange={() => {\n                            checkItem(ANOTHER_CANDIDATE_ID);\n                            setOtherCandidatesInputVisible((value) => !value);\n                        }}\n                    />\n                    <Text>{format(trls[TrlKeys.another], { '{0}': domain })}</Text>\n                </label>\n                {isOtherCandidatesInputVisible && (\n                    <div className={styles.otherCandidatesCountWrapper}>\n                        <NumberInput\n                            data-qa=\"hiring-survey-count\"\n                            allowNegative={false}\n                            decimalLength={0}\n                            value={hiredWithoutResumeState}\n                            onChange={(value) => setHiredWithoutResumeState(value)}\n                            onBlur={() =>\n                                setHiredWithoutResumeState(\n                                    hiredWithoutResumeState === '.' ? '0' : `${Number(hiredWithoutResumeState)}`\n                                )\n                            }\n                        />\n                        <Button\n                            mode={ButtonMode.Tertiary}\n                            style={ButtonStyle.Accent}\n                            onClick={() =>\n                                setHiredWithoutResumeState((val) =>\n                                    val === '' ? '0' : `${Number(val) > 0 ? Number(val) - 1 : val}`\n                                )\n                            }\n                        >\n                            <MinusCircleOutlinedSize24 />\n                        </Button>\n                        <Button\n                            mode={ButtonMode.Tertiary}\n                            style={ButtonStyle.Accent}\n                            onClick={() =>\n                                setHiredWithoutResumeState((val) => (val === '' ? '0' : `${Number(val) + 1}`))\n                            }\n                        >\n                            <PlusCircleOutlinedSize24 />\n                        </Button>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n    const modalRightButtons = (\n        <Button\n            disabled={loading}\n            mode={ButtonMode.Primary}\n            style={ButtonStyle.Accent}\n            onClick={handleContinue}\n            data-qa=\"hiring-survey-modal-submit\"\n        >\n            {trls[TrlKeys.continue]}\n        </Button>\n    );\n    const modalContent = (\n        <div className={styles.hiringSurvey} ref={candidatesRef}>\n            {loading ? (\n                <Card paddingBottom={16}>\n                    <Loader size={64} />\n                </Card>\n            ) : (\n                <>\n                    <Suggest\n                        layer={SuggestLayer.AboveOverlayContent}\n                        dataProvider={dataProvider}\n                        itemContent={({ text, candidate }: CandidateItem) => {\n                            return (\n                                <div\n                                    data-qa=\"hiring-survey-suggest-item\"\n                                    onClick={() => {\n                                        if (candidate) {\n                                            if (!candidates.find(({ id }) => id === candidate.id)) {\n                                                setCandidates([candidate, ...candidates]);\n                                            }\n                                            if (!result.includes(candidate.id)) {\n                                                setResult([...result, candidate.id]);\n                                            }\n                                        }\n                                        setInputValue('');\n                                    }}\n                                >\n                                    {text}\n                                </div>\n                            );\n                        }}\n                        value={{ text: inputValue }}\n                    >\n                        <Input\n                            clearable\n                            placeholder={trls[TrlKeys.search]}\n                            data-qa=\"hiring-survey-suggest-input\"\n                            value={inputValue}\n                            onChange={setInputValue}\n                        />\n                    </Suggest>\n                    <Card paddingTop={16}>\n                        {candidates.map((candidate) => (\n                            <Card key={candidate.id} stretched paddingBottom={8}>\n                                <label className={styles.checkboxWrapper}>\n                                    <Checkbox\n                                        data-qa={`hiring-survey-candidate-${candidate.hash}`}\n                                        value={candidate.id}\n                                        checked={result.includes(candidate.id)}\n                                        onChange={() => checkItem(candidate.id)}\n                                    />\n                                    <div className={styles.candidateWrapper}>\n                                        <MagritteLink\n                                            Element=\"a\"\n                                            target=\"_blank\"\n                                            style={LinkStyle.Accent}\n                                            href={`/resume/${candidate.hash}?hhtmFromLabel=hiring_survey`}\n                                        >\n                                            <Text typography={TextTypography.Paragraph2Regular}>\n                                                {candidate.lastName} {candidate.firstName} {candidate.middleName}\n                                            </Text>\n                                        </MagritteLink>\n                                        <Text typography={TextTypography.Paragraph2Regular}>{candidate.title}</Text>\n                                    </div>\n                                </label>\n                            </Card>\n                        ))}\n                    </Card>\n                </>\n            )}\n        </div>\n    );\n\n    return (\n        <>\n            <Modal\n                showCloseButton\n                visible={visible}\n                title={modalTitle}\n                titleSize=\"medium\"\n                leftButtons={modalLeftButtons}\n                rightButtons={<div className={styles.sendButtonWrapper}>{modalRightButtons}</div>}\n                onClose={onClose}\n            >\n                {modalContent}\n            </Modal>\n            <BottomSheet\n                visible={isMobile && visible}\n                header={<BottomSheetHeader>{modalTitle}</BottomSheetHeader>}\n                footer={\n                    <BottomSheetFooter>\n                        {modalLeftButtons}\n                        {modalRightButtons}\n                    </BottomSheetFooter>\n                }\n                onClose={onClose}\n            >\n                {modalContent}\n            </BottomSheet>\n        </>\n    );\n};\n\nexport default translation(HiringSurvey);\n","import Analytics from '@hh.ru/analytics-js';\n\nconst CLOSABLE_EVENTS = ['success', 'cancel'];\nconst NON_CLOSABLE_ACTIONS = ['linkQuestionnaire', 'addQuestionnaire'];\n\nexport const shouldCloseIframe = (eventId, payload) =>\n    CLOSABLE_EVENTS.includes(eventId) && !NON_CLOSABLE_ACTIONS.includes(payload.action);\n\nexport const getIframeSrc = (vacancyId, preparedSrc = null) => {\n    if (preparedSrc) {\n        return `${window.globalVars.skillazURL}${preparedSrc}`;\n    }\n\n    return `${window.globalVars.skillazURL}/hh?page=questionnaire&vacancyId=${vacancyId}`;\n};\n\nexport const isSkillazOrigin = (origin) => origin === window.globalVars.skillazURL;\n\nexport const sendSkillazEventAnalytics = (eventId, payload, labelPageId) => {\n    Analytics.sendHHEvent('skillazEvent', {\n        goal: 'PORTFOLIO-10079',\n        labelPageId,\n        labelEventId: eventId,\n        ...(payload?.action ? { labelEventType: payload.action } : {}),\n    });\n};\n","import { memo, useRef, useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Modal from 'bloko/blocks/modal';\n\nimport { VIDEO_INTERVIEW_NOTIFICATIONS } from 'lux/components/Notifications/VideoInterviewModal';\nimport {\n    getIframeSrc,\n    isSkillazOrigin,\n    sendSkillazEventAnalytics,\n    shouldCloseIframe,\n} from 'lux/modules/employer/videoInterview';\nimport { useSelector } from 'lux/modules/useSelector';\nimport addNotification from 'lux/requests/notifications/addNotification';\n\nconst VideoInterviewModal = ({ handleCloseModal, isVisible, authToken, vacanciesIds }) => {\n    const [isModalInit, setModalInit] = useState(true);\n    const labelPageId = useSelector((state) => state.request.id);\n    const iframeSrc = getIframeSrc(vacanciesIds[0]);\n    const iframeRef = useRef(null);\n    const iframeSizes = useRef({ width: 1, height: 1 });\n    const dispatch = useDispatch();\n\n    const authorizeIframe = useCallback(\n        (event) => {\n            event.target.contentWindow.postMessage(authToken, window.globalVars.skillazURL);\n        },\n        [authToken]\n    );\n\n    useEffect(() => {\n        const handleIframeEvents = ({ data: { eventId, payload }, origin }) => {\n            if (!isSkillazOrigin(origin)) {\n                return;\n            }\n\n            if (eventId === 'size') {\n                if (isModalInit) {\n                    iframeSizes.current = {\n                        width: payload.width,\n                        height: payload.height,\n                    };\n                    setModalInit(false);\n                    return;\n                }\n\n                if (iframeRef.current) {\n                    iframeRef.current.width = payload.width;\n                    iframeRef.current.height = payload.height;\n                }\n\n                return;\n            }\n\n            sendSkillazEventAnalytics(eventId, payload, labelPageId);\n\n            if (eventId === 'success' && payload.action in VIDEO_INTERVIEW_NOTIFICATIONS) {\n                dispatch(addNotification(payload.action));\n            }\n\n            if (shouldCloseIframe(eventId, payload)) {\n                handleCloseModal();\n            }\n        };\n\n        window.addEventListener('message', handleIframeEvents);\n\n        return () => {\n            window.removeEventListener('message', handleIframeEvents);\n        };\n    }, [authToken, dispatch, handleCloseModal, iframeSrc, isModalInit, isVisible, labelPageId, vacanciesIds]);\n\n    if (isModalInit) {\n        return <iframe onLoad={authorizeIframe} className=\"g-invisible\" src={iframeSrc} {...iframeSizes.current} />;\n    }\n\n    return (\n        <Modal visible={isVisible} onClose={handleCloseModal}>\n            <div>\n                <iframe src={iframeSrc} ref={iframeRef} onLoad={authorizeIframe} {...iframeSizes.current} />\n            </div>\n        </Modal>\n    );\n};\n\nVideoInterviewModal.propTypes = {\n    isVisible: PropTypes.bool,\n    handleCloseModal: PropTypes.func,\n    authToken: PropTypes.string,\n    vacanciesIds: PropTypes.array,\n};\n\nexport default memo(VideoInterviewModal);\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n    BottomSheet,\n    BottomSheetFooter,\n    Button,\n    ButtonMode,\n    ButtonStyle,\n    Modal,\n    Text,\n    TextArea,\n    TextTypography,\n    useBreakpoint,\n} from '@hh.ru/magritte-ui';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport format from 'bloko/common/format';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport BottomSheetHeader from 'lux/components/BottomSheetHeader';\nimport { DEFAULT_ERROR } from 'lux/components/Notifications/DefaultError';\nimport translation from 'lux/components/translation';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\nimport addNotification from 'lux/requests/notifications/addNotification';\n\nconst SEND_FEEDBACK_MESSAGES = '/shards/employer/vacancies/archive_vacancy_applicants_feedback';\n\ninterface FeedbackMessageType {\n    message: string;\n    vacancyIds: number[];\n}\n\ndeclare global {\n    interface FetcherPostApi {\n        [SEND_FEEDBACK_MESSAGES]: {\n            body: FeedbackMessageType;\n            response: void;\n            queryParams: void;\n        };\n    }\n}\n\ntype OnCloseParams = { feedbackSent: boolean };\ninterface Props {\n    visible: boolean;\n    vacanciesIds: number[];\n    onClose: (params?: OnCloseParams) => void;\n}\n\nconst TrlKeys = {\n    messageTemplate: 'employer.vacancy.archive.applicantsFeedback.modal.messageTemplate',\n    headerOne: 'employer.vacancy.archive.applicantsFeedback.modal.header.one',\n    headerMany: 'employer.vacancy.archive.applicantsFeedback.modal.header.many',\n    text: 'employer.vacancy.archive.applicantsFeedback.modal.text',\n    close: 'employer.vacancy.archive.applicantsFeedback.modal.close',\n    sendMessage: 'employer.vacancy.archive.applicantsFeedback.modal.sendMessage',\n};\n\nconst ArchiveVacancyApplicantsFeedback: TranslatedComponent<Props> = ({ visible, vacanciesIds, onClose, trls }) => {\n    const dispatch = useDispatch();\n    const { isMobile } = useBreakpoint();\n    const employerManager = useSelector((state) => state.employerManager);\n    const [message, setMessage] = useState(\n        format(trls[TrlKeys.messageTemplate], {\n            '{0}': employerManager ? `${employerManager.lastName} ${employerManager.firstName}` : '',\n        })\n    );\n    const sendFeedback = async () => {\n        try {\n            await fetcher.post(SEND_FEEDBACK_MESSAGES, {\n                message,\n                vacancyIds: vacanciesIds,\n            });\n            onClose({ feedbackSent: true });\n        } catch (e) {\n            dispatch(addNotification(DEFAULT_ERROR));\n        }\n    };\n\n    const modalTitle = vacanciesIds.length === 1 ? trls[TrlKeys.headerOne] : trls[TrlKeys.headerMany];\n    const modalContent = (\n        <>\n            <Text typography={TextTypography.Paragraph2Regular}>{trls[TrlKeys.text]}</Text>\n            <VSpacing base={6} />\n            <TextArea\n                data-qa=\"archive-vacancy-feedback-text\"\n                layout=\"hug\"\n                value={message}\n                onChange={(event) => setMessage(event.target.value)}\n            />\n        </>\n    );\n    const modalButtons = (\n        <>\n            <Button\n                data-qa=\"archive-vacancy-feedback-close\"\n                mode={ButtonMode.Secondary}\n                style={ButtonStyle.Accent}\n                onClick={() => onClose()}\n            >\n                {trls[TrlKeys.close]}\n            </Button>\n            <Button\n                data-qa=\"archive-vacancy-feedback-submit\"\n                mode={ButtonMode.Primary}\n                style={ButtonStyle.Accent}\n                onClick={sendFeedback}\n            >\n                {trls[TrlKeys.sendMessage]}\n            </Button>\n        </>\n    );\n\n    return (\n        <>\n            <Modal\n                visible={visible}\n                title={modalTitle}\n                titleSize=\"medium\"\n                rightButtons={modalButtons}\n                onClose={onClose}\n            >\n                {modalContent}\n            </Modal>\n            <BottomSheet\n                visible={isMobile && visible}\n                header={<BottomSheetHeader>{modalTitle}</BottomSheetHeader>}\n                footer={<BottomSheetFooter>{modalButtons}</BottomSheetFooter>}\n                onClose={onClose}\n            >\n                {modalContent}\n            </BottomSheet>\n        </>\n    );\n};\n\nexport default translation(ArchiveVacancyApplicantsFeedback);\n","// extracted by mini-css-extract-plugin\nexport default {\"archiveModalContent\":\"archive-modal-content--d1kwaMwCUjuf4e2cTK7X\",\"archiveModalReasons\":\"archive-modal-reasons--MZf6TkmyI2CCnGzq1vlF\",\"archiveModalReasonWrapper\":\"archive-modal-reason-wrapper--aIIDXd_Y3BjHUQmcYIQw\"};","import { memo } from 'react';\n\nimport { Reason } from '@hh.ru/analytics-js-events/build/xhh/employer/archive/modal_archive_button_button_click';\nimport {\n    BottomSheet,\n    BottomSheetFooter,\n    Button,\n    ButtonMode,\n    ButtonStyle,\n    Card,\n    CardStyle,\n    Modal,\n    Radio,\n    Text,\n    TextTypography,\n    useBreakpoint,\n} from '@hh.ru/magritte-ui';\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format } from 'bloko/common/trl';\n\nimport BottomSheetHeader from 'lux/components/BottomSheetHeader';\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nimport styles from './styles.less';\n\nconst TrlKeys = {\n    archive: 'employer.myVacancyes.archivate',\n    reason: 'employer.myVacancies.archive.title.reason',\n    foundHere: 'employer.myVacancies.archive.reason.foundHere',\n    foundNotHere: 'employer.myVacancies.archive.reason.foundNotHere',\n    otherReason: 'employer.myVacancies.archive.reason.otherReason',\n    warning: 'employer.myVacancies.archive.warning',\n    cancel: 'employer.myVacancyes.move.cancel',\n    toArchive: 'employer.myVacancies.archive.toArchive',\n    error: 'employer.myVacancies.archive.error',\n    title: {\n        one: 'employer.myVacancies.archive.title.one',\n        some: 'employer.myVacancies.archive.title.some',\n        many: 'employer.myVacancies.archive.title.many',\n    },\n    text: {\n        one: 'employer.myVacancies.archive.text.one',\n        some: 'employer.myVacancies.archive.text.some',\n        many: 'employer.myVacancies.archive.text.many',\n    },\n};\nconst POSTFIX_NAME = 'foundHere';\n\nconst ARCHIVE_REASONS: { name: Reason; qa: string }[] = [\n    { name: POSTFIX_NAME, qa: 'vacancies-radio-reason_foundhere' },\n    { name: 'foundNotHere', qa: 'vacancies-radio-reason_foundnothere' },\n    { name: 'otherReason', qa: 'vacancies-radio-reason_otherreason' },\n];\n\ninterface ArchiveModalProps {\n    visible: boolean;\n    vacanciesToArchiveCount: number;\n    archivationReasonRequired: boolean;\n    archivationReason: string | null;\n    archivationReasonError: string | null;\n    archivationSubmitError: boolean;\n    onSelectArchivationReason: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    onClose: () => void;\n    onSubmit: () => void;\n}\n\nconst ArchiveModal: TranslatedComponent<ArchiveModalProps> = ({\n    trls,\n    visible,\n    vacanciesToArchiveCount,\n    archivationReasonRequired,\n    archivationReason,\n    archivationReasonError,\n    archivationSubmitError,\n    onSelectArchivationReason,\n    onClose,\n    onSubmit,\n}) => {\n    const { isMobile } = useBreakpoint();\n\n    const archiveModalTitle = (\n        <ConversionNumber\n            value={vacanciesToArchiveCount}\n            format={(trl) => format(trl, { '%s': vacanciesToArchiveCount })}\n            one={trls[archivationReasonRequired ? TrlKeys.reason : TrlKeys.title.one]}\n            some={trls[TrlKeys.title.some]}\n            many={trls[TrlKeys.title.many]}\n            hasValue={false}\n        />\n    );\n\n    const archiveModalContent = (\n        <div className={styles.archiveModalContent}>\n            <div className={styles.archiveModalReasons}>\n                {archivationReasonRequired ? (\n                    ARCHIVE_REASONS.map(({ name, qa }) => {\n                        const text = trls[TrlKeys[name]];\n                        return (\n                            <div key={name}>\n                                <label className={styles.archiveModalReasonWrapper}>\n                                    <Radio\n                                        value={name}\n                                        checked={name === archivationReason}\n                                        invalid={archivationSubmitError}\n                                        onChange={onSelectArchivationReason}\n                                    />\n                                    <Text data-qa={qa} typography={TextTypography.Paragraph3Regular}>\n                                        {name === POSTFIX_NAME\n                                            ? `${text}${NON_BREAKING_SPACE}${window.location.hostname}`\n                                            : text}\n                                    </Text>\n                                </label>\n                            </div>\n                        );\n                    })\n                ) : (\n                    <ConversionNumber\n                        value={vacanciesToArchiveCount}\n                        format={(trl) => format(trl, { '%s': vacanciesToArchiveCount })}\n                        one={trls[TrlKeys.text.one]}\n                        some={trls[TrlKeys.text.some]}\n                        many={trls[TrlKeys.text.many]}\n                        hasValue={false}\n                    />\n                )}\n            </div>\n            {(archivationSubmitError || archivationReasonError) && (\n                <Card data-qa=\"vacancies-archive-modal-submit-error\" stretched style={CardStyle.Negative} padding={16}>\n                    <Text typography={TextTypography.Paragraph3Regular}>\n                        {archivationSubmitError ? trls[TrlKeys.error] : archivationReasonError}\n                    </Text>\n                </Card>\n            )}\n            <Text typography={TextTypography.Paragraph3Regular}>{trls[TrlKeys.warning]}</Text>\n        </div>\n    );\n\n    const archiveModalButtons = (\n        <>\n            <Button\n                mode={ButtonMode.Secondary}\n                style={ButtonStyle.Accent}\n                data-qa=\"vacancies-archivePopup-cancel\"\n                onClick={onClose}\n            >\n                {trls[TrlKeys.cancel]}\n            </Button>\n            <Button\n                mode={ButtonMode.Primary}\n                style={ButtonStyle.Accent}\n                data-qa=\"vacancies-archivePopup-archive\"\n                onClick={onSubmit}\n            >\n                {trls[TrlKeys.toArchive]}\n            </Button>\n        </>\n    );\n\n    return (\n        <>\n            <Modal\n                showCloseButton\n                visible={visible}\n                title={archiveModalTitle}\n                titleSize=\"medium\"\n                rightButtons={archiveModalButtons}\n                onClose={onClose}\n                data-qa=\"vacancies-archive-modal\"\n            >\n                {archiveModalContent}\n            </Modal>\n            <BottomSheet\n                visible={isMobile && visible}\n                header={<BottomSheetHeader>{archiveModalTitle}</BottomSheetHeader>}\n                footer={<BottomSheetFooter>{archiveModalButtons}</BottomSheetFooter>}\n                onClose={onClose}\n            >\n                {archiveModalContent}\n            </BottomSheet>\n        </>\n    );\n};\n\nexport default translation(memo(ArchiveModal));\n","import { useDispatch } from 'react-redux';\n\nimport { ARCHIVE_VACANCY_SUCCESS } from 'lux/components/Notifications/EmployerVacancies';\nimport fetcher from 'lux/modules/fetcher';\nimport addNotification from 'lux/requests/notifications/addNotification';\n\nconst VACANCIES_ARCHIVE_URL = '/employer/vacancy/archive';\n\ndeclare global {\n    interface FetcherPostApi {\n        [VACANCIES_ARCHIVE_URL]: {\n            queryParams: void;\n            body: {\n                reason: string;\n                id: number[];\n            };\n            response: {\n                query?: string;\n                daysUntilReadOnly: number;\n            };\n        };\n    }\n}\ntype FetchUnpremoderatedVacancies = (params: {\n    additional: {\n        name: string;\n    };\n    params: {\n        reason: string;\n        id: number[];\n    };\n}) => Promise<string>;\n\nconst useArchiveVacancyFetcher: () => {\n    fetchArchiveVacancy: FetchUnpremoderatedVacancies;\n} = () => {\n    const dispatch = useDispatch();\n\n    const fetchArchiveVacancy: FetchUnpremoderatedVacancies = async ({ additional, params }) => {\n        const { name } = additional;\n\n        const response = await fetcher.postFormData(VACANCIES_ARCHIVE_URL, params);\n\n        dispatch(\n            addNotification(ARCHIVE_VACANCY_SUCCESS, {\n                name,\n                count: params.id.length,\n                daysUntilReadOnly: response.data?.daysUntilReadOnly,\n            })\n        );\n\n        return response.data.query || '';\n    };\n\n    return { fetchArchiveVacancy };\n};\n\nexport default useArchiveVacancyFetcher;\n","import { useCallback, useRef, useState } from 'react';\n\nimport modalArchiveButtonButtonClick, {\n    Reason,\n} from '@hh.ru/analytics-js-events/build/xhh/employer/archive/modal_archive_button_button_click';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport ArchiveVacancyApplicantsFeedback from 'lux/components/VacancyModals/ArchiveVacancyApplicantsFeedback';\nimport HiringSurvey from 'lux/components/VacancyModals/HiringSurvey';\nimport translation from 'lux/components/translation';\nimport { UserType } from 'lux/models/userType';\nimport { useSelector } from 'lux/modules/useSelector';\nimport { UXFeedback } from 'lux/modules/uxfeedback';\n\nimport ArchiveModal from 'lux/components/VacancyModals/Archive/ArchiveModal';\nimport useArchiveVacancyFetcher from 'lux/components/VacancyModals/Archive/useArchiveVacancyFetcher';\n\nconst POSTFIX_NAME = 'foundHere';\n\nconst TrlKeys = {\n    emptyReasonError: 'employer.myVacancies.archive.emptyReasonError',\n};\n\nconst Features = {\n    hiringSurveyModal: 'hiring_survey_modal',\n};\n\ninterface Props {\n    isVisible: boolean;\n    vacanciesIds: number[];\n    vacancyName: string;\n    onArchiveSuccess: (params: { isFeedbackSent: boolean; responseQuery: string }) => void;\n    handleCloseModal: () => void;\n}\n\nconst Archive: TranslatedComponent<Props> = ({\n    isVisible,\n    vacanciesIds = [],\n    vacancyName = '',\n    onArchiveSuccess,\n    handleCloseModal,\n    trls,\n}) => {\n    const features = useSelector((state) => state.features);\n    const userType = useSelector((state) => state.userType);\n    const employerRegistrationTimeInDelta = useSelector((state) => state.employerRegistrationTimeInDelta);\n\n    const isArchivedRef = useRef(false);\n    const responseQueryRef = useRef('');\n    const isFeedbackSentRef = useRef(false);\n\n    const [archivationReason, setArchivationReason] = useState<string | null>(null);\n    const [archivationSubmitError, setArchivationSubmitError] = useState(false);\n    const [archivationReasonError, setArchivationReasonError] = useState<string | null>(null);\n    const [showHiringSurvey, setShowHiringSurvey] = useState(false);\n    const [showApplicantsFeedback, setShowApplicantsFeedback] = useState(false);\n    const { fetchArchiveVacancy } = useArchiveVacancyFetcher();\n\n    const archivationReasonRequired = vacanciesIds.length === 1 && userType !== UserType.BackOffice;\n    const enableHiringSurvey =\n        features[Features.hiringSurveyModal] && archivationReasonRequired && archivationReason === POSTFIX_NAME;\n\n    const handleSelectArchivationReason = useCallback(({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n        setArchivationReason(value);\n        setArchivationReasonError(null);\n    }, []);\n\n    const handleTriggerUxFeedbackSurvey = useCallback(() => {\n        if (employerRegistrationTimeInDelta) {\n            UXFeedback.sendEvent('first_experience_survey');\n        }\n    }, [employerRegistrationTimeInDelta]);\n\n    const handleCloseModalWithUxFeedbackSurvey = useCallback(() => {\n        isArchivedRef.current &&\n            onArchiveSuccess({ isFeedbackSent: isFeedbackSentRef.current, responseQuery: responseQueryRef.current });\n\n        handleCloseModal();\n        handleTriggerUxFeedbackSurvey();\n    }, [handleCloseModal, handleTriggerUxFeedbackSurvey, onArchiveSuccess]);\n\n    const handleCloseHiringSurvey = () => {\n        setShowHiringSurvey(false);\n        setShowApplicantsFeedback(true);\n    };\n\n    const handleCloseArchiveVacancyApplicantsFeedback = useCallback(\n        ({ feedbackSent = false } = {}) => {\n            isFeedbackSentRef.current = feedbackSent;\n\n            handleCloseModalWithUxFeedbackSurvey();\n        },\n        [handleCloseModalWithUxFeedbackSurvey]\n    );\n\n    const handleSubmit = useCallback(() => {\n        modalArchiveButtonButtonClick({ vacancyIdList: vacanciesIds.join(), reason: archivationReason as Reason });\n\n        if (archivationReasonRequired && !archivationReason) {\n            setArchivationReasonError(trls[TrlKeys.emptyReasonError]);\n            return;\n        }\n\n        let name: string | null = null;\n\n        if (archivationReasonRequired) {\n            name = vacancyName;\n        }\n\n        fetchArchiveVacancy({\n            params: { reason: archivationReason as string, id: vacanciesIds },\n            additional: { name: name as string },\n        }).then(\n            (query) => {\n                isArchivedRef.current = true;\n                responseQueryRef.current = query;\n\n                if (enableHiringSurvey) {\n                    setShowHiringSurvey(true);\n                    return;\n                }\n                setShowApplicantsFeedback(true);\n            },\n            () => {\n                setArchivationSubmitError(true);\n            }\n        );\n    }, [\n        vacanciesIds,\n        vacancyName,\n        archivationReason,\n        archivationReasonRequired,\n        fetchArchiveVacancy,\n        enableHiringSurvey,\n        trls,\n    ]);\n\n    if (showHiringSurvey) {\n        return (\n            <HiringSurvey\n                visible={isVisible}\n                isVacancyArchived\n                vacancyId={vacanciesIds[0]}\n                onTriggerUxFeedbackSurvey={handleTriggerUxFeedbackSurvey}\n                onClose={handleCloseHiringSurvey}\n            />\n        );\n    }\n\n    if (showApplicantsFeedback) {\n        return (\n            <ArchiveVacancyApplicantsFeedback\n                visible={isVisible}\n                vacanciesIds={vacanciesIds}\n                onClose={handleCloseArchiveVacancyApplicantsFeedback}\n            />\n        );\n    }\n\n    return (\n        <ArchiveModal\n            visible={isVisible}\n            vacanciesToArchiveCount={vacanciesIds.length}\n            archivationReasonRequired={archivationReasonRequired}\n            archivationReason={archivationReason}\n            archivationReasonError={archivationReasonError}\n            archivationSubmitError={archivationSubmitError}\n            onSelectArchivationReason={handleSelectArchivationReason}\n            onClose={handleCloseModalWithUxFeedbackSurvey}\n            onSubmit={handleSubmit}\n        />\n    );\n};\n\nexport default translation(Archive);\n","import { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CustomSelect, {\n    CustomSelectOption,\n    CustomSelectOptionSecondaryText,\n    CustomSelectLayer,\n} from 'bloko/blocks/customSelect';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport FormatMoney from 'lux/components/FormatMoney';\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nconst ACCOUNT_FORMAT_STRING = `{0}, {1}${NON_BREAKING_SPACE}— {2}`;\n\nconst PayerAccountSelect = ({ accounts, minimumValueInCents, value, onChange, trls, ...selectProps }) => {\n    const [selectedAccount, setSelectedAccount] = useState(value);\n\n    const selectItem = useCallback(\n        (selected) => {\n            setSelectedAccount(selected);\n            onChange(selected);\n        },\n        [onChange, setSelectedAccount]\n    );\n\n    useEffect(() => {\n        if (!selectedAccount) {\n            return;\n        }\n\n        const isSelectedValid = accounts.some(({ id, availableMoney }) => {\n            return id === selectedAccount && availableMoney * 100 >= minimumValueInCents;\n        });\n\n        if (!isSelectedValid) {\n            selectItem(null);\n        }\n    }, [minimumValueInCents, selectItem, accounts, selectedAccount]);\n\n    return (\n        <CustomSelect\n            {...selectProps}\n            emptyPlaceholder={trls[PayerAccountSelect.trls.placeholder]}\n            value={selectedAccount}\n            onChange={selectItem}\n            layer={CustomSelectLayer.AboveOverlayContent}\n            title={trls[PayerAccountSelect.trls.account]}\n        >\n            {accounts.map(({ id, name, number, availableMoney, payerName, currency }) => (\n                <CustomSelectOption\n                    key={id}\n                    value={id}\n                    data-item-value={id}\n                    disabled={availableMoney * 100 < minimumValueInCents}\n                >\n                    {formatToReactComponent(ACCOUNT_FORMAT_STRING, {\n                        '{0}': name,\n                        '{1}': number,\n                        '{2}': <FormatMoney currency={currency}>{availableMoney}</FormatMoney>,\n                    })}\n                    <CustomSelectOptionSecondaryText>{payerName}</CustomSelectOptionSecondaryText>\n                </CustomSelectOption>\n            ))}\n        </CustomSelect>\n    );\n};\n\nPayerAccountSelect.propTypes = {\n    accounts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number,\n            name: PropTypes.string,\n            number: PropTypes.string,\n            availableMoney: PropTypes.number,\n            payerName: PropTypes.string,\n            currency: PropTypes.string,\n        })\n    ),\n    minimumValueInCents: PropTypes.number.isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    onChange: PropTypes.func.isRequired,\n    trls: PropTypes.object,\n};\n\nPayerAccountSelect.trls = {\n    placeholder: 'employer.accountSelect.placeholder',\n    account: 'VacancyCreate.PublicationType.Promo.BuyAndPublishPromo.account',\n};\n\nexport default translation(PayerAccountSelect);\n","import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Conversion from 'bloko/blocks/conversion';\nimport { FormError } from 'bloko/blocks/form';\nimport { H1 } from 'bloko/blocks/header';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport Strings from 'Utils/Strings';\nimport PayerAccountSelect from 'lux/components/Employer/PayerAccountSelect';\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst AutoProlongationPurchase = ({\n    showError,\n    onSelect,\n    publicationTypes,\n    totalCost,\n    totalCount,\n    currency,\n    agreements,\n    trls,\n}) => {\n    const currencyName = useSelector(({ currencies: { list } }) => list.find(({ code }) => code === currency).name);\n\n    return (\n        <>\n            {formatToReactComponent(trls[AutoProlongationPurchase.trls.publicationsNeeded], {\n                '{0}': (\n                    <Conversion\n                        one={trls[AutoProlongationPurchase.trls.publicationsOne]}\n                        some={trls[AutoProlongationPurchase.trls.publicationsSome]}\n                        many={trls[AutoProlongationPurchase.trls.publicationsMany]}\n                        value={totalCount}\n                        hasValue\n                    />\n                ),\n                '{1}': (\n                    <span>\n                        {publicationTypes.map((type, index) => (\n                            <Fragment key={type}>\n                                «{trls[AutoProlongationPurchase.trls[`publicationType.${type}`]]}»\n                                {index !== publicationTypes.length - 1 && ', '}\n                            </Fragment>\n                        ))}\n                    </span>\n                ),\n            })}\n            <VSpacing base={2} />\n            {trls[AutoProlongationPurchase.trls.accountDescription]}\n            <VSpacing base={2} />\n            <H1 Element=\"span\" lite>\n                {`${Strings.formatCost(totalCost)} ${currencyName}`}\n            </H1>\n            <VSpacing base={10} />\n            <PayerAccountSelect\n                accounts={agreements}\n                minimumValueInCents={totalCost * 100}\n                onChange={onSelect}\n                invalid={showError}\n            />\n            <FormError show={showError}>{trls[AutoProlongationPurchase.trls.accountError]}</FormError>\n        </>\n    );\n};\n\nAutoProlongationPurchase.propTypes = {\n    showError: PropTypes.bool,\n    onSelect: PropTypes.func.isRequired,\n    publicationTypes: PropTypes.arrayOf(PropTypes.string),\n    totalCount: PropTypes.number,\n    totalCost: PropTypes.number,\n    currency: PropTypes.string,\n    agreements: PropTypes.array,\n    trls: PropTypes.object,\n};\n\nAutoProlongationPurchase.trls = {\n    publicationError: 'employer.vacancies.autoprolongation.popup.publication.error',\n    accountDescription: 'employer.vacancies.autoprolongation.popup.account.description',\n    accountError: 'employer.vacancies.autoprolongation.popup.account.error',\n    publicationsNeeded: 'employer.vacancies.autoprolongation.popup.account.type',\n    publicationsOne: 'employer.vacancies.autoprolongation.popup.account.type.one',\n    publicationsSome: 'employer.vacancies.autoprolongation.popup.account.type.some',\n    publicationsMany: 'employer.vacancies.autoprolongation.popup.account.type.many',\n    'publicationType.PREMIUM': 'employer.VacancyCreate.PublicationType.PREMIUM',\n    'publicationType.STANDARD_PLUS': 'employer.VacancyCreate.PublicationType.STANDARD_PLUS',\n    'publicationType.STANDARD_PLUS_ANONYMOUS': 'employer.VacancyCreate.PublicationType.STANDARD_PLUS_ANONYMOUS',\n    'publicationType.STANDARD': 'employer.VacancyCreate.PublicationType.STANDARD',\n    'publicationType.STANDARD_ANONYMOUS': 'employer.VacancyCreate.PublicationType.STANDARD_ANONYMOUS',\n    'publicationType.STANDARD_ADVERTISING': 'employer.VacancyCreate.PublicationType.STANDARD_ADVERTISING',\n    'publicationType.FREE': 'employer.VacancyCreate.PublicationType.FREE',\n};\n\nexport default translation(AutoProlongationPurchase);\n","import { useMemo } from 'react';\n\nimport { CurrencyType } from 'lux/models/currencies.types';\nimport MetallicVacancyType from 'lux/models/vacancy/metallicVacancyType.types';\n\ninterface Agreement {\n    id: number;\n    availableMoney: number;\n    name: string;\n    currency: CurrencyType;\n    number: string;\n    payerName: string;\n}\n\ninterface Requirements {\n    purchaseRequired?: boolean;\n    publicationType?: MetallicVacancyType;\n    purchaseInfo?: {\n        agreements: Agreement[];\n        currency: CurrencyType;\n        totalCost: number;\n    };\n    shouldBePurchased?: {\n        agreements: Agreement[];\n        currency: string;\n        publicationTypes: Record<\n            MetallicVacancyType,\n            {\n                count: number;\n            }\n        >;\n        totalCost: number;\n    };\n}\n\ninterface PreparedRequirements {\n    purchaseRequired: boolean;\n    publicationTypes?: string[];\n    totalCount?: number;\n    totalCost?: number;\n    currency?: string;\n    agreements?: Agreement[];\n}\n\nconst usePrepareRequirements = (requirements: Requirements): PreparedRequirements => {\n    return useMemo(() => {\n        if (!requirements) {\n            return {\n                purchaseRequired: false,\n            };\n        }\n\n        const { purchaseRequired, publicationType, purchaseInfo, shouldBePurchased } = requirements;\n\n        if (purchaseRequired && publicationType && purchaseInfo) {\n            return {\n                purchaseRequired: true,\n                publicationTypes: [publicationType],\n                totalCount: 1,\n                totalCost: purchaseInfo.totalCost,\n                currency: purchaseInfo.currency,\n                agreements: purchaseInfo.agreements,\n            };\n        }\n\n        if (shouldBePurchased) {\n            let totalCount = 0;\n            const publicationTypes = [];\n\n            for (const [key, value] of Object.entries(shouldBePurchased.publicationTypes)) {\n                publicationTypes.push(key);\n                totalCount += value.count;\n            }\n\n            return {\n                purchaseRequired: true,\n                totalCount,\n                publicationTypes,\n                totalCost: shouldBePurchased.totalCost,\n                currency: shouldBePurchased.currency,\n                agreements: shouldBePurchased.agreements,\n            };\n        }\n\n        return {\n            purchaseRequired: false,\n        };\n    }, [requirements]);\n};\n\nexport default usePrepareRequirements;\n","import { useState, useCallback, useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\nimport Modal, { ModalHeader, ModalTitle, ModalFooter } from 'bloko/blocks/modal';\nimport VSpacing from 'bloko/blocks/vSpacing';\n\nimport vacancyAutoProlongation from 'lux/components/VacancyActions/vacancyAutoProlongation';\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport AutoProlongationPurchase from 'lux/components/VacancyModals/AutoProlongation/AutoProlongationPurchase';\nimport usePrepareRequirements from 'lux/components/VacancyModals/AutoProlongation/usePrepareRequirements';\n\nconst AutoProlongation = ({ handleCloseModal, vacanciesIds, isVisible, requirements, afterSuccessAction, trls }) => {\n    const dispatch = useDispatch();\n    const [showAgreementsError, setShowAgreementsError] = useState(false);\n    const [selectedAgreement, setSelectedAgreement] = useState(null);\n    const [planLoading, setPlanLoading] = useState(false);\n    const [purchaseLoading, setPurchaseLoading] = useState(false);\n    const location = useSelector((state) => state.router.location);\n    const modalRef = useRef(null);\n\n    const { purchaseRequired, ...purchaseInfo } = usePrepareRequirements(requirements);\n\n    useEffect(() => {\n        modalRef.current &&\n            Analytics.sendHHEventElementShown(modalRef.current, {\n                name: purchaseRequired ? 'auto_prolongation_purchase_suggest' : 'auto_prolongation_confirmation',\n                vacancy_id: vacanciesIds, // eslint-disable-line camelcase\n            });\n    }, [modalRef, purchaseRequired, vacanciesIds]);\n\n    const handleSubmitCommon = useCallback(\n        async (eventName, withPurchasing) => {\n            try {\n                await dispatch(\n                    vacancyAutoProlongation({\n                        action: 'enable',\n                        vacanciesIds,\n                        withPurchasing,\n                        agreementId: selectedAgreement,\n                        location,\n                    })\n                );\n\n                Analytics.sendHHEventButtonClick(eventName);\n\n                if (afterSuccessAction) {\n                    afterSuccessAction();\n\n                    return;\n                }\n\n                handleCloseModal();\n            } catch {\n                handleCloseModal();\n            }\n        },\n        [afterSuccessAction, dispatch, handleCloseModal, location, selectedAgreement, vacanciesIds]\n    );\n\n    const handleSubmitPlan = useCallback(() => {\n        if (planLoading || purchaseLoading) {\n            return;\n        }\n\n        setPlanLoading(true);\n        handleSubmitCommon('auto_prolongation_publication_plan', false);\n    }, [handleSubmitCommon, planLoading, purchaseLoading]);\n\n    const handleSubmitPurchase = useCallback(() => {\n        Analytics.sendHHEventButtonClick('modal_auto_prolongation_button');\n\n        if (planLoading || purchaseLoading) {\n            return;\n        }\n\n        if (purchaseRequired && !selectedAgreement) {\n            setShowAgreementsError(true);\n            return;\n        }\n\n        setPurchaseLoading(true);\n        const eventName = purchaseRequired ? 'auto_prolongation_publication_purchase' : 'auto_prolongation_confirm';\n        handleSubmitCommon(eventName, purchaseRequired);\n    }, [handleSubmitCommon, planLoading, purchaseLoading, purchaseRequired, selectedAgreement]);\n\n    const handleAgreementSelect = useCallback((agreementId) => {\n        setShowAgreementsError(!agreementId);\n        setSelectedAgreement(agreementId);\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        const eventName = purchaseRequired ? 'auto_prolongation_publication_cancel' : 'auto_prolongation_cancel';\n        Analytics.sendHHEventButtonClick(eventName);\n        handleCloseModal();\n    }, [handleCloseModal, purchaseRequired]);\n\n    return (\n        <Modal visible={isVisible} onClose={handleCloseModal}>\n            <ModalHeader outlined>\n                <ModalTitle>{trls[AutoProlongation.trls.modalTitle]}</ModalTitle>\n            </ModalHeader>\n            <div\n                className=\"vacancy-auto-prolongation-modal-content\"\n                data-qa=\"vacancy-auto-prolongation-info\"\n                ref={modalRef}\n            >\n                <div data-qa=\"vacancy-auto-prolongation-info\">{trls[AutoProlongation.trls.info]}</div>\n                {purchaseRequired && (\n                    <>\n                        <VSpacing base={10} />\n                        <AutoProlongationPurchase\n                            showError={showAgreementsError}\n                            onSelect={handleAgreementSelect}\n                            {...purchaseInfo}\n                        />\n                    </>\n                )}\n            </div>\n            <ModalFooter>\n                <div className=\"vacancy-auto-prolongation-modal-button-grid\">\n                    <div className=\"vacancy-auto-prolongation-modal-button-grid__item\">\n                        <Button stretched onClick={handleCancel}>\n                            {trls[AutoProlongation.trls.cancel]}\n                        </Button>\n                    </div>\n                    {purchaseRequired && (\n                        <div className=\"vacancy-auto-prolongation-modal-button-grid__item\">\n                            <Button\n                                stretched\n                                loading={planLoading && <Loading scale={LoadingScale.Small} />}\n                                onClick={handleSubmitPlan}\n                                data-qa=\"vacancies-autoProlongationPopup-enable-without-purchasing\"\n                            >\n                                {trls[AutoProlongation.trls.enableWithoutPurchasing]}\n                            </Button>\n                        </div>\n                    )}\n                    <div className=\"vacancy-auto-prolongation-modal-button-grid__item\">\n                        <Button\n                            stretched\n                            loading={purchaseLoading && <Loading scale={LoadingScale.Small} />}\n                            onClick={handleSubmitPurchase}\n                            kind={ButtonKind.Primary}\n                            data-qa=\"vacancies-autoProlongationPopup-enable\"\n                        >\n                            {purchaseRequired\n                                ? trls[AutoProlongation.trls.buyAndEnable]\n                                : trls[AutoProlongation.trls.enable]}\n                        </Button>\n                    </div>\n                </div>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nAutoProlongation.propTypes = {\n    isVisible: PropTypes.bool,\n    handleCloseModal: PropTypes.func.isRequired,\n    vacancyUpgrades: PropTypes.object,\n    vacanciesIds: PropTypes.array,\n    requirements: PropTypes.shape({\n        publicationType: PropTypes.string,\n        purchaseRequired: PropTypes.bool,\n        purchaseInfo: PropTypes.object,\n    }),\n    trls: PropTypes.object,\n    afterSuccessAction: PropTypes.func,\n};\n\nAutoProlongation.trls = {\n    enable: 'employer.vacancies.autoProlongation.plan',\n    buyAndEnable: 'employer.vacancies.autoProlongation.buyAndEnable',\n    enableWithoutPurchasing: 'employer.vacancies.autoProlongation.enableWithoutPurchasing',\n    cancel: 'employer.myVacancyes.move.cancel',\n    modalTitle: 'employer.vacancies.autoProlongation.modal.title.enable',\n    info: 'employer.vacancies.autoProlongation.modal.text.enable',\n};\n\nexport default translation(AutoProlongation);\n","import { useMemo } from 'react';\n\nimport {\n    Modal,\n    Text,\n    TextTypography,\n    useBreakpoint,\n    BottomSheet,\n    BottomSheetFooter,\n    Button,\n    ButtonStyle,\n    ButtonMode,\n    TextStyle,\n} from '@hh.ru/magritte-ui';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport urlParser from 'bloko/common/urlParser';\n\nimport BottomSheetHeader from 'lux/components/BottomSheetHeader';\nimport AutoPublicationBillInfo from 'lux/components/EmployerVacancies/BillInfo';\nimport VacancyPreview from 'lux/components/VacancyPreview';\nimport translation from 'lux/components/translation';\nimport { BillInfo } from 'lux/models/employerVacancies/vacancy.types';\n\nconst TrlKeys = {\n    awaitingPayment: 'employer.vacancy.draft.awaitingPayment',\n    print: 'employer.myVacancies.dashboard.draft.print',\n};\n\ninterface AutoPublicationProps {\n    isVisible: boolean;\n    handleCloseModal: () => void;\n    draftId: number;\n    billInfo: BillInfo;\n}\n\nconst AutoPublication: TranslatedComponent<AutoPublicationProps> = ({\n    isVisible,\n    handleCloseModal,\n    draftId,\n    billInfo,\n    trls,\n}) => {\n    const { isMobile } = useBreakpoint();\n\n    const printButtonUrl = useMemo<string>(() => {\n        const params = urlParser.stringify({\n            draftId,\n            print: 'true',\n            showHidden: 'true',\n        });\n\n        return `/vacancy/view?${params}`;\n    }, [draftId]);\n\n    const printButton = (\n        <Button\n            mode={ButtonMode.Tertiary}\n            style={ButtonStyle.Accent}\n            Element={Link}\n            to={printButtonUrl}\n            target=\"_blank\"\n            data-qa=\"vacancy-print-view\"\n        >\n            {trls[TrlKeys.print]}\n        </Button>\n    );\n\n    const title = (\n        <Text style={TextStyle.Secondary} typography={TextTypography.Paragraph3Regular}>\n            {trls[TrlKeys.awaitingPayment]}\n            {billInfo && (\n                <>\n                    {' '}\n                    <AutoPublicationBillInfo {...billInfo} useGenitive />\n                </>\n            )}\n        </Text>\n    );\n\n    const preview = <VacancyPreview draftId={draftId} visible={isVisible} showHidden autoWidth />;\n\n    return (\n        <>\n            <Modal\n                showCloseButton\n                titleSize=\"medium\"\n                visible={isVisible}\n                onClose={handleCloseModal}\n                rightButtons={printButton}\n                title={title}\n            >\n                {preview}\n            </Modal>\n\n            {isMobile && (\n                <BottomSheet\n                    visible={isVisible}\n                    header={<BottomSheetHeader>{title}</BottomSheetHeader>}\n                    footer={<BottomSheetFooter>{printButton}</BottomSheetFooter>}\n                    onClose={handleCloseModal}\n                >\n                    {preview}\n                </BottomSheet>\n            )}\n        </>\n    );\n};\n\nexport default translation(AutoPublication);\n","import { DefaultRootState } from 'react-redux';\nimport { AnyAction } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { AUTO_PUBLICATION_DISABLED } from 'lux/components/Notifications/EmployerVacancies';\nimport { removeAutoPublicationDraft } from 'lux/models/employerVacancies/managerVacancies';\nimport { fetchAndUpdateVacanciesCount } from 'lux/models/employerVacancies/vacanciesCount';\nimport fetcher from 'lux/modules/fetcher';\nimport addNotification from 'lux/requests/notifications/addNotification';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nconst DISABLE_AUTOPUBLICATION_URL = '/shards/employer/vacancies/auto_publication/disable';\n\ndeclare global {\n    interface FetcherPostApi {\n        [DISABLE_AUTOPUBLICATION_URL]: {\n            queryParams: void;\n            body: { draftId: number };\n            response: void;\n        };\n    }\n}\n\nexport default (draftId: number): ThunkAction<Promise<unknown>, DefaultRootState, unknown, AnyAction> =>\n    async (dispatch, getState) => {\n        try {\n            await fetcher.post(DISABLE_AUTOPUBLICATION_URL, { draftId });\n        } catch (err) {\n            dispatch(showDefaultError(err));\n            throw err;\n        }\n        dispatch(addNotification(AUTO_PUBLICATION_DISABLED));\n        const managerId = parseInt(getState().employerManager?.id || '', 10);\n        dispatch(removeAutoPublicationDraft({ draftId }));\n        void fetchAndUpdateVacanciesCount(dispatch, managerId);\n    };\n","import { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n    Modal,\n    useBreakpoint,\n    BottomSheet,\n    BottomSheetFooter,\n    Button,\n    ButtonStyle,\n    ButtonMode,\n} from '@hh.ru/magritte-ui';\nimport { useSelectorNonNullable } from '@hh.ru/redux-create-reducer';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport BottomSheetHeader from 'lux/components/BottomSheetHeader';\nimport fetchGroupsInfo from 'lux/components/EmployerVacancies/fetchGroupsInfo';\nimport translation from 'lux/components/translation';\n\nimport disableAutoPublication from 'lux/components/VacancyModals/AutoPublication/disableAutoPublication';\n\nconst TrlKeys = {\n    disable: 'employer.vacancies.autoPublication.modal.disable.button',\n    cancel: 'employer.vacancies.autoPublication.modal.disable.cancel',\n    modalTitle: 'employer.vacancies.autoPublication.modal.disable.title',\n    modalText: 'employer.vacancies.autoPublication.modal.disable.text',\n};\n\ninterface DisableAutoPublicationModalProps {\n    isVisible: boolean;\n    handleCloseModal: () => void;\n    vacancyName: string;\n    draftId: number;\n}\n\nconst DisableAutoPublicationModal: TranslatedComponent<DisableAutoPublicationModalProps> = ({\n    isVisible,\n    handleCloseModal,\n    draftId,\n    vacancyName,\n    trls,\n}) => {\n    const [isLoading, setLoading] = useState(false);\n    const activeGroupId = useSelectorNonNullable(({ managerVacanciesActiveGroupId }) => managerVacanciesActiveGroupId);\n    const { isMobile } = useBreakpoint();\n    const dispatch = useDispatch();\n\n    const handleAutoPublicationDisable = useCallback(async () => {\n        if (isLoading) {\n            return;\n        }\n        setLoading(true);\n\n        try {\n            await dispatch(disableAutoPublication(draftId));\n\n            if (activeGroupId) {\n                await dispatch(fetchGroupsInfo(activeGroupId));\n            }\n        } finally {\n            setLoading(false);\n            handleCloseModal();\n        }\n    }, [dispatch, draftId, activeGroupId, handleCloseModal, isLoading]);\n\n    const title = trls[TrlKeys.modalTitle];\n\n    const content = (\n        <div data-qa=\"vacancy-auto-publication-disable-info\">\n            {formatToReactComponent(trls[TrlKeys.modalText], {\n                '{name}': vacancyName,\n            })}\n        </div>\n    );\n\n    const controls = (\n        <>\n            <Button mode={ButtonMode.Secondary} style={ButtonStyle.Accent} onClick={handleCloseModal}>\n                {trls[TrlKeys.cancel]}\n            </Button>\n            <Button\n                mode={ButtonMode.Primary}\n                style={ButtonStyle.Accent}\n                onClick={handleAutoPublicationDisable}\n                loading={isLoading}\n                data-qa=\"vacancy-auto-publication-disable-button\"\n            >\n                {trls[TrlKeys.disable]}\n            </Button>\n        </>\n    );\n\n    return (\n        <>\n            <Modal\n                showCloseButton\n                titleSize=\"medium\"\n                visible={isVisible}\n                onClose={handleCloseModal}\n                rightButtons={controls}\n                title={title}\n            >\n                {content}\n            </Modal>\n\n            {isMobile && (\n                <BottomSheet\n                    visible={isVisible}\n                    header={<BottomSheetHeader>{title}</BottomSheetHeader>}\n                    footer={<BottomSheetFooter>{controls}</BottomSheetFooter>}\n                    onClose={handleCloseModal}\n                >\n                    {content}\n                </BottomSheet>\n            )}\n        </>\n    );\n};\n\nexport default translation(DisableAutoPublicationModal);\n","import { memo } from 'react';\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval';\nimport startOfDay from 'date-fns/startOfDay';\nimport PropTypes from 'prop-types';\n\nimport CustomSelect, { CustomSelectOption, CustomSelectLayer } from 'bloko/blocks/customSelect';\nimport Icon, { IconScale, IconColor, IconView } from 'bloko/blocks/icon';\n\nimport formatDate from 'Modules/formatDate';\n\nconst renderPlaceholder = (value) => (\n    <>\n        <span className=\"vacancy-auto-update-selectors__icon\">\n            <Icon view={IconView.Calendar} initial={IconColor.Gray60} scale={IconScale.Small} />\n        </span>\n        <span suppressHydrationWarning>{formatDate(value, 'd\\u00a0MMMM, EEEE')}</span>\n    </>\n);\n\nconst DateSelect = ({ start, end, date, setDate, isDisabled, title }) => (\n    <CustomSelect\n        value={startOfDay(date).getTime()}\n        onChange={(value) => setDate(new Date(value))}\n        layer={CustomSelectLayer.AboveOverlayContent}\n        placeholderTemplate={renderPlaceholder}\n        title={title}\n    >\n        {eachDayOfInterval({ start, end }).map((nextDate) => (\n            <CustomSelectOption key={nextDate.getTime()} value={nextDate.getTime()} disabled={isDisabled(nextDate)}>\n                {formatDate(nextDate, 'd\\u00a0MMMM, EEEE')}\n            </CustomSelectOption>\n        ))}\n    </CustomSelect>\n);\n\nDateSelect.propTypes = {\n    start: PropTypes.object.isRequired,\n    end: PropTypes.object.isRequired,\n    date: PropTypes.object,\n    setDate: PropTypes.func.isRequired,\n    isDisabled: PropTypes.func.isRequired,\n    title: PropTypes.string,\n};\n\nexport default memo(DateSelect);\n","import { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport BlokoLink from 'bloko/blocks/link';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\n\nconst Summary = ({ updatesCount, publicationType, trls }) => (\n    <div className=\"vacancy-auto-update-summary\">\n        {formatToReactComponent(trls[Summary.trls.summary], {\n            '{0}': (\n                <ConversionNumber\n                    value={updatesCount}\n                    one={trls[Summary.trls.publicationsOne]}\n                    some={trls[Summary.trls.publicationsSome]}\n                    many={trls[Summary.trls.publicationsMany]}\n                />\n            ),\n            '{1}': trls[Summary.trls[publicationType]],\n            '{2}': (\n                <BlokoLink disableVisited Element={Link} to=\"/conditions\">\n                    {trls[Summary.trls.conditions]}\n                </BlokoLink>\n            ),\n        })}\n    </div>\n);\n\nSummary.trls = {\n    summary: 'vacancy.autoUpdate.summary',\n    conditions: 'terms.and.conditions.dative',\n\n    publicationsOne: 'vacancy.autoUpdate.summary.publications.one',\n    publicationsSome: 'vacancy.autoUpdate.summary.publications.some',\n    publicationsMany: 'vacancy.autoUpdate.summary.publications.many',\n\n    FREE: 'publicationType.FREE',\n    STANDARD: 'publicationType.STANDARD',\n    STANDARD_PROMO: 'publicationType.STANDARD_PROMO',\n    STANDARD_PLUS: 'publicationType.STANDARD_PLUS',\n    STANDARD_ANONYMOUS: 'publicationType.STANDARD_ANONYMOUS',\n    STANDARD_ADVERTISING: 'publicationType.STANDARD_ADVERTISING',\n    PREMIUM: 'publicationType.PREMIUM',\n    PREMIUM_ANONYMOUS: 'publicationType.PREMIUM_ANONYMOUS',\n    PREMIUM_ADVERTISING: 'publicationType.PREMIUM_ADVERTISING',\n    STANDARD_PLUS_ANONYMOUS: 'publicationType.STANDARD_PLUS_ANONYMOUS',\n};\n\nSummary.propTypes = {\n    updatesCount: PropTypes.number,\n    publicationType: PropTypes.string,\n    trls: PropTypes.object,\n};\n\nexport default memo(translation(Summary));\n","import { memo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CustomSelect, { CustomSelectLayer, CustomSelectOption } from 'bloko/blocks/customSelect';\nimport Icon, { IconKind, IconScale, IconColor, IconView } from 'bloko/blocks/icon';\n\nconst timeIntervals = [...Array(24).keys()];\n\nconst formatHour = (hour) => `${String(hour).padStart(2, '0')}:00`;\nconst formatTime = (hour) => `${formatHour(hour)}—${formatHour(hour + 1)}`;\n\nconst renderPlaceholder = (value) => (\n    <>\n        <span className=\"vacancy-auto-update-selectors__icon\">\n            <Icon view={IconView.Clock} initial={IconColor.Gray60} kind={IconKind.Default} scale={IconScale.Small} />\n        </span>\n        {formatTime(value)}\n    </>\n);\n\nconst TimeSelect = ({ time, setTime, isDisabled, title }) => {\n    useEffect(() => {\n        if (isDisabled(timeIntervals.find((hour) => time === hour))) {\n            setTime(timeIntervals.find((hour) => !isDisabled(hour)));\n        }\n    }, [isDisabled, setTime, time]);\n\n    return (\n        <CustomSelect\n            value={time}\n            onChange={setTime}\n            layer={CustomSelectLayer.AboveOverlayContent}\n            placeholderTemplate={renderPlaceholder}\n            title={title}\n        >\n            {timeIntervals.map((hour) => (\n                <CustomSelectOption key={hour} value={hour} disabled={isDisabled(hour)}>\n                    {formatTime(hour)}\n                </CustomSelectOption>\n            ))}\n        </CustomSelect>\n    );\n};\n\nTimeSelect.propTypes = {\n    time: PropTypes.number,\n    setTime: PropTypes.func.isRequired,\n    isDisabled: PropTypes.func.isRequired,\n    title: PropTypes.string,\n};\n\nexport default memo(TimeSelect);\n","import { useMemo, useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport BlokoLink, { LinkAppearance } from 'bloko/blocks/link';\nimport Text from 'bloko/blocks/text';\n\nimport translation from 'lux/components/translation';\nimport useToggleState from 'lux/hooks/useToggleState';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst VACANCIES_TO_DISPLAY_STEP = 10;\n\nconst VacanciesWithLocation = ({ ids, title, trls, covered = false }) => {\n    const [isCovered, toggleCovered, setCovered] = useToggleState(covered);\n    const [shownVacanciesCount, setShownVacanciesCount] = useState(VACANCIES_TO_DISPLAY_STEP);\n    const managerVacancies = useSelector((state) => state.managerVacancies);\n    const allVacancies = managerVacancies.vacancies?.list || [];\n    const vacanciesWithRegions = useMemo(\n        () => allVacancies.filter(({ vacancyId }) => ids.includes(vacancyId)),\n        [allVacancies, ids]\n    );\n\n    const vacanciesToDisplay = vacanciesWithRegions.slice(0, shownVacanciesCount);\n    const leftToDisplay = ids.length - shownVacanciesCount;\n\n    const handleShowMore = useCallback(\n        () => setShownVacanciesCount(shownVacanciesCount + VACANCIES_TO_DISPLAY_STEP),\n        [shownVacanciesCount]\n    );\n\n    useEffect(() => {\n        setCovered(covered);\n        setShownVacanciesCount(VACANCIES_TO_DISPLAY_STEP);\n    }, [setCovered, covered, ids]);\n\n    const conversionTitle = (\n        <>\n            {title}\n            {NON_BREAKING_SPACE}\n            <ConversionNumber\n                value={ids.length}\n                one={trls[VacanciesWithLocation.trls.vacancySome]}\n                some={trls[VacanciesWithLocation.trls.vacancyMany]}\n                many={trls[VacanciesWithLocation.trls.vacancyMany]}\n            />\n        </>\n    );\n\n    if (isCovered) {\n        return (\n            <BlokoLink appearance={LinkAppearance.Pseudo} onClick={toggleCovered}>\n                {conversionTitle}\n            </BlokoLink>\n        );\n    }\n\n    return (\n        <div className=\"vacancy-auto-update-summary\">\n            <div className=\"auto-update-inner-title-padded\">\n                <Text Element=\"span\" strong>\n                    {conversionTitle}\n                </Text>\n            </div>\n            {vacanciesToDisplay.map(({ area, name, vacancyId }, idx) => (\n                <Link key={vacancyId} target=\"_blank\" to={`/vacancy/${vacancyId}`}>\n                    {name}\n                    {NON_BREAKING_SPACE}– {area.name}\n                    {idx < vacanciesToDisplay.length - 1 && ', '}\n                </Link>\n            ))}\n            {ids.length > shownVacanciesCount && (\n                <span className=\"vacancy-auto-update-addition\">\n                    <BlokoLink appearance={LinkAppearance.Pseudo} onClick={handleShowMore}>\n                        {trls[VacanciesWithLocation.trls.more]}\n                        {NON_BREAKING_SPACE}\n                        {leftToDisplay > VACANCIES_TO_DISPLAY_STEP ? VACANCIES_TO_DISPLAY_STEP : leftToDisplay}\n                    </BlokoLink>\n                </span>\n            )}\n        </div>\n    );\n};\n\nVacanciesWithLocation.trls = {\n    vacancyOne: 'vacancy.one',\n    vacancySome: 'vacancy.some',\n    vacancyMany: 'vacancy.many',\n    more: 'vacancy.autoUpdate.group.more',\n};\n\nVacanciesWithLocation.propTypes = {\n    covered: PropTypes.bool,\n    title: PropTypes.node,\n    trls: PropTypes.object,\n    ids: PropTypes.arrayOf(PropTypes.number),\n};\n\nexport default translation(VacanciesWithLocation);\n","import { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Information from 'bloko/blocks/information';\nimport format from 'bloko/common/format';\n\nimport translation from 'lux/components/translation';\n\nconst Warnings = ({ publicationType, prolongationFailureReason, trls }) =>\n    prolongationFailureReason !== null &&\n    prolongationFailureReason !== 'OTHER' && (\n        <Information>\n            {format(trls[Warnings.trls[prolongationFailureReason]], {\n                '{0}': trls[Warnings.trls[publicationType]],\n            })}\n        </Information>\n    );\n\nWarnings.trls = {\n    NOT_ENOUGH_PERMISSIONS: 'vacancy.autoUpdate.warning.NOT_ENOUGH_PERMISSIONS',\n    NOT_ENOUGH_PUBLICATIONS: 'vacancy.autoUpdate.warning.NOT_ENOUGH_PUBLICATIONS',\n    NOT_ENOUGH_QUOTAS: 'vacancy.autoUpdate.warning.NOT_ENOUGH_QUOTAS',\n\n    FREE: 'publicationType.FREE',\n    STANDARD: 'publicationType.STANDARD',\n    STANDARD_PROMO: 'publicationType.STANDARD_PROMO',\n    STANDARD_PLUS: 'publicationType.STANDARD_PLUS',\n    STANDARD_ANONYMOUS: 'publicationType.STANDARD_ANONYMOUS',\n    STANDARD_ADVERTISING: 'publicationType.STANDARD_ADVERTISING',\n    PREMIUM: 'publicationType.PREMIUM',\n    PREMIUM_ANONYMOUS: 'publicationType.PREMIUM_ANONYMOUS',\n    PREMIUM_ADVERTISING: 'publicationType.PREMIUM_ADVERTISING',\n    STANDARD_PLUS_ANONYMOUS: 'publicationType.STANDARD_PLUS_ANONYMOUS',\n};\n\nWarnings.propTypes = {\n    publicationType: PropTypes.string,\n    prolongationFailureReason: PropTypes.string,\n    trls: PropTypes.object,\n};\n\nexport default memo(translation(Warnings));\n","import { useCallback, useMemo, useState, useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport formatISO from 'date-fns/formatISO';\nimport isSameDay from 'date-fns/isSameDay';\nimport set from 'date-fns/set';\nimport PropTypes from 'prop-types';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport { FormSpacer, FormItem } from 'bloko/blocks/form';\nimport Gap from 'bloko/blocks/gap';\nimport BlokoLink from 'bloko/blocks/link';\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\nimport Modal, { ModalHeader, ModalTitle, ModalFooter } from 'bloko/blocks/modal';\nimport Radio from 'bloko/blocks/radio';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { format, formatToReactComponent } from 'bloko/common/trl';\n\nimport { ADD_MODAL, MODAL_AUTO_UPDATE_SUMMARY } from 'lux/components/VacancyModals/constants';\nimport translation from 'lux/components/translation';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport DateSelect from 'lux/components/VacancyModals/AutoUpdateModal/DateSelect';\nimport { RenewalObjectType } from 'lux/components/VacancyModals/AutoUpdateModal/RenewalObjectType';\nimport Summary from 'lux/components/VacancyModals/AutoUpdateModal/Summary';\nimport TimeSelect from 'lux/components/VacancyModals/AutoUpdateModal/TimeSelect';\nimport VacanciesWithLocation from 'lux/components/VacancyModals/AutoUpdateModal/VacanciesWithLocation';\nimport Warnings from 'lux/components/VacancyModals/AutoUpdateModal/Warnings';\nimport { addUpdateSchedule } from 'lux/components/VacancyModals/AutoUpdateModal/autoUpdateSchedule';\n\nconst APPLICANT_ACTIVITY_REPORT_URL =\n    'https://public.tableau.com/profile/alkadarskiy.selim#!/vizhome/232020_15863625148330/232020';\n\nconst getAutoUpdateCount = (scheduleTypes, startDate, endDate, amount) =>\n    fetcher.get('/shards/employer/vacancies/auto_update/count', {\n        params: {\n            amount,\n            scheduleType: scheduleTypes,\n            start: formatISO(startDate),\n            end: formatISO(endDate),\n        },\n    });\n\nconst AutoUpdateModal = ({\n    vacancyId,\n    groupId,\n    autoRenewal,\n    renewalSteps = [],\n    handleCloseModal,\n    dispatchModal,\n    failedToUpdate,\n    isEdit,\n    isVisible,\n    trls,\n    afterSuccessAction,\n}) => {\n    const updatedIds = useRef([]);\n    const modalRef = useRef();\n    const dispatch = useDispatch();\n    const [currentStep, setCurrentStep] = useState(0);\n    const isGroup = renewalSteps[currentStep];\n    const {\n        ids,\n        scheduleTypesWithUpdatesCount,\n        publicationType,\n        closestPossibleProlongation,\n        maxLastUpdateDateTime,\n        prolongationFailureReason = null,\n    } = renewalSteps[currentStep] || autoRenewal;\n    const scheduleTypes = useMemo(() => Object.keys(scheduleTypesWithUpdatesCount), [scheduleTypesWithUpdatesCount]);\n    const firstPossibleDate = useMemo(() => new Date(closestPossibleProlongation), [closestPossibleProlongation]);\n    const lastPossibleDate = useMemo(() => new Date(maxLastUpdateDateTime), [maxLastUpdateDateTime]);\n    const timezoneOffsetHours = useMemo(() => -new Date().getTimezoneOffset() / 60, []);\n    const employerId = useSelector((state) => state.employerId);\n\n    const [startDate, setStartDate] = useState(firstPossibleDate);\n    const [endDate, setEndDate] = useState(lastPossibleDate);\n\n    const [scheduleType, setScheduleType] = useState(scheduleTypes[0]);\n    const handleChangeScheduleType = useCallback(({ target: { value } }) => setScheduleType(value), []);\n\n    const [time, setTime] = useState(firstPossibleDate.getHours() + 1);\n    const isTimeDisabled = useCallback(\n        (hour) => isSameDay(firstPossibleDate, startDate) && hour <= firstPossibleDate.getHours(),\n        [firstPossibleDate, startDate]\n    );\n    const handleCloseWithAnalytics = useCallback(() => {\n        if (isGroup) {\n            Analytics.sendHHEventButtonClick('cancel_auto_update_step', {\n                labelGroupId: groupId,\n                labelCurrentStep: currentStep + 1,\n            });\n        }\n\n        handleCloseModal();\n    }, [currentStep, groupId, handleCloseModal, isGroup]);\n\n    useEffect(() => {\n        setStartDate(firstPossibleDate);\n        setEndDate(lastPossibleDate);\n        setTime(firstPossibleDate.getHours() + 1);\n    }, [firstPossibleDate, lastPossibleDate]);\n\n    const [loading, setLoading] = useState(false);\n    const handleSubmit = useCallback(async () => {\n        const start = formatISO(set(startDate, { hours: time, minutes: 0, seconds: 0, milliseconds: 0 }));\n        const end = formatISO(set(endDate, { hours: time, minutes: 0, seconds: 0, milliseconds: 0 }));\n\n        Analytics.sendHHEventButtonClick('modal_auto_update_button', {\n            vacanciesIds: ids,\n            scheduleType,\n            startDate: start,\n            endDate: end,\n            isMultiSelection: !!isGroup,\n            isEdit,\n        });\n\n        setLoading(true);\n        try {\n            await dispatch(\n                addUpdateSchedule(\n                    { vacancyId: renewalSteps[currentStep]?.ids || vacancyId, scheduleType, start, end },\n                    isEdit,\n                    isGroup\n                )\n            );\n        } catch (error) {\n            console.error(error);\n            return;\n        } finally {\n            setLoading(false);\n        }\n\n        if (isGroup) {\n            Analytics.sendHHEventButtonClick('submit_auto_update_step', {\n                labelGroupId: groupId,\n                labelSubmittedIds: ids.join(),\n                labelCurrentStep: currentStep + 1,\n            });\n            updatedIds.current.push(...ids);\n        }\n\n        Analytics.sendHHEvent('submit_auto_update', {\n            vacancyId: ids.join(),\n            labelGroupId: groupId,\n            employerId,\n            timezoneOffsetHours,\n            isMultiSelection: !!isGroup,\n        });\n\n        if (currentStep < renewalSteps.length - 1) {\n            const nextStep = currentStep + 1;\n            setScheduleType(Object.keys(renewalSteps[nextStep].scheduleTypesWithUpdatesCount)[0]);\n            setCurrentStep(nextStep);\n\n            return;\n        }\n\n        if (isGroup) {\n            dispatchModal({\n                type: ADD_MODAL,\n                payload: {\n                    modalType: MODAL_AUTO_UPDATE_SUMMARY,\n                    data: {\n                        failedToUpdate,\n                        updatedIds: updatedIds.current,\n                        afterSuccessAction,\n                    },\n                },\n            });\n\n            return;\n        }\n\n        if (afterSuccessAction) {\n            afterSuccessAction();\n\n            return;\n        }\n\n        handleCloseModal();\n    }, [\n        startDate,\n        time,\n        endDate,\n        ids,\n        scheduleType,\n        isGroup,\n        isEdit,\n        groupId,\n        employerId,\n        timezoneOffsetHours,\n        currentStep,\n        renewalSteps,\n        afterSuccessAction,\n        handleCloseModal,\n        dispatch,\n        vacancyId,\n        dispatchModal,\n        failedToUpdate,\n    ]);\n\n    const sendReportClickAnalytics = () => {\n        Analytics.sendHHEventButtonClick('applicant_activity_report_link', {\n            timezoneOffsetHours,\n        });\n    };\n\n    const [updateCountByScheduleType, setUpdateCountByScheduleType] = useState(scheduleTypesWithUpdatesCount);\n    useEffect(() => {\n        getAutoUpdateCount(scheduleTypes, startDate, endDate, ids.length)\n            .then(({ updateCountByScheduleType }) => {\n                setUpdateCountByScheduleType(updateCountByScheduleType);\n            })\n            .catch(console.error);\n    }, [vacancyId, scheduleTypes, startDate, endDate, ids.length]);\n\n    const [updatesCount, setUpdatesCount] = useState(0);\n    useEffect(() => {\n        const publicationsCount = updateCountByScheduleType[scheduleType];\n\n        if (publicationsCount) {\n            setUpdatesCount(publicationsCount.count);\n        }\n    }, [updateCountByScheduleType, scheduleType]);\n\n    useEffect(() => {\n        if (isVisible) {\n            if (isGroup) {\n                Analytics.sendHHEventElementShown(modalRef.current, {\n                    name: 'group_auto_update',\n                    labelGroupId: groupId,\n                    labelVacanciesToUpdate: renewalSteps.map(({ ids }) => ids).join(),\n                    labelFailedToUpdate: failedToUpdate.join(),\n                    labelStepsCount: renewalSteps.length,\n                });\n\n                return;\n            }\n\n            Analytics.sendHHEventElementShown(modalRef.current, {\n                name: 'auto_update',\n                vacancyId,\n                employerId,\n            });\n        }\n    }, [isGroup, employerId, vacancyId, groupId, renewalSteps, failedToUpdate, isVisible]);\n\n    return (\n        <Modal visible={isVisible} onClose={handleCloseWithAnalytics}>\n            <ModalHeader>\n                <ModalTitle>\n                    {isEdit ? trls[AutoUpdateModal.trls.titleEdit] : trls[AutoUpdateModal.trls.titlePlan]}\n                </ModalTitle>\n                <div className=\"vacancy-auto-update-title-addition\">\n                    <Text importance={TextImportance.Tertiary}>{trls[AutoUpdateModal.trls.timezone]}</Text>\n                    {renewalSteps.length > 0 && (\n                        <>\n                            <VSpacing base={2} />\n                            <Text importance={TextImportance.Tertiary}>\n                                {format(trls[AutoUpdateModal.trls.step], {\n                                    '{0}': currentStep + 1,\n                                    '{1}': renewalSteps.length,\n                                })}\n                            </Text>\n                        </>\n                    )}\n                </div>\n            </ModalHeader>\n            <div className=\"vacancy-auto-update-popup\" ref={modalRef}>\n                <div className=\"vacancy-auto-update-section\">\n                    <div className=\"vacancy-auto-update-interval\">\n                        {renewalSteps[currentStep] && (\n                            <Gap bottom>\n                                <VacanciesWithLocation\n                                    covered\n                                    ids={ids}\n                                    title={trls[AutoUpdateModal.trls.vacanciesGroup]}\n                                />\n                            </Gap>\n                        )}\n                        <Text strong>{trls[AutoUpdateModal.trls.firstDate]}</Text>\n                        <div className=\"vacancy-auto-update-selectors\">\n                            <div\n                                className=\"vacancy-auto-update-selectors__date\"\n                                data-qa=\"vacancy-auto-update-date-interval-start\"\n                            >\n                                <DateSelect\n                                    start={firstPossibleDate}\n                                    end={lastPossibleDate}\n                                    date={startDate}\n                                    setDate={setStartDate}\n                                    isDisabled={(date) => date >= endDate}\n                                    title={trls[AutoUpdateModal.trls.firstDate]}\n                                />\n                            </div>\n                            <div\n                                className=\"vacancy-auto-update-selectors__time\"\n                                data-qa=\"vacancy-auto-update-time-interval-start\"\n                            >\n                                <TimeSelect\n                                    time={time}\n                                    setTime={setTime}\n                                    isDisabled={isTimeDisabled}\n                                    title={trls[AutoUpdateModal.trls.firstTime]}\n                                />\n                            </div>\n                        </div>\n                        <Text importance={TextImportance.Tertiary}>{trls[AutoUpdateModal.trls.popularTime]}</Text>\n                        <VSpacing base={2} />\n                        <Text importance={TextImportance.Tertiary}>\n                            {formatToReactComponent(trls[AutoUpdateModal.trls.applicantActivityHint], {\n                                '{0}': (\n                                    <BlokoLink\n                                        disableVisited\n                                        Element={Link}\n                                        to={APPLICANT_ACTIVITY_REPORT_URL}\n                                        target=\"_blank\"\n                                        onClick={sendReportClickAnalytics}\n                                    >\n                                        {trls[AutoUpdateModal.trls.applicantActivityLink]}\n                                    </BlokoLink>\n                                ),\n                            })}\n                        </Text>\n                    </div>\n                    <div className=\"vacancy-auto-update-interval\">\n                        <Text strong>{trls[AutoUpdateModal.trls.lastDate]}</Text>\n                        <div className=\"vacancy-auto-update-selectors\">\n                            <div\n                                className=\"vacancy-auto-update-selectors__date\"\n                                data-qa=\"vacancy-auto-update-date-interval-end\"\n                            >\n                                <DateSelect\n                                    start={firstPossibleDate}\n                                    end={lastPossibleDate}\n                                    date={endDate}\n                                    setDate={setEndDate}\n                                    isDisabled={(date) => date <= startDate}\n                                    title={trls[AutoUpdateModal.trls.lastDate]}\n                                />\n                            </div>\n                        </div>\n                        <Text importance={TextImportance.Tertiary}>{trls[AutoUpdateModal.trls.sameTime]}</Text>\n                    </div>\n                </div>\n                <Text strong>{trls[AutoUpdateModal.trls.scheduleType]}</Text>\n                <div className=\"vacancy-auto-update-frequency\">\n                    {scheduleTypes.length > 1 ? (\n                        scheduleTypes.map((option) => (\n                            <FormItem baseline={true} key={option} data-qa={`vacancy-auto-update-option-${option}`}>\n                                <Radio\n                                    name=\"scheduleType\"\n                                    checked={scheduleType === option}\n                                    value={option}\n                                    onChange={handleChangeScheduleType}\n                                >\n                                    {trls[AutoUpdateModal.trls[option]]}\n                                </Radio>\n                            </FormItem>\n                        ))\n                    ) : (\n                        <FormItem text={true} data-qa={`vacancy-auto-update-option-${scheduleType}`}>\n                            {trls[AutoUpdateModal.trls[scheduleType]]}\n                        </FormItem>\n                    )}\n                </div>\n            </div>\n            <div className=\"vacancy-auto-update-footer\">\n                <Summary updatesCount={updatesCount} publicationType={publicationType} />\n                <div className=\"vacancy-auto-update-spacer\" />\n                <Warnings\n                    publicationType={publicationType}\n                    prolongationFailureReason={prolongationFailureReason}\n                    afterSuccessAction={afterSuccessAction}\n                />\n            </div>\n            <ModalFooter>\n                <Button onClick={handleCloseWithAnalytics} data-qa=\"vacancy-auto-update-cancel\">\n                    {trls[AutoUpdateModal.trls.cancel]}\n                </Button>\n                <FormSpacer>\n                    <Button\n                        data-qa=\"vacancy-auto-update-submit\"\n                        disabled={loading}\n                        onClick={handleSubmit}\n                        loading={loading && <Loading scale={LoadingScale.Small} />}\n                        kind={ButtonKind.Primary}\n                    >\n                        {trls[AutoUpdateModal.trls.submit]}\n                    </Button>\n                </FormSpacer>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nAutoUpdateModal.propTypes = {\n    isEdit: PropTypes.bool,\n    isVisible: PropTypes.bool,\n    groupId: PropTypes.string,\n    handleCloseModal: PropTypes.func,\n    dispatchModal: PropTypes.func,\n    failedToUpdate: PropTypes.arrayOf(PropTypes.number),\n    firstDate: PropTypes.number,\n    vacancyId: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n    autoRenewal: RenewalObjectType,\n    renewalSteps: PropTypes.arrayOf(RenewalObjectType),\n    trls: PropTypes.object,\n    afterSuccessAction: PropTypes.func,\n};\n\nAutoUpdateModal.trls = {\n    firstDate: 'vacancy.autoUpdate.firstDate',\n    firstTime: 'vacancy.autoUpdate.firstTime',\n    lastDate: 'vacancy.autoUpdate.lastDate',\n    popularTime: 'vacancy.autoUpdate.popularTime',\n    sameTime: 'vacancy.autoUpdate.sameTime',\n    scheduleType: 'vacancy.autoUpdate.frequency',\n    applicantActivityHint: 'vacancy.autoUpdate.applicantActivity.hint',\n    applicantActivityLink: 'vacancy.autoUpdate.applicantActivity.link',\n\n    EVERY_DAY: 'vacancy.autoUpdate.everyDay',\n    EVERY_WORKING_DAY: 'vacancy.autoUpdate.everyWorkDay',\n    EVERY_WEEK: 'vacancy.autoUpdate.oncePerWeek',\n    EVERY_TWO_WEEKS: 'vacancy.autoUpdate.oncePerTwoWeeks',\n    EVERY_SIXTH_DAY: 'vacancy.autoUpdate.sixthDay',\n    EVERY_FOURTH_DAY: 'vacancy.autoUpdate.fourthDay',\n\n    titlePlan: 'vacancy.autoUpdate.title',\n    titleEdit: 'vacancy.autoUpdate.title.edit',\n    timezone: 'vacancy.autoUpdate.timezone',\n    step: 'vacancy.autoUpdate.step',\n    cancel: 'employer.myVacancyes.move.cancel',\n    submit: 'vacancy.autoUpdate.schedule',\n\n    vacanciesGroup: 'vacancy.autoUpdate.group.for',\n};\n\nexport default translation(AutoUpdateModal);\n","import {\n    AUTO_UPDATES_REMOVED,\n    AUTO_UPDATES_SCHEDULED,\n    EDIT_AUTO_UPDATE_SCHEDULE,\n} from 'lux/components/Notifications/EmployerVacancies';\nimport { updateManagerVacancies, upgradeManagerVacancy } from 'lux/models/employerVacancies/managerVacancies';\nimport fetcher from 'lux/modules/fetcher';\nimport addNotification from 'lux/requests/notifications/addNotification';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nexport const addUpdateSchedule =\n    (params, isEdit, isGroup = false) =>\n    async (dispatch) => {\n        try {\n            await fetcher.post('/shards/employer/vacancies/auto_update/schedule', null, { params });\n        } catch (err) {\n            dispatch(showDefaultError(err));\n        }\n\n        let vacancies;\n\n        try {\n            vacancies = await fetcher.get('/shards/employer/vacancies/get_full_vacancy', {\n                params: {\n                    vacancyId: params.vacancyId,\n                    isMultiple: true,\n                },\n            });\n        } catch (err) {\n            dispatch(showDefaultError(err));\n            return;\n        }\n\n        dispatch(updateManagerVacancies(vacancies));\n\n        if (isGroup) {\n            return;\n        }\n\n        dispatch(addNotification(isEdit ? EDIT_AUTO_UPDATE_SCHEDULE : AUTO_UPDATES_SCHEDULED));\n    };\n\nexport const removeSchedule = (params, vacancyName) => async (dispatch) => {\n    let vacancy;\n\n    try {\n        await fetcher.delete('/shards/employer/vacancies/auto_update/schedule', { params });\n        vacancy = (await fetcher.get('/shards/employer/vacancies/get_full_vacancy', { params })).vacancy;\n    } catch (err) {\n        dispatch(showDefaultError(err));\n\n        return;\n    }\n\n    dispatch(upgradeManagerVacancy({ vacancy }));\n    dispatch(addNotification(AUTO_UPDATES_REMOVED, { vacancyId: params.vacancyId, vacancyName }));\n};\n","import { useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from 'bloko/blocks/button';\nimport Column from 'bloko/blocks/column';\nimport Gap from 'bloko/blocks/gap';\nimport Modal, { ModalHeader, ModalTitle, ModalFooter, ModalContent } from 'bloko/blocks/modal';\nimport Text, { TextImportance } from 'bloko/blocks/text';\n\nimport { UNCHECK_ALL } from 'lux/components/EmployerVacancies/checkReducer';\nimport translation from 'lux/components/translation';\n\nimport VacanciesWithLocation from 'lux/components/VacancyModals/AutoUpdateModal/VacanciesWithLocation';\n\nconst GroupAutoUpdateSummary = ({\n    updatedIds = [],\n    failedIds = [],\n    handleCloseModal,\n    dispatchCheckVacancy,\n    isVisible,\n    trls,\n    afterSuccessAction,\n}) => {\n    const hasFailedVacancies = failedIds.length > 0;\n\n    const handleCloseUnchecked = useCallback(() => {\n        dispatchCheckVacancy({ type: UNCHECK_ALL });\n\n        if (afterSuccessAction && !hasFailedVacancies) {\n            afterSuccessAction();\n\n            return;\n        }\n\n        handleCloseModal();\n    }, [dispatchCheckVacancy, handleCloseModal, afterSuccessAction, hasFailedVacancies]);\n\n    const renderUpdatedVacancies = () => {\n        if (!updatedIds.length) {\n            return null;\n        }\n\n        const updatedVacancies = (\n            <VacanciesWithLocation ids={updatedIds} title={trls[GroupAutoUpdateSummary.trls.succeeded]} />\n        );\n\n        if (hasFailedVacancies) {\n            return <Gap bottom>{updatedVacancies}</Gap>;\n        }\n\n        return updatedVacancies;\n    };\n\n    return (\n        <Modal visible={isVisible} onClose={handleCloseUnchecked}>\n            <ModalHeader outlined>\n                <ModalTitle>{trls[GroupAutoUpdateSummary.trls.title]}</ModalTitle>\n            </ModalHeader>\n            <ModalContent>\n                <Column xs=\"4\" s=\"7\" m=\"8\" l=\"8\" container>\n                    {renderUpdatedVacancies()}\n                    {hasFailedVacancies && (\n                        <>\n                            <VacanciesWithLocation ids={failedIds} title={trls[GroupAutoUpdateSummary.trls.failed]} />\n                            <div className=\"vacancy-auto-update-sub-info\">\n                                <Text importance={TextImportance.Tertiary}>\n                                    {trls[GroupAutoUpdateSummary.trls.failedReason]}\n                                </Text>\n                            </div>\n                        </>\n                    )}\n                </Column>\n            </ModalContent>\n            <ModalFooter>\n                <Button onClick={handleCloseUnchecked} data-qa=\"group_auto_update_summary_close\">\n                    {trls[GroupAutoUpdateSummary.trls.close]}\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nGroupAutoUpdateSummary.propTypes = {\n    isVisible: PropTypes.bool,\n    handleCloseModal: PropTypes.func,\n    dispatchCheckVacancy: PropTypes.func,\n    updatedIds: PropTypes.arrayOf(PropTypes.number),\n    failedIds: PropTypes.arrayOf(PropTypes.number),\n    trls: PropTypes.object,\n    afterSuccessAction: PropTypes.func,\n};\n\nGroupAutoUpdateSummary.trls = {\n    succeeded: 'vacancy.autoUpdate.group.planned',\n    failed: 'vacancy.autoUpdate.group.failed',\n    failedReason: 'vacancy.autoUpdate.group.failedReason',\n    title: 'vacancy.autoUpdate.title',\n    close: 'close',\n};\n\nexport default translation(GroupAutoUpdateSummary);\n","import { Fragment, memo, useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport { FormSpacer } from 'bloko/blocks/form';\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\nimport Modal, { ModalHeader, ModalTitle, ModalContent, ModalFooter } from 'bloko/blocks/modal';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport HumanDate from 'lux/components/HumanDate';\nimport translation from 'lux/components/translation';\n\nimport { removeSchedule } from 'lux/components/VacancyModals/AutoUpdateModal/autoUpdateSchedule';\n\nconst RemoveAutoUpdateModal = ({ handleCloseModal, expireTime, vacancyId, isVisible, vacancyName, trls }) => {\n    const dispatch = useDispatch();\n    const [loading, setLoading] = useState(false);\n    const handleSubmit = useCallback(() => {\n        setLoading(true);\n        dispatch(removeSchedule({ vacancyId }, vacancyName)).then(handleCloseModal, () => setLoading(false));\n    }, [dispatch, handleCloseModal, vacancyId, vacancyName]);\n    return (\n        <Modal visible={isVisible} onClose={handleCloseModal}>\n            <Fragment>\n                <ModalHeader>\n                    <ModalTitle>{trls[RemoveAutoUpdateModal.trls.title]}</ModalTitle>\n                </ModalHeader>\n                <ModalContent>\n                    {formatToReactComponent(trls[RemoveAutoUpdateModal.trls.description], {\n                        '{0}': <HumanDate date={expireTime} textify />,\n                    })}\n                </ModalContent>\n                <ModalFooter>\n                    <Button onClick={handleCloseModal} data-qa=\"vacancy-auto-update-remove-close\">\n                        {trls[RemoveAutoUpdateModal.trls.cancel]}\n                    </Button>\n                    <FormSpacer>\n                        <Button\n                            onClick={handleSubmit}\n                            kind={ButtonKind.Primary}\n                            loading={loading && <Loading scale={LoadingScale.Small} />}\n                            data-qa=\"vacancy-auto-update-remove-submit\"\n                        >\n                            {trls[RemoveAutoUpdateModal.trls.submit]}\n                        </Button>\n                    </FormSpacer>\n                </ModalFooter>\n            </Fragment>\n        </Modal>\n    );\n};\n\nRemoveAutoUpdateModal.propTypes = {\n    isVisible: PropTypes.bool,\n    vacancyName: PropTypes.string,\n    vacancyId: PropTypes.number,\n    expireTime: PropTypes.number,\n    handleCloseModal: PropTypes.func,\n    trls: PropTypes.object,\n};\n\nRemoveAutoUpdateModal.trls = {\n    title: 'vacancy.autoUpdate.remove.title',\n    submit: 'vacancy.autoUpdate.remove.submit',\n    cancel: 'vacancy.autoUpdate.remove.cancel',\n    description: 'vacancy.autoUpdate.remove.description',\n};\n\nexport default memo(translation(RemoveAutoUpdateModal));\n","import { useCallback, useMemo, memo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport { FormSpacer } from 'bloko/blocks/form';\nimport Information from 'bloko/blocks/information';\nimport BlokoLink, { LinkAppearance } from 'bloko/blocks/link';\nimport Modal, { ModalHeader, ModalTitle, ModalFooter, ModalContent } from 'bloko/blocks/modal';\nimport Text from 'bloko/blocks/text';\nimport { format } from 'bloko/common/trl';\n\nimport formatDate from 'Modules/formatDate';\nimport { useAutoRenewalModal } from 'lux/components/VacancyActions/AutoUpdateAction';\nimport { ADD_MODAL, MODAL_REMOVE_AUTO_UPDATE } from 'lux/components/VacancyModals/constants';\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nconst ERRORS_TO_SHOW = ['NOT_ENOUGH_QUOTAS', 'NOT_ENOUGH_PUBLICATIONS', 'NOT_ENOUGH_PERMISSIONS'];\nconst formatDateSchedule = (date) => formatDate(date, 'dd.MM.y');\n\nconst UpdatesSchedule = ({\n    schedule: {\n        previousSequentialFailuresCount,\n        scheduledUpdateTimes,\n        plannedExpireTime,\n        nextUpdateWithFailure,\n        failureReason,\n        nextFailureIsTheLast,\n        scheduleParams,\n    },\n    isVisible,\n    handleCloseModal,\n    vacancyName,\n    autoProlongationCanBeCanceled,\n    expireTime,\n    dispatchModal,\n    vacancyId,\n    trls,\n}) => {\n    const shouldShowError = ERRORS_TO_SHOW.includes(failureReason);\n    const handleRemoveSchedule = useCallback(\n        (e) => {\n            e.preventDefault();\n            dispatchModal({\n                type: ADD_MODAL,\n                payload: {\n                    modalType: MODAL_REMOVE_AUTO_UPDATE,\n                    data: { expireTime, vacancyId, vacancyName },\n                },\n            });\n        },\n        [dispatchModal, expireTime, vacancyId, vacancyName]\n    );\n    const [isLoading, setLoading] = useState(false);\n    const handleOpenEdit = useAutoRenewalModal(\n        vacancyId,\n        vacancyName,\n        autoProlongationCanBeCanceled,\n        dispatchModal,\n        true,\n        isLoading,\n        setLoading\n    );\n    const formatWithValue = useCallback(\n        (trl) => format(trl, { '{0}': previousSequentialFailuresCount }),\n        [previousSequentialFailuresCount]\n    );\n    const renderPlannedSchedule = (nextUpdate, index) => {\n        if (index === 0 && shouldShowError && nextUpdateWithFailure) {\n            return (\n                <div key={nextUpdate} className=\"auto-update-schedule auto-update-schedule_failed\">\n                    <div className=\"auto-update-schedule__date\" suppressHydrationWarning>\n                        {formatDateSchedule(nextUpdate)}\n                    </div>\n                    <div>\n                        {trls[UpdatesSchedule.trls.mayCanceled]}\n                        {NON_BREAKING_SPACE}— {trls[UpdatesSchedule.trls.failureReasons.short[failureReason]]}\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div key={nextUpdate} className=\"auto-update-schedule\">\n                <div className=\"auto-update-schedule__date\">{formatDateSchedule(nextUpdate)}</div>\n                <div>{trls[UpdatesSchedule.trls.planed]}</div>\n            </div>\n        );\n    };\n    const renderErrorBlock = () => {\n        if (nextFailureIsTheLast) {\n            return (\n                <div className=\"vacancy-auto-update-failure\">\n                    <Information>\n                        <Text Element=\"span\" strong>\n                            <ConversionNumber\n                                hasValue={false}\n                                format={formatWithValue}\n                                value={previousSequentialFailuresCount}\n                                one={trls[UpdatesSchedule.trls.failureMany]}\n                                some={trls[UpdatesSchedule.trls.failureSome]}\n                                many={trls[UpdatesSchedule.trls.failureMany]}\n                            />\n                        </Text>{' '}\n                        {trls[UpdatesSchedule.trls.lastFailure]}\n                    </Information>\n                </div>\n            );\n        }\n\n        if (shouldShowError) {\n            return (\n                <div className=\"vacancy-auto-update-failure\">\n                    <Information>\n                        {trls[UpdatesSchedule.trls.beforeFailure]}{' '}\n                        <Text Element=\"span\" strong>\n                            {trls[UpdatesSchedule.trls.failureReasons.full[failureReason]]}\n                        </Text>\n                    </Information>\n                </div>\n            );\n        }\n\n        return null;\n    };\n    const scheduledInfo = useMemo(() => {\n        const startDate = new Date(scheduleParams.start);\n        const endDate = new Date(scheduleParams.end);\n        const updateHours = startDate.getHours();\n        const onSameMonth = startDate.getMonth() === endDate.getMonth();\n\n        return format(trls[UpdatesSchedule.trls.scheduled], {\n            '{0}': trls[UpdatesSchedule.trls[scheduleParams.type]].toLowerCase(),\n            '{1}': `${updateHours}:00—${updateHours + 1}:00`,\n            '{2}': `${startDate.getDate()}${\n                onSameMonth ? '' : NON_BREAKING_SPACE + trls[UpdatesSchedule.trls[`month${startDate.getMonth()}`]]\n            }`,\n            '{3}': `${endDate.getDate()}${NON_BREAKING_SPACE}${\n                trls[UpdatesSchedule.trls[`month${endDate.getMonth()}`]]\n            }`,\n        });\n    }, [scheduleParams.end, scheduleParams.start, scheduleParams.type, trls]);\n\n    return (\n        <Modal visible={isVisible} onClose={handleCloseModal}>\n            <ModalHeader>\n                <ModalTitle>{format(trls[UpdatesSchedule.trls.title], { '{0}': vacancyName })}</ModalTitle>\n                <div className=\"auto-update-inner-schedule-type\">\n                    {scheduledInfo}{' '}\n                    <BlokoLink\n                        appearance={LinkAppearance.Pseudo}\n                        onClick={() => {\n                            handleCloseModal();\n                            handleOpenEdit();\n                        }}\n                        data-qa=\"vacancy-auto-update-edit\"\n                    >\n                        {trls[UpdatesSchedule.trls.edit]}\n                    </BlokoLink>\n                </div>\n            </ModalHeader>\n            <ModalContent>\n                <Text strong>{trls[UpdatesSchedule.trls.futureUpdates]}</Text>\n                <div className=\"auto-update-schedule-container\">\n                    {scheduledUpdateTimes.map(renderPlannedSchedule)}\n                    <div className=\"auto-update-schedule auto-update-schedule_expired\">\n                        <div className=\"auto-update-schedule__date\" suppressHydrationWarning>\n                            {formatDateSchedule(plannedExpireTime)}\n                        </div>\n                        <div>{trls[UpdatesSchedule.trls.expired]}</div>\n                    </div>\n                </div>\n            </ModalContent>\n            {renderErrorBlock()}\n            <ModalFooter>\n                <div className=\"vacancy-auto-update-link-trigger\">\n                    <BlokoLink\n                        appearance={LinkAppearance.Pseudo}\n                        onClick={handleRemoveSchedule}\n                        data-qa=\"vacancy-auto-update-remove\"\n                    >\n                        {trls[UpdatesSchedule.trls.removePlaned]}\n                    </BlokoLink>\n                </div>\n                <FormSpacer>\n                    <Button\n                        Element={Link}\n                        kind={ButtonKind.Primary}\n                        to=\"/price/publications\"\n                        data-qa=\"vacancy-auto-update-price-list\"\n                    >\n                        {trls[UpdatesSchedule.trls.priceList]}\n                    </Button>\n                </FormSpacer>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nUpdatesSchedule.propTypes = {\n    isVisible: PropTypes.bool,\n    expireTime: PropTypes.number,\n    dispatchModal: PropTypes.func,\n    vacancyName: PropTypes.string,\n    handleCloseModal: PropTypes.func,\n    vacancyId: PropTypes.number,\n    autoProlongationCanBeCanceled: PropTypes.bool,\n    schedule: PropTypes.object,\n    trls: PropTypes.object,\n};\n\nUpdatesSchedule.trls = {\n    title: 'vacancy.autoUpdate.scheduleList',\n    failureSome: 'vacancy.autoUpdate.failureSome',\n    failureMany: 'vacancy.autoUpdate.failureMany',\n    edit: 'vacancy.autoUpdate.edit',\n    priceList: 'vacancy.autoUpdate.priceList',\n    futureUpdates: 'vacancy.autoUpdate.futureUpdates',\n    planed: 'vacancy.autoUpdate.planed',\n    scheduled: 'vacancy.autoUpdate.scheduled',\n    removePlaned: 'vacancy.autoUpdate.removePlaned',\n    expired: 'vacancy.autoUpdate.expired',\n    mayCanceled: 'vacancy.autoUpdate.failure.mayCanceled',\n    lastFailure: 'vacancy.autoUpdate.lastFailure',\n    beforeFailure: 'vacancy.autoUpdate.beforeFailure',\n    month0: 'calendar.genitive.month.0',\n    month1: 'calendar.genitive.month.1',\n    month2: 'calendar.genitive.month.2',\n    month3: 'calendar.genitive.month.3',\n    month4: 'calendar.genitive.month.4',\n    month5: 'calendar.genitive.month.5',\n    month6: 'calendar.genitive.month.6',\n    month7: 'calendar.genitive.month.7',\n    month8: 'calendar.genitive.month.8',\n    month9: 'calendar.genitive.month.9',\n    month10: 'calendar.genitive.month.10',\n    month11: 'calendar.genitive.month.11',\n    EVERY_DAY: 'vacancy.autoUpdate.everyDay',\n    EVERY_WORKING_DAY: 'vacancy.autoUpdate.everyWorkDay',\n    EVERY_WEEK: 'vacancy.autoUpdate.oncePerWeek',\n    EVERY_TWO_WEEKS: 'vacancy.autoUpdate.oncePerTwoWeeks',\n    EVERY_SIXTH_DAY: 'vacancy.autoUpdate.sixthDay',\n    EVERY_FOURTH_DAY: 'vacancy.autoUpdate.fourthDay',\n    failureReasons: {\n        short: {\n            NOT_ENOUGH_PUBLICATIONS: 'vacancy.autoUpdate.failure.publications',\n            NOT_ENOUGH_PERMISSIONS: 'vacancy.autoUpdate.failure.permissions',\n            NOT_ENOUGH_QUOTAS: 'vacancy.autoUpdate.failure.quotas',\n        },\n        full: {\n            NOT_ENOUGH_PUBLICATIONS: 'vacancy.autoUpdate.failure.publications.full',\n            NOT_ENOUGH_PERMISSIONS: 'vacancy.autoUpdate.failure.permissions.full',\n            NOT_ENOUGH_QUOTAS: 'vacancy.autoUpdate.failure.quotas.full',\n        },\n    },\n};\n\nexport default memo(translation(UpdatesSchedule));\n","import { useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport Column from 'bloko/blocks/column';\nimport FormSpacer from 'bloko/blocks/form/FormSpacer';\nimport Modal, { ModalHeader, ModalTitle, ModalFooter, ModalContent } from 'bloko/blocks/modal';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport HumanDate, { ShowYear } from 'lux/components/HumanDate';\nimport { ADD_MODAL, MODAL_AUTO_UPDATE } from 'lux/components/VacancyModals/constants';\nimport translation from 'lux/components/translation';\n\nimport { RenewalObjectType } from 'lux/components/VacancyModals/AutoUpdateModal/RenewalObjectType';\n\nconst AutoUpdateWarningModal = ({\n    dispatchModal,\n    handleCloseModal,\n    vacancyName,\n    vacancyId,\n    autoRenewal,\n    renewalSteps,\n    isVisible,\n    isEdit,\n    trls,\n    afterSuccessAction,\n}) => {\n    const nextModal = useCallback(() => {\n        dispatchModal({\n            type: ADD_MODAL,\n            payload: {\n                modalType: MODAL_AUTO_UPDATE,\n                data: { vacancyId, vacancyName, autoRenewal, isEdit, renewalSteps, afterSuccessAction },\n            },\n        });\n    }, [autoRenewal, dispatchModal, isEdit, renewalSteps, vacancyId, vacancyName, afterSuccessAction]);\n\n    return (\n        <Modal visible={isVisible} onClose={handleCloseModal}>\n            <ModalHeader>\n                <ModalTitle>\n                    {isEdit ? trls[AutoUpdateWarningModal.trls.titleEdit] : trls[AutoUpdateWarningModal.trls.titlePlan]}\n                </ModalTitle>\n            </ModalHeader>\n            <ModalContent>\n                <Column xs=\"4\" s=\"7\" m=\"8\" l=\"8\" container>\n                    {formatToReactComponent(trls[AutoUpdateWarningModal.trls.warning], {\n                        '{0}': <HumanDate date={autoRenewal.closestPossibleProlongation} showYear={ShowYear.Never} />,\n                    })}\n                </Column>\n            </ModalContent>\n            <ModalFooter>\n                <Button onClick={handleCloseModal}>{trls[AutoUpdateWarningModal.trls.cancel]}</Button>\n                <FormSpacer>\n                    <Button onClick={nextModal} kind={ButtonKind.Primary}>\n                        {trls[AutoUpdateWarningModal.trls.continue]}\n                    </Button>\n                </FormSpacer>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nAutoUpdateWarningModal.propTypes = {\n    isEdit: PropTypes.bool,\n    isVisible: PropTypes.bool,\n    dispatchModal: PropTypes.func,\n    handleCloseModal: PropTypes.func,\n    vacancyName: PropTypes.string,\n    firstDate: PropTypes.number,\n    vacancyId: PropTypes.number,\n    renewalSteps: PropTypes.arrayOf(RenewalObjectType),\n    autoRenewal: RenewalObjectType,\n    trls: PropTypes.object,\n    afterSuccessAction: PropTypes.func,\n};\n\nAutoUpdateWarningModal.trls = {\n    titlePlan: 'vacancy.autoUpdate.title',\n    titleEdit: 'vacancy.autoUpdate.title.edit',\n    warning: 'vacancy.autoUpdateWarning.warning',\n    continue: 'vacancy.autoUpdateWarning.continue',\n    cancel: 'vacancy.autoUpdateWarning.cancel',\n};\n\nexport default translation(AutoUpdateWarningModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"benefitsList\":\"benefits-list--oWqKuQtKLTTpBAjfv8an\"};","import { useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport PropTypes from 'prop-types';\n\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport { FormSpacer } from 'bloko/blocks/form';\nimport Modal, { ModalHeader, ModalTitle, ModalFooter } from 'bloko/blocks/modal';\nimport Text, { TextSize } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\n\nimport translation from 'lux/components/translation';\nimport paths from 'lux/modules/routePaths';\n\nimport styles from './buy-option-modal.less';\n\nconst BuyOption = ({ handleCloseModal, isVisible, trls }) => {\n    const dispatch = useDispatch();\n    return (\n        <Modal visible={isVisible} onClose={handleCloseModal}>\n            <ModalHeader outlined>\n                <ModalTitle>{trls[BuyOption.trls.title]}</ModalTitle>\n            </ModalHeader>\n            <Text size={TextSize.Large}>{trls[BuyOption.trls.description]}</Text>\n            <VSpacing base={5} />\n            <Text size={TextSize.Large} strong>\n                {trls[BuyOption.trls.listTitle]}\n            </Text>\n            <VSpacing base={2} />\n            <ol className={styles.benefitsList}>\n                <li>{trls[BuyOption.trls.search]}</li>\n                <li>{trls[BuyOption.trls.profArea]}</li>\n                <li>{trls[BuyOption.trls.vacancyOfDay]}</li>\n                <li>{trls[BuyOption.trls.labelPremium]}</li>\n                <li>{trls[BuyOption.trls.maxResponses]}</li>\n            </ol>\n            <VSpacing base={14} />\n            <ModalFooter>\n                <Button onClick={handleCloseModal}>{trls[BuyOption.trls.cancel]}</Button>\n                <FormSpacer>\n                    <Button kind={ButtonKind.Primary} onClick={() => dispatch(push(paths.priceZpPromotion))}>\n                        {trls[BuyOption.trls.submit]}\n                    </Button>\n                </FormSpacer>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nBuyOption.propTypes = {\n    isVisible: PropTypes.bool,\n    handleCloseModal: PropTypes.func,\n    trls: PropTypes.object,\n};\n\nBuyOption.trls = {\n    title: 'employer.myVacancies.buyOption.title',\n    description: 'employer.myVacancies.buyOption.description',\n    listTitle: 'employer.myVacancies.buyOption.listTitle',\n    search: 'employer.myVacancies.buyOption.search',\n    profArea: 'employer.myVacancies.buyOption.profArea',\n    vacancyOfDay: 'employer.myVacancies.buyOption.vacancyOfDay',\n    labelPremium: 'employer.myVacancies.buyOption.labelPremium',\n    maxResponses: 'employer.myVacancies.buyOption.maxResponses',\n    submit: 'employer.myVacancies.buyOption.submit',\n    cancel: 'Cancel',\n};\n\nexport default translation(BuyOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"formContainer\":\"form-container--SD9DPRevN9ka0a7ixwhY\",\"formContentContainer\":\"form-content-container--vnL9BQbkVb1bfnKPLnef\",\"footer\":\"footer--bwnn7oaEoFC0zhT7SOM3\"};","import { Form as FinalForm } from 'react-final-form';\nimport { useDispatch } from 'react-redux';\n\nimport Button, { ButtonKind, ButtonType } from 'bloko/blocks/button';\nimport Modal, { ModalHeader, ModalTitle } from 'bloko/blocks/modal';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport Form from 'lux/components/Form';\nimport { HIRING_PLAN_UPDATE_SUCCESS } from 'lux/components/Notifications/HiringPlan';\nimport HiringPlanFields from 'lux/components/VacancyCreate/sections/MainInfo/HiringPlanFields';\nimport translation from 'lux/components/translation';\nimport { updateHasHiringPlan } from 'lux/models/employerVacancies/managerVacancies';\nimport { HiringPlanType } from 'lux/models/employerVacancies/vacancyHiringPlans';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\nimport addNotification from 'lux/requests/notifications/addNotification';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nimport styles from './styles.less';\n\nconst TrlKeys = {\n    title: 'hiringPlan.modal.header',\n    description: 'hiringPlan.description',\n    close: 'hiringPlan.modal.close',\n    submit: 'hiringPlan.modal.submit',\n};\n\ntype HiringPlanProps = {\n    isVisible: boolean;\n    handleCloseModal: () => void;\n    vacancyId: number;\n};\n\ndeclare global {\n    interface FetcherPostApi {\n        '/shards/employer/vacancies/hiring_plan/save_hiring_plan': {\n            body: HiringPlanType;\n            queryParams: {\n                vacancyId: number;\n            };\n            response: void;\n        };\n    }\n}\n\nconst HiringPlan: TranslatedComponent<HiringPlanProps> = ({ trls, isVisible, handleCloseModal, vacancyId }) => {\n    const dispatch = useDispatch();\n    const rules = useSelector(({ vacancyHiringPlanValidationRules }) => vacancyHiringPlanValidationRules);\n\n    const submitForm = async (value: { hiringPlan: HiringPlanType }) => {\n        const data = value.hiringPlan;\n\n        try {\n            await fetcher.post('/shards/employer/vacancies/hiring_plan/save_hiring_plan', data, {\n                params: { vacancyId },\n            });\n        } catch (error) {\n            dispatch(showDefaultError(error));\n            return;\n        }\n\n        dispatch(updateHasHiringPlan({ vacancyId, hasHiringPlan: true }));\n        dispatch(addNotification(HIRING_PLAN_UPDATE_SUCCESS));\n        handleCloseModal();\n    };\n\n    const renderForm = () => {\n        return (\n            <FinalForm\n                initialValues={{\n                    hiringPlan: null,\n                }}\n                onSubmit={submitForm}\n                render={({ handleSubmit, submitting, values }) => {\n                    return (\n                        <Form onSubmit={handleSubmit} className={styles.formContainer}>\n                            <div className={styles.formContentContainer}>\n                                <HiringPlanFields rules={{ hiringPlan: { fields: rules } }} />\n                                <div className={styles.footer}>\n                                    <Button data-qa=\"hiring-plan-modal-close\" onClick={handleCloseModal}>\n                                        {trls[TrlKeys.close]}\n                                    </Button>\n                                    <Button\n                                        data-qa=\"hiring-plan-modal-submit\"\n                                        type={ButtonType.Submit}\n                                        kind={ButtonKind.Primary}\n                                        loading={submitting}\n                                        disabled={!values.hiringPlan?.plannedCount}\n                                    >\n                                        {trls[TrlKeys.submit]}\n                                    </Button>\n                                </div>\n                            </div>\n                        </Form>\n                    );\n                }}\n            />\n        );\n    };\n\n    return (\n        <Modal visible={isVisible} onClose={handleCloseModal}>\n            <ModalHeader>\n                <ModalTitle>{trls[TrlKeys.title]}</ModalTitle>\n            </ModalHeader>\n            <VSpacing base={0} xs={2} />\n            <Text importance={TextImportance.Secondary}>{trls[TrlKeys.description]}</Text>\n            <VSpacing base={4} />\n            {renderForm()}\n        </Modal>\n    );\n};\n\nexport default translation(HiringPlan);\n","import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nconst AvailableProlongation = ({ vacancyServiceCode, count, regionsTrls, unlimited, serviceName, trls }) => (\n    <tr\n        className=\"vacancy-update-publication__type\"\n        data-qa={`vacancies-updatePopup__type vacancies-updatePopup__type_${vacancyServiceCode}`}\n    >\n        <td\n            className=\"vacancy-update-publication__type\"\n            data-qa={`vacancies-updatePopup__type vacancies-updatePopup__type_${vacancyServiceCode}`}\n        >\n            {serviceName}\n            {regionsTrls.length > 0 && (\n                <Fragment>\n                    {NON_BREAKING_SPACE}\n                    {trls[AvailableProlongation.trls.followingRegions]}:{NON_BREAKING_SPACE}\n                    {regionsTrls.join(', ')}\n                </Fragment>\n            )}\n        </td>\n        <td\n            className=\"vacancy-update-publication__count\"\n            data-qa={`vacancies-updatePopup__count vacancies-updatePopup__count_${vacancyServiceCode}`}\n        >\n            {unlimited ? trls[AvailableProlongation.trls.unlimited] : count}\n        </td>\n    </tr>\n);\n\nAvailableProlongation.propTypes = {\n    vacancyServiceCode: PropTypes.string,\n    count: PropTypes.number,\n    regionsTrls: PropTypes.array,\n    unlimited: PropTypes.bool,\n    serviceName: PropTypes.string,\n    trls: PropTypes.object,\n};\n\nAvailableProlongation.trls = {\n    followingRegions: 'employer.myVacancies.inFollowingRegions.short',\n    unlimited: 'employer.myVacancies.unlimited',\n};\n\nexport default translation(AvailableProlongation);\n","import { Fragment, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport Text from 'bloko/blocks/text';\n\nimport translation from 'lux/components/translation';\n\nexport const UNAVAILABLE_GROUP_PROP = PropTypes.arrayOf(\n    PropTypes.shape({\n        vacancyId: PropTypes.number,\n        reason: PropTypes.string,\n        reasonTrl: PropTypes.string,\n    })\n);\n\nconst UnavailableProlongation = ({ unavailableGroup, separated, trls }) => {\n    const getUniqUnavailable = useCallback(\n        (publications) =>\n            Object.values(\n                publications.reduce(\n                    (reasons, publication) => ({\n                        ...reasons,\n                        [publication.reason]: publication,\n                    }),\n                    {}\n                )\n            ),\n        []\n    );\n\n    if (!unavailableGroup) {\n        return null;\n    }\n\n    return (\n        <Fragment>\n            {separated && <div className=\"vacancy-update-separator\" />}\n            <div className=\"vacancy-update-wrapper\">\n                <Text strong data-qa=\"vacancies-updatePopup-willNotBeUpdated\">\n                    <ConversionNumber\n                        value={unavailableGroup.length}\n                        one={trls[UnavailableProlongation.trls.notUpdateOne]}\n                        some={trls[UnavailableProlongation.trls.notUpdateSome]}\n                        many={trls[UnavailableProlongation.trls.notUpdateMany]}\n                    />\n                </Text>\n                <div className=\"vacancy-update-wrapper\">\n                    <table className=\"vacancy-update-publications\" data-qa=\"vacancy-update__will-not-be-updated\">\n                        <tbody>\n                            {getUniqUnavailable(unavailableGroup).map(({ reason, reasonTrl, vacancyId }) => (\n                                <tr\n                                    key={vacancyId}\n                                    className=\"vacancy-update-publication vacancy-update-publication_warning\"\n                                    data-qa={`vacancies-updatePopup__item vacancies-updatePopup__item_${reason}`}\n                                >\n                                    <td\n                                        className=\"vacancy-update-publication__type\"\n                                        data-qa={`vacancies-updatePopup__type vacancies-updatePopup__type_${reason}`}\n                                    >\n                                        {reasonTrl}\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </Fragment>\n    );\n};\n\nUnavailableProlongation.propTypes = {\n    unavailableGroup: UNAVAILABLE_GROUP_PROP,\n    separated: PropTypes.bool,\n    trls: PropTypes.object,\n};\n\nUnavailableProlongation.trls = {\n    notUpdateOne: 'employer.myVacancies.willNotBeUpdated.title.one',\n    notUpdateSome: 'employer.myVacancies.willNotBeUpdated.title.many',\n    notUpdateMany: 'employer.myVacancies.willNotBeUpdated.title.some',\n};\n\nexport default translation(UnavailableProlongation);\n","import { Fragment, useMemo } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport Link, { LinkAppearance } from 'bloko/blocks/link';\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\nimport Text, { TextSize } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { format, formatToReactComponent } from 'bloko/common/trl';\n\nimport FreeRenewalTip from 'lux/components/VacancyActions/FreeRenewalTip';\nimport translation from 'lux/components/translation';\nimport { useExperimentGroupCheckFunction } from 'lux/hooks/useExperimentCheckFunction';\nimport { useIsZarplataPlatform } from 'lux/hooks/usePlatform';\nimport MetallicVacancyType from 'lux/models/vacancy/metallicVacancyType.types';\nimport { EXPERIMENT_GROUP } from 'lux/modules/experiments';\n\nimport AvailableProlongation from 'lux/components/VacancyModals/Prolongation/AvailableProlongation';\nimport UnavailableProlongation, {\n    UNAVAILABLE_GROUP_PROP,\n} from 'lux/components/VacancyModals/Prolongation/UnavailableProlongation';\n\nconst TRL_SEPARATOR = '{0}';\nconst POPUP_CLASS = 'vacancies-updatePopup__';\n\nexport const SPENDABLE_PROLONGATION_PROP = PropTypes.arrayOf(\n    PropTypes.shape({\n        vacancyServiceCode: PropTypes.string,\n        count: PropTypes.number,\n        regionsTrls: PropTypes.arrayOf(PropTypes.string),\n        unlimited: PropTypes.bool,\n        serviceName: PropTypes.string,\n    })\n);\n\nexport const UNAVAILABLE_PUBLICATIONS_PROP = PropTypes.arrayOf(\n    PropTypes.shape({\n        serviceName: PropTypes.string,\n        vacancyServiceCode: PropTypes.string,\n        count: PropTypes.number,\n    })\n);\n\nexport const PROLONGATION_WITH_TYPE_CHANGE_PROP = PropTypes.arrayOf(\n    PropTypes.shape({\n        services: PropTypes.arrayOf(\n            PropTypes.shape({\n                serviceTrl: PropTypes.string,\n                service: PropTypes.string,\n            })\n        ),\n        availableServiceTypes: PropTypes.arrayOf(PropTypes.string),\n    })\n);\n\nexport const PROMO_PUBLICATION_INFO_PROP = PropTypes.shape({\n    count: PropTypes.number,\n});\n\nexport const VACANCY_IDS_WITH_FREE_RENEWAL_PROP = PropTypes.arrayOf(PropTypes.number);\n\nexport const VACANCIES_IDS = PropTypes.arrayOf(PropTypes.number);\n\nconst ProlongateContent = ({\n    anyVacancyCanBeProlonged,\n    nonProlongableVacancies,\n    hasPublicationsInsufficiency,\n    spendableProlongations,\n    canProlongateAsOtherType,\n    unavailablePublications,\n    vacancyProlongationWithServiceTypeChangeInfo,\n    vacancyIdsWithFreeRenewal,\n    promoPublicationInfo,\n    handleUpdate,\n    isLoading,\n    vacanciesIds,\n    freeRenewalData,\n    trls,\n}) => {\n    const isZP = useIsZarplataPlatform();\n    const getExperimentGroup = useExperimentGroupCheckFunction();\n    const onClickBuyVacancies = () =>\n        Analytics.sendHHEventButtonClick('modal_prolongation_buy_vacancies_link', { vacanciesIds });\n\n    const renderFreeProlongationBlock = (showTitle, count, vacancyType) => {\n        return (\n            <>\n                {showTitle && (\n                    <Text Element=\"span\" strong>\n                        {trls[ProlongateContent.trls.freeOfCharge]}\n                    </Text>\n                )}\n                <div className={classnames({ 'vacancy-update-wrapper': showTitle })}>\n                    <ConversionNumber\n                        value={count}\n                        one={trls[ProlongateContent.trls[vacancyType].one]}\n                        some={trls[ProlongateContent.trls[vacancyType].some]}\n                        many={trls[ProlongateContent.trls[vacancyType].many]}\n                    />\n                </div>\n            </>\n        );\n    };\n\n    const renderFreeRenewalTip = useMemo(() => {\n        const { isFreeRenewalAvailable, lastFreeRenewal, freeRenewalInterval } = freeRenewalData;\n\n        if (!isFreeRenewalAvailable) {\n            return null;\n        }\n\n        return (\n            <>\n                <Text size={TextSize.Small}>\n                    <div className=\"vacancy-update-publication-free-renewal-info\">\n                        <FreeRenewalTip lastFreeRenewal={lastFreeRenewal} freeRenewalInterval={freeRenewalInterval} />\n                    </div>\n                </Text>\n                <VSpacing base={2} />\n            </>\n        );\n    }, [freeRenewalData]);\n\n    const renderSpendablePublicationsBlock = () => (\n        <>\n            {renderFreeRenewalTip}\n            <Text Element=\"span\" strong>\n                {trls[ProlongateContent.trls.chargeOff]}\n            </Text>\n            <div className=\"vacancy-update-wrapper\">\n                <table className=\"vacancy-update-publications\">\n                    <tbody>\n                        {spendableProlongations &&\n                            spendableProlongations.map(\n                                ({ vacancyServiceCode, count, regionsTrls, unlimited, serviceName }) => (\n                                    <AvailableProlongation\n                                        key={`${serviceName}${regionsTrls.join(',')}`}\n                                        vacancyServiceCode={vacancyServiceCode}\n                                        count={count}\n                                        regionsTrls={regionsTrls}\n                                        unlimited={unlimited}\n                                        serviceName={serviceName}\n                                    />\n                                )\n                            )}\n                    </tbody>\n                </table>\n            </div>\n        </>\n    );\n\n    if (anyVacancyCanBeProlonged && !hasPublicationsInsufficiency) {\n        const needToRenderFreeProlongationTitle =\n            spendableProlongations.length > 0 || nonProlongableVacancies.length > 0;\n        return (\n            <Fragment>\n                {spendableProlongations.length > 0 && renderSpendablePublicationsBlock()}\n                {promoPublicationInfo?.count > 0 &&\n                    renderFreeProlongationBlock(needToRenderFreeProlongationTitle, promoPublicationInfo.count, 'promo')}\n                {vacancyIdsWithFreeRenewal.length > 0 &&\n                    renderFreeProlongationBlock(\n                        needToRenderFreeProlongationTitle,\n                        vacancyIdsWithFreeRenewal.length,\n                        'regular'\n                    )}\n                {nonProlongableVacancies.length > 0 && (\n                    <UnavailableProlongation separated unavailableGroup={nonProlongableVacancies} />\n                )}\n            </Fragment>\n        );\n    }\n\n    if (canProlongateAsOtherType) {\n        return (\n            <Fragment>\n                <div className=\"vacancy-update-wrapper\">\n                    {format(trls[ProlongateContent.trls.notEnough], {\n                        [TRL_SEPARATOR]: unavailablePublications[0].serviceName,\n                    })}\n                </div>\n                <div className=\"vacancy-update-wrapper\">\n                    {formatToReactComponent(trls[ProlongateContent.trls.buyOrChange], {\n                        [TRL_SEPARATOR]: (\n                            <Link href=\"/price/publications\" onClick={onClickBuyVacancies}>\n                                {trls[ProlongateContent.trls.buyVacancies]}\n                            </Link>\n                        ),\n                    })}\n                </div>\n                <table>\n                    <tbody>\n                        {vacancyProlongationWithServiceTypeChangeInfo[0].services.map(({ serviceTrl, service }) => (\n                            <tr key={service} data-qa={`${POPUP_CLASS}item ${POPUP_CLASS}item_${service}`}>\n                                <td className=\"vacancy-update-publication__type\">\n                                    <div data-qa={`${POPUP_CLASS}type ${POPUP_CLASS}type_${service}`}>{serviceTrl}</div>\n                                    <div className=\"vacancy-update-publication__button\">\n                                        <Link\n                                            appearance={LinkAppearance.Pseudo}\n                                            data-qa={`${POPUP_CLASS}update-button ${POPUP_CLASS}update-button_${service}`}\n                                            onClick={(e) => handleUpdate(e, service, 'link')}\n                                        >\n                                            {trls[ProlongateContent.trls.refresh]}\n                                            {isLoading && <Loading scale={LoadingScale.Small} />}\n                                        </Link>\n                                    </div>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </Fragment>\n        );\n    }\n\n    if (nonProlongableVacancies.length > 0 && !hasPublicationsInsufficiency) {\n        return <UnavailableProlongation unavailableGroup={nonProlongableVacancies} />;\n    }\n\n    const freeUnavailablePublications = unavailablePublications.filter(\n        ({ vacancyServiceCode }) => vacancyServiceCode === MetallicVacancyType.Free\n    );\n    const withFreeProlongationText = isZP && !!freeUnavailablePublications.length;\n    const displayFreeProlongationText =\n        withFreeProlongationText && getExperimentGroup('remove_zp_demo_20855') !== EXPERIMENT_GROUP;\n    const onlyFreeProlongationText =\n        withFreeProlongationText && freeUnavailablePublications.length === unavailablePublications.length;\n\n    return (\n        <Fragment>\n            {renderFreeRenewalTip}\n            {trls[ProlongateContent.trls.neededForUpdate]}\n            <div className=\"vacancy-update-wrapper\">\n                <table className=\"vacancy-update-publications\" data-qa=\"vacancy-update__will-not-be-updated\">\n                    <tbody>\n                        {unavailablePublications.map(({ serviceName, vacancyServiceCode, count }) => (\n                            <tr\n                                key={vacancyServiceCode}\n                                className=\"vacancy-update-publication\"\n                                data-qa={`${POPUP_CLASS}item vacancies-updatePopup__item_${vacancyServiceCode}`}\n                            >\n                                <td\n                                    className=\"vacancy-update-publication__type\"\n                                    data-qa={`${POPUP_CLASS}type ${POPUP_CLASS}type_${vacancyServiceCode}`}\n                                >\n                                    {serviceName}\n                                </td>\n                                <td\n                                    className=\"vacancy-update-publication__count\"\n                                    data-qa={`${POPUP_CLASS}count ${POPUP_CLASS}count_${vacancyServiceCode}`}\n                                >\n                                    {count}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            {(!onlyFreeProlongationText || displayFreeProlongationText) && (\n                <div className=\"vacancy-update-wrapper\">\n                    {!onlyFreeProlongationText &&\n                        formatToReactComponent(trls[ProlongateContent.trls.buyProlongation], {\n                            [TRL_SEPARATOR]: (\n                                <Link href=\"/price/publications\" onClick={onClickBuyVacancies}>\n                                    {trls[ProlongateContent.trls.buyVacancies]}\n                                </Link>\n                            ),\n                        })}\n                    {displayFreeProlongationText && <Text>{trls[ProlongateContent.trls.freeProlongation]}</Text>}\n                </div>\n            )}\n        </Fragment>\n    );\n};\n\nProlongateContent.propTypes = {\n    anyVacancyCanBeProlonged: PropTypes.bool,\n    nonProlongableVacancies: UNAVAILABLE_GROUP_PROP,\n    hasPublicationsInsufficiency: PropTypes.bool,\n    spendableProlongations: SPENDABLE_PROLONGATION_PROP,\n    canProlongateAsOtherType: PropTypes.bool,\n    unavailablePublications: UNAVAILABLE_PUBLICATIONS_PROP,\n    vacancyProlongationWithServiceTypeChangeInfo: PROLONGATION_WITH_TYPE_CHANGE_PROP,\n    vacancyIdsWithFreeRenewal: VACANCY_IDS_WITH_FREE_RENEWAL_PROP,\n    promoPublicationInfo: PROMO_PUBLICATION_INFO_PROP,\n    handleUpdate: PropTypes.func,\n    isLoading: PropTypes.bool,\n    vacanciesIds: VACANCIES_IDS,\n    freeRenewalData: PropTypes.shape({\n        isFreeRenewalAvailable: PropTypes.bool,\n        lastFreeRenewal: PropTypes.string,\n        freeRenewalInterval: PropTypes.string,\n    }),\n    trls: PropTypes.object,\n};\n\nProlongateContent.trls = {\n    buyVacancies: 'employer.myVacancies.buyVacancies',\n    buyOrChange: 'employer.myVacancies.buyOrChangeMetallic',\n    chargeOff: 'employer.myVacancies.willBeChargedOff',\n    freeOfCharge: 'employer.myVacancies.freeOfCharge',\n    refresh: 'vacancyRefresh.link',\n    notEnough: 'employer.myVacancies.notEnoughPublications',\n    buyProlongation: 'employer.myVacancies.buyForProlongation',\n    freeProlongation: 'employer.myVacancies.monthlyAccrual',\n    neededForUpdate: 'employer.myVacancies.neededForUpdate',\n    promo: {\n        one: 'employer.myVacancies.promoVacancies.updatingOne',\n        some: 'employer.myVacancies.promoVacancies.updatingSome',\n        many: 'employer.myVacancies.promoVacancies.updatingMany',\n    },\n    regular: {\n        one: 'employer.myVacancies.regularVacancies.updatingOne',\n        some: 'employer.myVacancies.regularVacancies.updatingSome',\n        many: 'employer.myVacancies.regularVacancies.updatingMany',\n    },\n    promoDescription: 'employer.myVacancies.promoVacancy.willBeUpdated.description',\n};\n\nexport default translation(ProlongateContent);\n","import { Fragment, useCallback, useMemo, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport { FormSpacer, FormHint } from 'bloko/blocks/form';\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\nimport Modal, { ModalHeader, ModalTitle, ModalFooter } from 'bloko/blocks/modal';\n\nimport updateVacancy from 'lux/components/EmployerVacancies/updateVacancy';\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nimport ProlongateContent, {\n    UNAVAILABLE_PUBLICATIONS_PROP,\n    SPENDABLE_PROLONGATION_PROP,\n    PROLONGATION_WITH_TYPE_CHANGE_PROP,\n    PROMO_PUBLICATION_INFO_PROP,\n    VACANCY_IDS_WITH_FREE_RENEWAL_PROP,\n} from 'lux/components/VacancyModals/Prolongation/ProlongateContent';\nimport { UNAVAILABLE_GROUP_PROP } from 'lux/components/VacancyModals/Prolongation/UnavailableProlongation';\n\nconst Prolongation = ({\n    handleCloseModal,\n    updateInfo: {\n        totalProlongations = 0,\n        spentPublications: spendableProlongations,\n        notNeedProlongation,\n        cantBeProlongated,\n        unavailablePublications = [],\n        canProlongateAsOtherType,\n        vacancyProlongationWithServiceTypeChangeInfo,\n        promoPublicationInfo,\n        vacancyIdsWithFreeRenewal = [],\n    },\n    vacanciesToProlongate,\n    vacanciesIds,\n    updateVacancy,\n    isVisible,\n    trls,\n    location,\n    freeRenewalData,\n    afterSuccessAction,\n}) => {\n    const hasPublicationsInsufficiency = unavailablePublications?.length > 0;\n    const nonProlongableVacancies = [].concat(notNeedProlongation || []).concat(cantBeProlongated || []);\n    const nonProlongableVacanciesIds = nonProlongableVacancies.map((item) => item.vacancyId);\n    const anyVacancyCanBeProlonged =\n        spendableProlongations?.length > 0 || promoPublicationInfo?.count > 0 || vacancyIdsWithFreeRenewal.length > 0;\n\n    const errorTitle = useMemo(\n        () => (vacanciesIds?.length === 1 ? trls[Prolongation.trls.failOne] : trls[Prolongation.trls.failMany]),\n        [trls, vacanciesIds]\n    );\n    const [isLoading, setLoading] = useState(false);\n\n    const titleDataQa = useMemo(() => {\n        if (anyVacancyCanBeProlonged && !hasPublicationsInsufficiency) {\n            return 'vacancies-updatePopup-willBeUpdated';\n        }\n\n        if (vacancyProlongationWithServiceTypeChangeInfo) {\n            return 'vacancies-updatePopup-prolongationWithMetallicChange';\n        }\n\n        return 'vacancies-updatePopup-unableToProlongate';\n    }, [anyVacancyCanBeProlonged, hasPublicationsInsufficiency, vacancyProlongationWithServiceTypeChangeInfo]);\n\n    const handleUpdate = useCallback(\n        async (event, targetMetallic, analyticsLabel = 'button') => {\n            Analytics.sendHHEventButtonClick(`modal_prolongation_${analyticsLabel}`, {\n                vacanciesIds,\n            });\n\n            const updateIds = vacanciesToProlongate.filter(\n                (id) => !vacancyIdsWithFreeRenewal.includes(id) && !nonProlongableVacanciesIds.includes(id)\n            );\n\n            if (isLoading || !setLoading || (!updateIds && !vacancyIdsWithFreeRenewal)) {\n                return;\n            }\n\n            setLoading(true);\n            try {\n                await updateVacancy({\n                    params: {\n                        id: updateIds,\n                        renewalId: vacancyIdsWithFreeRenewal,\n                        ...(targetMetallic ? { targetMetallic } : {}),\n                    },\n                    location,\n                });\n\n                if (afterSuccessAction) {\n                    afterSuccessAction();\n\n                    return;\n                }\n\n                handleCloseModal();\n            } catch (ignore) {\n                console.error(ignore);\n                setLoading(false);\n            }\n        },\n        [\n            vacanciesToProlongate,\n            vacanciesIds,\n            isLoading,\n            vacancyIdsWithFreeRenewal,\n            nonProlongableVacanciesIds,\n            updateVacancy,\n            location,\n            handleCloseModal,\n            afterSuccessAction,\n        ]\n    );\n\n    return (\n        <Modal visible={isVisible} onClose={handleCloseModal}>\n            <ModalHeader outlined>\n                <ModalTitle data-qa={titleDataQa}>\n                    {anyVacancyCanBeProlonged && !hasPublicationsInsufficiency ? (\n                        <Fragment>\n                            {trls[Prolongation.trls.update]}\n                            {NON_BREAKING_SPACE}\n                            <ConversionNumber\n                                value={totalProlongations}\n                                one={trls[Prolongation.trls.updateSome]}\n                                some={trls[Prolongation.trls.updateMany]}\n                                many={trls[Prolongation.trls.updateMany]}\n                            />\n                        </Fragment>\n                    ) : (\n                        errorTitle\n                    )}\n                </ModalTitle>\n            </ModalHeader>\n            <div className=\"vacancy-update\">\n                <ProlongateContent\n                    anyVacancyCanBeProlonged={anyVacancyCanBeProlonged}\n                    nonProlongableVacancies={nonProlongableVacancies}\n                    hasPublicationsInsufficiency={hasPublicationsInsufficiency}\n                    spendableProlongations={spendableProlongations}\n                    promoPublicationInfo={promoPublicationInfo}\n                    canProlongateAsOtherType={canProlongateAsOtherType}\n                    unavailablePublications={unavailablePublications}\n                    vacancyProlongationWithServiceTypeChangeInfo={vacancyProlongationWithServiceTypeChangeInfo}\n                    vacancyIdsWithFreeRenewal={vacancyIdsWithFreeRenewal}\n                    handleUpdate={handleUpdate}\n                    isLoading={isLoading}\n                    freeRenewalData={freeRenewalData}\n                    vacanciesIds={vacanciesIds}\n                />\n                {(spendableProlongations?.length > 0 ||\n                    promoPublicationInfo?.count > 0 ||\n                    hasPublicationsInsufficiency) && (\n                    <FormHint>\n                        {(spendableProlongations.length > 0 || hasPublicationsInsufficiency) &&\n                            `${trls[Prolongation.trls.info]}. `}\n                        {(spendableProlongations?.length > 0 || promoPublicationInfo?.count > 0) &&\n                            trls[Prolongation.trls.autoprolongationNotice]}\n                    </FormHint>\n                )}\n                <ModalFooter>\n                    <Button data-qa=\"vacancies-updatePopup-close\" onClick={handleCloseModal}>\n                        {trls[Prolongation.trls.cancel]}\n                    </Button>\n                    {anyVacancyCanBeProlonged && !hasPublicationsInsufficiency && (\n                        <FormSpacer>\n                            <Button\n                                kind={ButtonKind.Primary}\n                                data-qa=\"vacancies-updatePopup-update\"\n                                onClick={handleUpdate}\n                                loading={isLoading && <Loading scale={LoadingScale.Small} />}\n                            >\n                                {trls[Prolongation.trls.submit]}\n                            </Button>\n                        </FormSpacer>\n                    )}\n                </ModalFooter>\n            </div>\n        </Modal>\n    );\n};\n\nProlongation.propTypes = {\n    isVisible: PropTypes.bool,\n    vacanciesToProlongate: PropTypes.arrayOf(PropTypes.number),\n    vacanciesIds: PropTypes.arrayOf(PropTypes.number),\n    updateVacancy: PropTypes.func,\n    handleCloseModal: PropTypes.func,\n    handleUpdate: PropTypes.func,\n    updateInfo: PropTypes.shape({\n        totalProlongations: PropTypes.number,\n        spentPublications: SPENDABLE_PROLONGATION_PROP,\n        notNeedProlongation: UNAVAILABLE_GROUP_PROP,\n        cantBeProlongated: UNAVAILABLE_GROUP_PROP,\n        unavailablePublications: UNAVAILABLE_PUBLICATIONS_PROP,\n        canProlongateAsOtherType: PropTypes.bool,\n        vacancyProlongationWithServiceTypeChangeInfo: PROLONGATION_WITH_TYPE_CHANGE_PROP,\n        promoPublicationInfo: PROMO_PUBLICATION_INFO_PROP,\n        vacancyIdsWithFreeRenewal: VACANCY_IDS_WITH_FREE_RENEWAL_PROP,\n    }),\n    trls: PropTypes.object,\n    location: PropTypes.object,\n    freeRenewalData: PropTypes.object,\n    afterSuccessAction: PropTypes.func,\n};\n\nProlongation.trls = {\n    failMany: 'employer.myVacancies.willNotBeUpdated.titleMany',\n    failOne: 'employer.myVacancies.willNotBeUpdated.titleOne',\n    update: 'employer.myVacancies.update',\n    updateSome: 'vacancy.some',\n    updateMany: 'vacancy.many',\n    info: 'employer.vacancy.extend.warning',\n    cancel: 'Cancel',\n    submit: 'vacancyRefresh.link',\n    autoprolongationNotice: 'employer.vacancies.prolongation.autoprolongationNotice',\n};\n\nexport default connect(\n    ({ updateInfo, router: { location } }) => ({\n        updateInfo,\n        location,\n    }),\n    { updateVacancy }\n)(translation(Prolongation));\n","import { push } from 'connected-react-router';\n\nimport { VACANCY_UPDATE_SUCCESS } from 'lux/components/Notifications/EmployerVacancies';\nimport { updateManagerVacancies } from 'lux/models/employerVacancies/managerVacancies';\nimport fetcher from 'lux/modules/fetcher';\nimport addNotification from 'lux/requests/notifications/addNotification';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nexport default ({ params, location }) =>\n    async (dispatch) => {\n        let response;\n        try {\n            response = await fetcher.postFormData('/employer/vacancy/update', params);\n        } catch (err) {\n            dispatch(showDefaultError(err));\n            return;\n        }\n        if (location.pathname.match('/vacancy/')) {\n            dispatch(push(`${location.pathname}${response.data.query}`));\n            return;\n        }\n\n        let updatedVacancies;\n        try {\n            updatedVacancies = await fetcher.get('/shards/employer/vacancies/get_full_vacancy', {\n                params: {\n                    vacancyId: [...params.id, ...params.renewalId],\n                    isMultiple: true,\n                },\n            });\n        } catch (err) {\n            dispatch(showDefaultError(err));\n            return;\n        }\n\n        dispatch(updateManagerVacancies(updatedVacancies));\n        dispatch(\n            addNotification(VACANCY_UPDATE_SUCCESS, {\n                count: updatedVacancies.vacancies.length,\n                name: updatedVacancies.vacancies[0].name,\n            })\n        );\n    };\n","import { DefaultRootState } from 'react-redux';\nimport { AnyAction } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { moveManagerVacancies } from 'lux/models/employerVacancies/managerVacancies';\nimport { EmployerManager } from 'lux/models/employerVacancies/vacancy.types';\nimport fetcher from 'lux/modules/fetcher';\n\nconst MOVE_VACANCIES_URL = '/employer/movevacancies';\n\ndeclare global {\n    interface FetcherPostApi {\n        [MOVE_VACANCIES_URL]: {\n            queryParams: void;\n            body: {\n                id: number[];\n                targetManagerId: number;\n            };\n            response: void;\n        };\n    }\n}\nexport default ({\n        vacanciesIds,\n        filterEmployerManagerIdList,\n        managerToTransfer,\n        groupId,\n        currentGroupManagersIdsSet,\n    }: {\n        vacanciesIds: number[];\n        filterEmployerManagerIdList: string[];\n        managerToTransfer: EmployerManager;\n        groupId: string | undefined;\n        currentGroupManagersIdsSet: Set<number>;\n    }): ThunkAction<Promise<unknown>, DefaultRootState, unknown, AnyAction> =>\n    async (dispatch) => {\n        await fetcher.postFormData(MOVE_VACANCIES_URL, {\n            id: vacanciesIds,\n            targetManagerId: managerToTransfer.managerId,\n        });\n\n        return dispatch(\n            moveManagerVacancies({\n                checkedVacancies: vacanciesIds,\n                managerToTransfer,\n                filterEmployerManagerIdList,\n                groupId,\n                groupManagersIds: currentGroupManagersIdsSet,\n            })\n        );\n    };\n","import { useCallback, useState, useMemo, useContext } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport { useSelectorNonNullable } from '@hh.ru/redux-create-reducer';\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport { ModalTitle } from 'bloko/blocks/modal';\nimport TreeSelectorDummy from 'bloko/blocks/treeSelector/Dummy';\nimport TreeSelectorPopup from 'bloko/blocks/treeSelectorPopup';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { fromTree } from 'bloko/common/tree/treeCollectionHelper';\n\nimport FilterContext from 'lux/components/EmployerVacancies/FilterContext';\nimport { UNCHECK_ALL } from 'lux/components/EmployerVacancies/checkReducer';\nimport fetchClustersInfo from 'lux/components/EmployerVacancies/fetchClustersInfo';\nimport fetchGroupsInfo from 'lux/components/EmployerVacancies/fetchGroupsInfo';\nimport translation from 'lux/components/translation';\nimport { VacancyGroup } from 'lux/models/employerVacancies/managerVacanciesGroups';\nimport { ManagerListItem } from 'lux/models/managersList';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport moveVacancies from 'lux/components/VacancyModals/Transfer/moveVacancies';\n\nconst getTreeCollection = (managersList: ManagerListItem[], currentGroupManagersIdsSet: Set<number>) =>\n    fromTree(\n        managersList\n            .filter(({ id }) => !currentGroupManagersIdsSet.has(id))\n            .map(({ id, name, firstName, middleName, lastName }) => ({\n                id: `${id}`,\n                text: name,\n                additional: {\n                    managerId: id,\n                    firstName,\n                    middleName,\n                    lastName,\n                },\n            }))\n    );\n\nconst getGroupManagerIdsSet = (managerVacanciesGroups: VacancyGroup[], activeGroupId: string | undefined) =>\n    new Set(\n        managerVacanciesGroups\n            .find(({ groupId }) => groupId === activeGroupId)\n            ?.employerManagers?.map(({ employerManagerId }) => employerManagerId)\n    );\n\ninterface TransferProps {\n    isVisible: boolean;\n    vacanciesIds: number[];\n    filterEmployerManagerIdList: string[];\n    dispatchCheckVacancy: ({ type }: { type: string }) => void;\n    handleCloseModal: () => void;\n}\n\nconst TrlKeys = {\n    titlePrefix: 'employer.myVacancyes.move.titlePrefix',\n    error: 'employer.myVacancyes.move.error',\n    cancel: 'employer.myVacancyes.move.cancel',\n    transferSubmit: 'employer.myVacancyes.move',\n    transferSubmitOne: 'employer.myVacancyes.moveOne',\n    transferSome: 'vacancy.some',\n    transferMany: 'vacancy.many',\n};\n\nconst Transfer: TranslatedComponent<TransferProps> = ({\n    vacanciesIds,\n    isVisible,\n    dispatchCheckVacancy,\n    handleCloseModal,\n    filterEmployerManagerIdList,\n    trls,\n}) => {\n    const dispatch = useDispatch();\n    const managerVacanciesGroups = useSelectorNonNullable((state) => state.managerVacanciesGroups);\n    const managersList = useSelector((state) => state.managersList);\n    const groupId = useSelectorNonNullable(({ managerVacanciesActiveGroupId }) => managerVacanciesActiveGroupId);\n\n    const currentGroupManagersIdsSet = useMemo(\n        () => getGroupManagerIdsSet(managerVacanciesGroups, groupId),\n        [managerVacanciesGroups, groupId]\n    );\n    const managersTree = useMemo(\n        () => getTreeCollection(managersList, currentGroupManagersIdsSet),\n        [managersList, currentGroupManagersIdsSet]\n    );\n\n    const [isError, setError] = useState(false);\n    const [selected, setManager] = useState('');\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const { filters, dispatchFilter } = useContext(FilterContext);\n\n    const vacanciesCount = vacanciesIds?.length || 1;\n\n    const handleSubmit = useCallback(() => {\n        setIsSubmitting(true);\n        const selectedMager = managersTree.getModel(selected)?.additional;\n        if (!selectedMager) {\n            setError(true);\n            return;\n        }\n\n        Analytics.sendHHEventButtonClick('modal_transfer_button', {\n            vacanciesIds,\n        });\n\n        dispatch(\n            moveVacancies({\n                vacanciesIds,\n                filterEmployerManagerIdList,\n                managerToTransfer: selectedMager,\n                groupId,\n                currentGroupManagersIdsSet,\n            })\n        )\n            .then(\n                () => {\n                    setError(false);\n                    handleCloseModal();\n                    dispatchCheckVacancy({ type: UNCHECK_ALL });\n                    void dispatch(fetchClustersInfo(filters, dispatchFilter, groupId));\n                    if (groupId) {\n                        void dispatch(fetchGroupsInfo(groupId));\n                    }\n                },\n                () => {\n                    setError(true);\n                }\n            )\n            .finally(() => {\n                setIsSubmitting(false);\n            });\n    }, [\n        dispatch,\n        vacanciesIds,\n        selected,\n        filterEmployerManagerIdList,\n        managersTree,\n        handleCloseModal,\n        dispatchCheckVacancy,\n        filters,\n        dispatchFilter,\n        groupId,\n        currentGroupManagersIdsSet,\n    ]);\n    const popupTrl = useMemo(\n        () => ({\n            submit: vacanciesCount === 1 ? trls[TrlKeys.transferSubmitOne] : trls[TrlKeys.transferSubmit],\n            cancel: trls[TrlKeys.cancel],\n        }),\n        [trls, vacanciesCount]\n    );\n\n    return (\n        <TreeSelectorPopup\n            visible={isVisible}\n            selected={[selected]}\n            trl={popupTrl}\n            onClose={handleCloseModal}\n            error={isError ? trls[TrlKeys.error] : ''}\n            onSubmit={handleSubmit}\n            disabledSubmit={!selected || isSubmitting}\n            hideOnSubmitClick={false}\n            title={\n                <ModalTitle>\n                    {trls[TrlKeys.titlePrefix]}\n                    {NON_BREAKING_SPACE}\n                    <ConversionNumber\n                        value={vacanciesCount}\n                        one={trls[TrlKeys.transferSome]}\n                        some={trls[TrlKeys.transferMany]}\n                        many={trls[TrlKeys.transferMany]}\n                    />\n                </ModalTitle>\n            }\n        >\n            <TreeSelectorDummy singleChoice onChange={(id) => setManager(id)} collection={managersTree} />\n        </TreeSelectorPopup>\n    );\n};\n\nexport default translation(Transfer);\n","import { DefaultRootState } from 'react-redux';\nimport { AnyAction } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { VACANCY_DRAFT_MOVE_SUCCESS } from 'lux/components/Notifications/EmployerVacancies';\nimport { removeManagerVacancies } from 'lux/models/employerVacancies/managerVacancies';\nimport { EmployerManager } from 'lux/models/employerVacancies/vacancy.types';\nimport fetcher from 'lux/modules/fetcher';\nimport addNotification from 'lux/requests/notifications/addNotification';\n\nconst MOVE_DRAFTS_URL = '/employer/movedrafts';\n\ndeclare global {\n    interface FetcherPostApi {\n        [MOVE_DRAFTS_URL]: {\n            queryParams: void;\n            body: {\n                id: number[];\n                targetManagerId: number;\n            };\n            response: void;\n        };\n    }\n}\nexport default ({\n        draftsIds,\n        managerToTransfer,\n    }: {\n        draftsIds: number[];\n        managerToTransfer: EmployerManager;\n        currentManagerId: number;\n    }): ThunkAction<Promise<unknown>, DefaultRootState, unknown, AnyAction> =>\n    async (dispatch) => {\n        try {\n            await fetcher.postFormData(MOVE_DRAFTS_URL, {\n                id: draftsIds,\n                targetManagerId: managerToTransfer.managerId,\n            });\n        } catch (err) {\n            throw err;\n        }\n        dispatch(removeManagerVacancies({ vacancyIds: draftsIds }));\n        dispatch(addNotification(VACANCY_DRAFT_MOVE_SUCCESS, { draftsIds }));\n    };\n","import { useCallback, useState, useMemo, useContext } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport { ModalTitle } from 'bloko/blocks/modal';\nimport TreeSelectorDummy from 'bloko/blocks/treeSelector/Dummy';\nimport TreeSelectorPopup from 'bloko/blocks/treeSelectorPopup';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { fromTree } from 'bloko/common/tree/treeCollectionHelper';\n\nimport CheckContext from 'lux/components/EmployerVacancies/CheckContext';\nimport { UNCHECK_ALL } from 'lux/components/EmployerVacancies/checkReducer';\nimport translation from 'lux/components/translation';\nimport { fetchAndUpdateVacanciesCount } from 'lux/models/employerVacancies/vacanciesCount';\nimport { EmployerManager } from 'lux/models/employerVacancies/vacancy.types';\nimport { ManagerListItem } from 'lux/models/managersList';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport moveDrafts from 'lux/components/VacancyModals/TransferDrafts/moveDrafts';\n\nconst getTreeCollection = (managersList: ManagerListItem[]) =>\n    fromTree(\n        managersList.map(({ id, name, firstName, middleName, lastName }) => ({\n            id: `${id}`,\n            text: name,\n            additional: {\n                managerId: id,\n                firstName,\n                middleName,\n                lastName,\n            },\n        }))\n    );\n\nconst TrlKeys = {\n    titlePrefix: 'employer.myVacancies.draft.move.titlePrefix',\n    error: 'employer.myVacancies.draft.move.error',\n    cancel: 'employer.myVacancies.draft.move.cancel',\n    transferSubmit: 'employer.myVacancies.draft.move',\n    transferSubmitOne: 'employer.myVacancies.draft.moveOne',\n    transferSome: 'draft.some',\n    transferMany: 'draft.many',\n};\n\ninterface TransferDraftsProps {\n    isVisible: boolean;\n    draftsIds: number[];\n    handleCloseModal: () => void;\n}\n\nconst TransferDrafts: TranslatedComponent<TransferDraftsProps> = ({ isVisible, draftsIds, handleCloseModal, trls }) => {\n    const dispatch = useDispatch();\n    const { dispatchCheckDraft } = useContext(CheckContext);\n    const currentManagerId = useSelector((state) => parseInt(state.employerManager?.id || '', 10));\n    const managersList = useSelector((state) => state.managersList);\n    const managersTree = useMemo(() => getTreeCollection(managersList), [managersList]);\n\n    const [isError, setError] = useState(false);\n    const [selected, setManager] = useState('');\n\n    const draftsCount = draftsIds?.length || 1;\n\n    const handleSubmit = useCallback(async () => {\n        try {\n            await dispatch(\n                moveDrafts({\n                    draftsIds,\n                    managerToTransfer: managersTree.getModel(selected)?.additional as EmployerManager,\n                    currentManagerId,\n                })\n            );\n        } catch (e) {\n            setError(true);\n            return;\n        }\n        setError(false);\n        handleCloseModal();\n        dispatchCheckDraft({ type: UNCHECK_ALL });\n        void fetchAndUpdateVacanciesCount(dispatch);\n    }, [handleCloseModal, dispatchCheckDraft, dispatch, draftsIds, managersTree, selected, currentManagerId]);\n    const popupTrl = useMemo(\n        () => ({\n            submit: draftsCount === 1 ? trls[TrlKeys.transferSubmitOne] : trls[TrlKeys.transferSubmit],\n            cancel: trls[TrlKeys.cancel],\n        }),\n        [trls, draftsCount]\n    );\n\n    return (\n        <TreeSelectorPopup\n            visible={isVisible}\n            selected={[selected]}\n            trl={popupTrl}\n            onClose={handleCloseModal}\n            error={isError ? trls[TrlKeys.error] : ''}\n            onSubmit={handleSubmit}\n            disabledSubmit={!selected}\n            hideOnSubmitClick={false}\n            title={\n                <ModalTitle>\n                    {trls[TrlKeys.titlePrefix]}\n                    {NON_BREAKING_SPACE}\n                    <ConversionNumber\n                        value={draftsCount}\n                        one={trls[TrlKeys.transferSome]}\n                        some={trls[TrlKeys.transferMany]}\n                        many={trls[TrlKeys.transferMany]}\n                    />\n                </ModalTitle>\n            }\n        >\n            <TreeSelectorDummy singleChoice onChange={(id) => setManager(id)} collection={managersTree} />\n        </TreeSelectorPopup>\n    );\n};\n\nexport default translation(TransferDrafts);\n","// extracted by mini-css-extract-plugin\nexport default {\"vacancyAdviceWrapper\":\"vacancy-advice-wrapper--pi9UVf56L7aMHktSUKCk\",\"vacancyAdviceItem\":\"vacancy-advice-item--_DAeL71VWEGT3tUPnapo\",\"vacancyAdviceItemFree\":\"vacancy-advice-item_free--JsDoQpZzuqRdMkzXJiAS\",\"vacancyAdviceItemImportant\":\"vacancy-advice-item_important--z4xfSs4AXjbxazv9_1yJ\",\"vacancyAdviceItemPaid\":\"vacancy-advice-item_paid--RtADWB957EhzLdkOOkwh\",\"vacancyAdviceItemLine\":\"vacancy-advice-item-line--a9IFoN1RVhAIRcGux25J\",\"vacancyAdviceItemIcon\":\"vacancy-advice-item-icon--SmoM8S8seyoSyB4X5jLk\"};","import { useEffect, useRef } from 'react';\nimport classnames from 'classnames';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport Button from 'bloko/blocks/button';\nimport Icon, { IconColor, IconScale, IconShape, IconView } from 'bloko/blocks/icon';\nimport BlokoLink, { LinkKind } from 'bloko/blocks/link';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { VacancyAdviceMarketSalary } from 'lux/models/employerVacancies/vacancy.types';\nimport { VacancyAdvice } from 'lux/models/vacancyCreate/vacancyAdvices.types';\nimport fetcher from 'lux/modules/fetcher';\nimport formatToInt from 'lux/modules/formatToInt';\nimport { EN_DASH } from 'lux/modules/symbols';\n\nimport styles from './vacancyAdviceModal.less';\n\nenum VacancyAdviceGroup {\n    Important,\n    Paid,\n    Free,\n}\n\ninterface VacancyAdviceItemProps {\n    adviceItem: VacancyAdvice;\n    marketSalary: VacancyAdviceMarketSalary;\n    vacancyId: number;\n    hideAdviceItem: (adviceItem: VacancyAdvice) => void;\n}\n\nconst VacancyAdviceToGroup = {\n    [VacancyAdvice.WorkAddress]: VacancyAdviceGroup.Free,\n    [VacancyAdvice.ConditionsToDescription]: VacancyAdviceGroup.Free,\n    [VacancyAdvice.RequirementsToDescription]: VacancyAdviceGroup.Free,\n    [VacancyAdvice.ResponsibilitiesToDescription]: VacancyAdviceGroup.Free,\n    [VacancyAdvice.SalaryCloserToMarker]: VacancyAdviceGroup.Important,\n    [VacancyAdvice.UseStandardPlus]: VacancyAdviceGroup.Paid,\n    [VacancyAdvice.PublishSalary]: VacancyAdviceGroup.Important,\n    [VacancyAdvice.EmployerContacts]: VacancyAdviceGroup.Free,\n    [VacancyAdvice.UseResumeSearch]: VacancyAdviceGroup.Paid,\n    [VacancyAdvice.UseSearchTop]: VacancyAdviceGroup.Paid,\n    [VacancyAdvice.DecreaseWorkExperience]: VacancyAdviceGroup.Free,\n    [VacancyAdvice.ChangeVacancyName]: VacancyAdviceGroup.Important,\n};\n\nexport const sortAdviceByGroup = (advice: VacancyAdvice[]): VacancyAdvice[] => {\n    const adviceImportant: VacancyAdvice[] = [];\n    const advicePaid: VacancyAdvice[] = [];\n    const adviceFree: VacancyAdvice[] = [];\n\n    for (const item of advice) {\n        switch (VacancyAdviceToGroup[item]) {\n            case VacancyAdviceGroup.Important:\n                adviceImportant.push(item);\n                break;\n            case VacancyAdviceGroup.Paid:\n                advicePaid.push(item);\n                break;\n            case VacancyAdviceGroup.Free:\n                adviceFree.push(item);\n                break;\n        }\n    }\n\n    return [...adviceImportant, ...advicePaid, ...adviceFree];\n};\n\nconst TrlKeys = {\n    buttonHide: 'employer.myVacancies.advice.modal.hide',\n    advice: {\n        [VacancyAdvice.WorkAddress]: {\n            title: 'employer.myVacancies.advice.list.free.ADD_WORK_ADDRESS.title',\n            description: 'employer.myVacancies.advice.list.free.ADD_WORK_ADDRESS.description',\n            link: 'employer.myVacancies.advice.list.free.ADD_WORK_ADDRESS.link',\n        },\n        [VacancyAdvice.ConditionsToDescription]: {\n            title: 'employer.myVacancies.advice.list.free.ADD_CONDITIONS_TO_DESCRIPTION.title',\n            description: 'employer.myVacancies.advice.list.free.ADD_CONDITIONS_TO_DESCRIPTION.description',\n            link: 'employer.myVacancies.advice.list.free.ADD_CONDITIONS_TO_DESCRIPTION.link',\n        },\n        [VacancyAdvice.RequirementsToDescription]: {\n            title: 'employer.myVacancies.advice.list.free.ADD_REQUIREMENTS_TO_DESCRIPTION.title',\n            description: 'employer.myVacancies.advice.list.free.ADD_REQUIREMENTS_TO_DESCRIPTION.description',\n            link: 'employer.myVacancies.advice.list.free.ADD_REQUIREMENTS_TO_DESCRIPTION.link',\n        },\n        [VacancyAdvice.ResponsibilitiesToDescription]: {\n            title: 'employer.myVacancies.advice.list.free.ADD_RESPONSIBILITIES_TO_DESCRIPTION.title',\n            description: 'employer.myVacancies.advice.list.free.ADD_RESPONSIBILITIES_TO_DESCRIPTION.description',\n            link: 'employer.myVacancies.advice.list.free.ADD_RESPONSIBILITIES_TO_DESCRIPTION.link',\n        },\n        [VacancyAdvice.SalaryCloserToMarker]: {\n            title: 'employer.myVacancies.advice.list.important.MAKE_SALARY_CLOSER_TO_MARKET.title',\n            description: 'employer.myVacancies.advice.list.important.MAKE_SALARY_CLOSER_TO_MARKET.description',\n            link: 'employer.myVacancies.advice.list.important.MAKE_SALARY_CLOSER_TO_MARKET.link',\n        },\n        [VacancyAdvice.UseStandardPlus]: {\n            title: 'employer.myVacancies.advice.list.paid.USE_STANDARD_PLUS.title',\n            description: 'employer.myVacancies.advice.list.paid.USE_STANDARD_PLUS.description',\n            link: 'employer.myVacancies.advice.list.paid.USE_STANDARD_PLUS.link',\n        },\n        [VacancyAdvice.PublishSalary]: {\n            title: 'employer.myVacancies.advice.list.important.PUBLISH_SALARY.title',\n            description: 'employer.myVacancies.advice.list.important.PUBLISH_SALARY.description',\n            link: 'employer.myVacancies.advice.list.important.PUBLISH_SALARY.link',\n        },\n        [VacancyAdvice.EmployerContacts]: {\n            title: 'employer.myVacancies.advice.list.free.ADD_EMPLOYER_CONTACTS.title',\n            description: 'employer.myVacancies.advice.list.free.ADD_EMPLOYER_CONTACTS.description',\n            link: 'employer.myVacancies.advice.list.free.ADD_EMPLOYER_CONTACTS.link',\n        },\n        [VacancyAdvice.UseResumeSearch]: {\n            title: 'employer.myVacancies.advice.list.paid.USE_RESUME_SEARCH.title',\n            description: 'employer.myVacancies.advice.list.paid.USE_RESUME_SEARCH.description',\n            link: 'employer.myVacancies.advice.list.paid.USE_RESUME_SEARCH.link',\n        },\n        [VacancyAdvice.UseSearchTop]: {\n            title: 'employer.myVacancies.advice.list.paid.USE_SEARCH_TOP.title',\n            description: 'employer.myVacancies.advice.list.paid.USE_SEARCH_TOP.description',\n            link: 'employer.myVacancies.advice.list.paid.USE_SEARCH_TOP.link',\n        },\n        [VacancyAdvice.DecreaseWorkExperience]: {\n            title: 'employer.myVacancies.advice.list.free.DECREASE_WORK_EXPERIENCE.title',\n            description: 'employer.myVacancies.advice.list.free.DECREASE_WORK_EXPERIENCE.description',\n            link: 'employer.myVacancies.advice.list.free.DECREASE_WORK_EXPERIENCE.link',\n        },\n        [VacancyAdvice.ChangeVacancyName]: {\n            title: 'employer.myVacancies.advice.list.important.CHANGE_VACANCY_NAME.title',\n            description: 'employer.myVacancies.advice.list.important.CHANGE_VACANCY_NAME.description',\n            link: 'employer.myVacancies.advice.list.important.CHANGE_VACANCY_NAME.link',\n        },\n    },\n    currencyRUR: 'RUR',\n};\n\nconst renderIcon = (adviceGroup: VacancyAdviceGroup) => {\n    switch (adviceGroup) {\n        case VacancyAdviceGroup.Paid:\n            return <Icon view={IconView.Bolt} initial={IconColor.Violet50} scale={IconScale.Medium} />;\n        case VacancyAdviceGroup.Important:\n            return (\n                <Icon\n                    view={IconView.Exclamation}\n                    initial={IconColor.Red50}\n                    scale={IconScale.Medium}\n                    shape={IconShape.Triangle}\n                />\n            );\n        case VacancyAdviceGroup.Free:\n        default:\n            return <Icon view={IconView.Info} initial={IconColor.Gray50} scale={IconScale.Medium} />;\n    }\n};\n\nconst getLinkUrl = (adviceItem: VacancyAdvice, vacancyId: number) => {\n    switch (adviceItem) {\n        case VacancyAdvice.UseSearchTop:\n            return `/vacancy/${vacancyId}?runAction=useSearchTop`;\n        case VacancyAdvice.UseStandardPlus:\n            return `/vacancy/${vacancyId}?runAction=upgrade`;\n        case VacancyAdvice.UseResumeSearch:\n            return (\n                `/search/resume?vacancy_id=${vacancyId}&order_by=relevance` +\n                '&search_period=365&from=my_vacancy_list_advice_modal'\n            );\n        case VacancyAdvice.ChangeVacancyName:\n            return (\n                `/employer/statistics/competitor_analysis/vacancy/${vacancyId}` +\n                '?from=employer_vacancies&activeTab=competitorsAnalysis'\n            );\n        default:\n            return `https://hh.ru/employer/vacancy/edit/${String(vacancyId)}`;\n    }\n};\n\nconst formatSalary = (marketSalary: VacancyAdviceMarketSalary) => {\n    if (!marketSalary.from || !marketSalary.to) {\n        return null;\n    }\n    return `: ${String(formatToInt(marketSalary.from))} ${EN_DASH} ${String(formatToInt(marketSalary.to))}`;\n};\n\nconst HIDE_ADVICE_URL = '/shards/employer/vacancies/advice/hide';\n\ninterface FormValues {\n    vacancyId: number;\n    adviceCode: VacancyAdvice;\n}\n\ndeclare global {\n    interface FetcherPostApi {\n        [HIDE_ADVICE_URL]: {\n            queryParams: void;\n            body: FormValues;\n            response: void;\n        };\n    }\n}\n\nconst VacancyAdviceItem: TranslatedComponent<VacancyAdviceItemProps> = ({\n    adviceItem,\n    hideAdviceItem,\n    marketSalary,\n    vacancyId,\n    trls,\n}) => {\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref.current) {\n            Analytics.sendHHEventElementShown(ref.current, {\n                name: 'employer_vacancies_advice_item',\n                advice: adviceItem,\n                vacancyId,\n            });\n        }\n    }, [adviceItem, vacancyId]);\n\n    return (\n        <>\n            <div\n                ref={ref}\n                className={classnames(styles.vacancyAdviceItem, {\n                    [styles.vacancyAdviceItemFree]: VacancyAdviceToGroup[adviceItem] === VacancyAdviceGroup.Free,\n                    [styles.vacancyAdviceItemImportant]:\n                        VacancyAdviceToGroup[adviceItem] === VacancyAdviceGroup.Important,\n                    [styles.vacancyAdviceItemPaid]: VacancyAdviceToGroup[adviceItem] === VacancyAdviceGroup.Paid,\n                })}\n            >\n                <div className={styles.vacancyAdviceItemLine}>\n                    <div>\n                        <Text strong>\n                            {trls[TrlKeys.advice[adviceItem].title]}\n                            {adviceItem === VacancyAdvice.SalaryCloserToMarker &&\n                            marketSalary.from &&\n                            marketSalary.to ? (\n                                <>\n                                    {formatSalary(marketSalary)} {trls[TrlKeys.currencyRUR]}\n                                </>\n                            ) : null}\n                        </Text>\n                        <VSpacing base={1} />\n                        {trls[TrlKeys.advice[adviceItem].description]}\n                    </div>\n                    <div className={styles.vacancyAdviceItemIcon}>{renderIcon(VacancyAdviceToGroup[adviceItem])}</div>\n                </div>\n                <VSpacing base={5} />\n                <div className={styles.vacancyAdviceItemLine}>\n                    <BlokoLink\n                        href={getLinkUrl(adviceItem, vacancyId)}\n                        target=\"_blank\"\n                        disableVisited\n                        onClick={() => {\n                            Analytics.sendHHEventButtonClick('employer_vacancies_advice_item_link', {\n                                vacancyId,\n                                advice: adviceItem,\n                            });\n                        }}\n                    >\n                        {trls[TrlKeys.advice[adviceItem].link]}\n                    </BlokoLink>\n                    <BlokoLink\n                        Element={Button}\n                        kind={LinkKind.Secondary}\n                        onClick={() => {\n                            Analytics.sendHHEventButtonClick('employer_vacancies_advice_item_hide', {\n                                vacancyId,\n                                advice: adviceItem,\n                            });\n                            fetcher\n                                .postFormData('/shards/employer/vacancies/advice/hide', {\n                                    vacancyId,\n                                    adviceCode: adviceItem,\n                                })\n                                .catch(console.error);\n                            hideAdviceItem(adviceItem);\n                        }}\n                    >\n                        {trls[TrlKeys.buttonHide]}\n                    </BlokoLink>\n                </div>\n            </div>\n            <VSpacing base={4} />\n        </>\n    );\n};\n\nexport default translation(VacancyAdviceItem);\n","import { useState } from 'react';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport Modal, { ModalContent, ModalHeader, ModalTitle } from 'bloko/blocks/modal';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { VacancyAdviceInfo } from 'lux/models/employerVacancies/vacancy.types';\nimport { VacancyAdvice } from 'lux/models/vacancyCreate/vacancyAdvices.types';\n\nimport VacancyAdviceItem, {\n    sortAdviceByGroup,\n} from 'lux/components/VacancyModals/VacancyAdviceModal/VacancyAdviceItem';\n\nimport styles from './vacancyAdviceModal.less';\n\nconst TrlKeys = {\n    title: 'employer.myVacancies.advice.modal.title',\n};\n\nconst VacancyAdviceModal: TranslatedComponent<\n    VacancyAdviceInfo & {\n        vacancyId: number;\n        vacancyName: string;\n        isVisible: boolean;\n        setAdvice: (advice: VacancyAdvice[]) => void;\n        handleCloseModal: () => void;\n    }\n> = ({ advice, setAdvice, marketSalary, vacancyId, vacancyName, isVisible, handleCloseModal, trls }) => {\n    const [modalAdvice, setModalAdvice] = useState<VacancyAdvice[]>(advice);\n    const adviceSorted = sortAdviceByGroup(modalAdvice);\n\n    const hideAdviceItem = (adviceItem: VacancyAdvice) => {\n        const newAdvice = modalAdvice.filter((currentAdviceItem: VacancyAdvice) => currentAdviceItem !== adviceItem);\n        setModalAdvice(newAdvice);\n        setAdvice(newAdvice);\n        if (newAdvice.length === 0) {\n            handleCloseModal();\n        }\n    };\n\n    return (\n        <Modal\n            visible={isVisible}\n            onClose={() => {\n                handleCloseModal();\n                Analytics.sendHHEvent('employer_vacancies_advice_modal_close', {\n                    vacancyId,\n                });\n            }}\n            useBottomSheet\n        >\n            <ModalHeader outlined>\n                <ModalTitle>{trls[TrlKeys.title]}</ModalTitle>\n                <VSpacing base={3} />\n                <Text importance={TextImportance.Tertiary}>{vacancyName}</Text>\n                <VSpacing base={3} />\n            </ModalHeader>\n            <ModalContent>\n                <div className={styles.vacancyAdviceWrapper}>\n                    {adviceSorted.map((item) => (\n                        <VacancyAdviceItem\n                            key={item}\n                            adviceItem={item}\n                            vacancyId={vacancyId}\n                            marketSalary={marketSalary}\n                            hideAdviceItem={hideAdviceItem}\n                        />\n                    ))}\n                </div>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default translation(VacancyAdviceModal);\n","import { memo, useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ArchiveModal from 'lux/components/VacancyModals/Archive';\nimport AutoProlongationModal from 'lux/components/VacancyModals/AutoProlongation';\nimport AutoPublicationPreviewModal from 'lux/components/VacancyModals/AutoPublication';\nimport DisableAutoPublicationModal from 'lux/components/VacancyModals/AutoPublication/DisableAutoPublicationModal';\nimport AutoUpdateModal from 'lux/components/VacancyModals/AutoUpdateModal';\nimport GroupAutoUpdateSummary from 'lux/components/VacancyModals/AutoUpdateModal/GroupAutoUpdateSummary';\nimport RemoveAutoUpdateModal from 'lux/components/VacancyModals/AutoUpdateModal/Remove';\nimport UpdatesSchedule from 'lux/components/VacancyModals/AutoUpdateModal/UpdatesSchedule';\nimport AutoUpdateWarningModal from 'lux/components/VacancyModals/AutoUpdateModal/Warning';\nimport BuyOptionModal from 'lux/components/VacancyModals/BuyOptionModal';\nimport HiringPlan from 'lux/components/VacancyModals/HiringPlan';\nimport ProlongateModal from 'lux/components/VacancyModals/Prolongation';\nimport TransferModal from 'lux/components/VacancyModals/Transfer';\nimport TransferDraftsModal from 'lux/components/VacancyModals/TransferDrafts';\nimport UpgradeModal from 'lux/components/VacancyModals/UpgradeModal';\nimport VacancyAdviceModal from 'lux/components/VacancyModals/VacancyAdviceModal';\nimport VideoInterviewModal from 'lux/components/VacancyModals/VideoInterviewModal';\nimport {\n    ADD_MODAL,\n    CLOSE_MODAL,\n    MODAL_REMOVE_AUTO_UPDATE,\n    MODAL_ARCHIVE,\n    MODAL_AUTO_PROLONG,\n    MODAL_AUTO_UPDATE,\n    MODAL_AUTO_UPDATE_SUMMARY,\n    MODAL_AUTO_UPDATE_WARNING,\n    MODAL_PROLONGATE,\n    MODAL_TRANSFER,\n    MODAL_UPDATES_SCHEDULE,\n    MODAL_UPGRADE,\n    MODAL_AUTO_PUBLICATION_DISABLE,\n    MODAL_AUTO_PUBLICATION_PREVIEW,\n    MODAL_VIDEOINTERVIEW,\n    MODAL_BUY_OPTION,\n    MODAL_HIRING_PLAN,\n    MODAL_TRANSFER_DRAFTS,\n    MODAL_VACANCY_ADVICE,\n} from 'lux/components/VacancyModals/constants';\n\nexport const modalReducer = (state, action) => {\n    switch (action.type) {\n        case ADD_MODAL:\n            return action.payload;\n\n        case CLOSE_MODAL:\n            return {};\n\n        default:\n            return state;\n    }\n};\n\nconst MODAL_COMPONENTS = {\n    [MODAL_REMOVE_AUTO_UPDATE]: RemoveAutoUpdateModal,\n    [MODAL_ARCHIVE]: ArchiveModal,\n    [MODAL_AUTO_PROLONG]: AutoProlongationModal,\n    [MODAL_AUTO_UPDATE]: AutoUpdateModal,\n    [MODAL_AUTO_UPDATE_SUMMARY]: GroupAutoUpdateSummary,\n    [MODAL_AUTO_UPDATE_WARNING]: AutoUpdateWarningModal,\n    [MODAL_PROLONGATE]: ProlongateModal,\n    [MODAL_TRANSFER]: TransferModal,\n    [MODAL_UPDATES_SCHEDULE]: UpdatesSchedule,\n    [MODAL_UPGRADE]: UpgradeModal,\n    [MODAL_AUTO_PUBLICATION_DISABLE]: DisableAutoPublicationModal,\n    [MODAL_AUTO_PUBLICATION_PREVIEW]: AutoPublicationPreviewModal,\n    [MODAL_VIDEOINTERVIEW]: VideoInterviewModal,\n    [MODAL_BUY_OPTION]: BuyOptionModal,\n    [MODAL_HIRING_PLAN]: HiringPlan,\n    [MODAL_TRANSFER_DRAFTS]: TransferDraftsModal,\n    [MODAL_VACANCY_ADVICE]: VacancyAdviceModal,\n};\n\nconst MODAL_FADING_TIME = 150;\n\nconst Modals = ({ handleCloseModal, dispatchModal, dispatchCheckVacancy, modalData: { modalType, data = {} } }) => {\n    const [isModalVisible, setModalVisible] = useState(false);\n    const gracefulCloseModal = useCallback(() => {\n        setModalVisible(false);\n        setTimeout(handleCloseModal, MODAL_FADING_TIME);\n    }, [handleCloseModal]);\n\n    useEffect(() => {\n        if (modalType) {\n            setModalVisible(true);\n        }\n    }, [modalType]);\n\n    if (!MODAL_COMPONENTS[modalType]) {\n        return null;\n    }\n\n    const ModalComponent = MODAL_COMPONENTS[modalType];\n\n    return (\n        <ModalComponent\n            isVisible={isModalVisible}\n            handleCloseModal={gracefulCloseModal}\n            dispatchModal={dispatchModal}\n            dispatchCheckVacancy={dispatchCheckVacancy}\n            {...data}\n        />\n    );\n};\n\nModals.propTypes = {\n    dispatchModal: PropTypes.func,\n    handleCloseModal: PropTypes.func,\n    dispatchCheckVacancy: PropTypes.func,\n    modalData: PropTypes.shape({\n        type: PropTypes.string,\n        data: PropTypes.object,\n        modalType: PropTypes.string,\n    }),\n};\n\nexport default memo(Modals);\n","export enum StateId {\n    Consider = 'consider',\n    PhoneInterview = 'phone_interview',\n    Assessment = 'assessment',\n    Interview = 'interview',\n    Offer = 'offer',\n    Hired = 'hired',\n    Discard = 'discard_by_employer',\n}\n","import NumberFormatter from 'bloko/common/numberFormatter';\n\nimport { NARROW_NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\n/**\n * Форматирует число в удобный для чтения формат. Пример '12 345'\n */\nconst formatToInt = (value: number | null | undefined): string | null => {\n    if (value === null || value === undefined) {\n        return null;\n    }\n    const result = Math.round(value);\n    return NumberFormatter.format(String(result), {\n        groupSeparator: NARROW_NON_BREAKING_SPACE,\n        decimalLength: 0,\n    });\n};\n\nexport default formatToInt;\n"],"names":["BottomSheetHeader","children","stretched","paddingLeft","paddingRight","size","TrlKeys","nominative","genitive","AutoPublicationBillInfo","trls","billUid","cartId","useGenitive","Element","Link","typography","TextTypography","to","updateUrl","format","translation","createContext","checkedDrafts","dispatchCheckDraft","filters","DEFAULT_FILTERS_VALUES","dispatchFilter","CHECK_SINGLE","CHECK_ALL","UNCHECK_ALL","FILTER_CHECKED","state","type","payload","itemsIds","ids","concat","itemId","includes","filter","id","every","employerManagerAction","makeSetStoreField","groupId","async","clusters","fetcher","params","errror","console","error","managerClusters","prepareManagerCluster","availableFilters","getAvailableFiltersByClusters","newFilters","intersectFiltersAndAvailableFilters","dispatch","SET_FILTERS","currentGroupId","groupsResponse","e","updateVacanciesGroups","groups","managerVacanciesGroups","CHECK_AREA","CHECK_MANAGER","CHECK_METALLIC","CHECK_VACANCY","CHECK_PREMODERATION","VACANCY_NAME","CLEAR_CHECKS","getChecked","value","Array","isArray","action","vacancyName","areaId","employerManagerId","vacancyMetallic","vacancyType","premoderateStatus","restFilters","Object","keys","reduce","result","filterKey","getFullName","name","isOwnVacancies","ownName","lastName","firstName","middleName","getAreaGroup","areaCluster","allAreas","childrenAreas","isAreaGroup","groupName","isArea","getComplexClusterData","isComposite","clusterGroups","clusterData","preparedData","map","text","data","suggest","createStaticDataProvider","popup","fromTree","raw","managerCluster","employerManagerCluster","premoderationStatusCluster","vacancyMetallicCluster","vacancyTypeCluster","area","managers","metallic","vacancy","premoderation","isSimpleFilter","areaData","managersData","Set","isAvailableFiltersHasValue","key","checkableFilters","filterName","has","IFrame","forwardRef","ref","src","callbacks","rest","handlers","useEffect","postMessage","usePostMessages","propTypes","PropTypes","useAutoRenewalModal","vacancyId","autoProlongationCanBeCanceled","dispatchModal","isEdit","isLoading","setLoading","onClose","isGroup","afterSuccessAction","useDispatch","useCallback","modalType","MODAL_AUTO_UPDATE_WARNING","MODAL_AUTO_UPDATE","renewalResponse","axios","err","showDefaultError","renewalInfo","headers","split","renewalSteps","values","unscheduled","scheduled","failedToUpdate","forbidden","vacancies","Number","ADD_MODAL","length","MODAL_AUTO_UPDATE_SUMMARY","prolongationFailureReason","singleVacancyProlongationFailureReason","singleRenewalInfo","autoRenewal","AutoUpdateAction","Component","triggerType","vacanciesIds","additionalAnalyticsParams","icon","useState","permissions","useSelector","triggerName","iconProps","getMenuButtonIconProps","openModal","onTrigger","isPermitted","UPDATE_CREATE_PERMISSION","batchLength","autoUpdate","FreeRenewalTip","lastFreeRenewal","freeRenewalInterval","nextFreeRenewalInterval","lastActivation","interval","nextActivation","addMinutes","differenceInSeconds","Date","getNextFreeRenewalInterval","hours","roundedHours","Math","floor","minutes","roundedMinutes","ceil","formatToReactComponent","many","some","one","NON_BREAKING_SPACE","fetchUpdateInfoSuccess","ProlongateActionComponent","managerVacancies","fetchUpdateInfo","addNotification","freeRenewalInfo","availableVacancyActions","displayInOwnColumn","actionType","breakpoint","useBreakpoint","canShowHoverTip","Breakpoint","isFreeRenewalAvailable","vacanciesToProlongate","useMemo","list","suggestProlongate","update","MODAL_PROLONGATE","freeRenewalData","loadUpdateInfo","then","VACANCY_ACTION_ERROR","placement","TipPlacement","render","host","document","body","renewal","isRequired","prolongate","connect","updateInfo","BUTTON_ICONS","archive","FolderOutlinedSize16","edit","PenSquareOutlinedSize16","CalendarOutlinedSize16","duplicate","SquaresIntersectedSize16","upgrade","AstrostarOutlinedSize16","ArrowUpOutlinedSize16","videointerview","LinkOutlinedSize16","tirggerName","getMenuButtonIconByName","iconPosition","ButtonIconPosition","undefined","withPurchasing","agreementId","location","getState","item","canEnableAutoProlongation","canDisableAutoProlongation","response","pathname","match","push","query","VACANCY_AUTO_PROLONGATION_SUCCESS","AUTO_PROLONGATION_PURCHASE_SUCCESS","VACANCY_AUTO_PROLONGATION_SUCCESSES","AUTO_PROLONGATION_PURCHASE_SUCCESSES","updateManagerVacancies","VACANCY_AUTO_PROLONGATION_ERROR","VACANCY_AUTO_PROLONGATION_ERRORS","RenewalObjectType","publicationType","scheduleTypesWithUpdatesCount","closestPossibleProlongation","maxLastUpdateDateTime","WILDCARD","ANOTHER_CANDIDATE_ID","onMoveCandidatesToHired","resumeHash","StateId","updateCandidatesWithoutHHResume","candidatesWithoutHHResume","hiredWithoutResumeCount","getHiringPlan","HiringSurvey","visible","isVacancyArchived","isVacancyView","onTriggerUxFeedbackSurvey","inputValue","setInputValue","candidatesRef","useRef","loading","candidates","setCandidates","domain","useSelectorNonNullable","topLevelDomain","vacancyHiringPlans","hiredWithoutResumeState","setHiredWithoutResumeState","isOtherCandidatesInputVisible","setOtherCandidatesInputVisible","setResult","isHiringPlanEnabledOnArchivedVacancy","setHiringPlanEnabledOnArchivedVacancy","isMobile","hiringPlan","Promise","all","excludeHired","String","plannedCount","current","employerHiringInterviewArchiveElementShown","resumeIdList","join","candidate","hired","prepareData","dataProvider","createRemoteDataProvider","checkItem","candidateId","modalTitle","modalLeftButtons","className","styles","Checkbox","checked","onChange","Text","NumberInput","allowNegative","decimalLength","onBlur","Button","mode","ButtonMode","style","ButtonStyle","onClick","val","MinusCircleOutlinedSize24","PlusCircleOutlinedSize24","modalRightButtons","disabled","employerHiringInterviewArchiveButtonClick","hash","catch","modalContent","Card","paddingBottom","Loader","layer","SuggestLayer","itemContent","find","Input","I","clearable","placeholder","paddingTop","target","LinkStyle","href","title","Modal","showCloseButton","titleSize","leftButtons","rightButtons","BottomSheet","header","footer","BottomSheetFooter","CLOSABLE_EVENTS","NON_CLOSABLE_ACTIONS","sendSkillazEventAnalytics","eventId","labelPageId","Analytics","goal","labelEventId","labelEventType","VideoInterviewModal","handleCloseModal","isVisible","authToken","isModalInit","setModalInit","request","iframeSrc","preparedSrc","window","globalVars","skillazURL","getIframeSrc","iframeRef","iframeSizes","width","height","authorizeIframe","event","contentWindow","handleIframeEvents","origin","isSkillazOrigin","VIDEO_INTERVIEW_NOTIFICATIONS","shouldCloseIframe","addEventListener","removeEventListener","onLoad","memo","ArchiveVacancyApplicantsFeedback","employerManager","message","setMessage","base","layout","modalButtons","vacancyIds","feedbackSent","DEFAULT_ERROR","reason","foundHere","foundNotHere","otherReason","warning","cancel","toArchive","POSTFIX_NAME","ARCHIVE_REASONS","qa","ArchiveModal","vacanciesToArchiveCount","archivationReasonRequired","archivationReason","archivationReasonError","archivationSubmitError","onSelectArchivationReason","onSubmit","archiveModalTitle","trl","hasValue","archiveModalContent","Radio","invalid","hostname","CardStyle","padding","archiveModalButtons","fetchArchiveVacancy","additional","ARCHIVE_VACANCY_SUCCESS","count","daysUntilReadOnly","Features","Archive","onArchiveSuccess","features","userType","employerRegistrationTimeInDelta","isArchivedRef","responseQueryRef","isFeedbackSentRef","setArchivationReason","setArchivationSubmitError","setArchivationReasonError","showHiringSurvey","setShowHiringSurvey","showApplicantsFeedback","setShowApplicantsFeedback","useArchiveVacancyFetcher","UserType","enableHiringSurvey","handleSelectArchivationReason","handleTriggerUxFeedbackSurvey","UXFeedback","handleCloseModalWithUxFeedbackSurvey","isFeedbackSent","responseQuery","handleCloseHiringSurvey","handleCloseArchiveVacancyApplicantsFeedback","handleSubmit","modalArchiveButtonButtonClick","vacancyIdList","ACCOUNT_FORMAT_STRING","PayerAccountSelect","accounts","minimumValueInCents","selectProps","selectedAccount","setSelectedAccount","selectItem","selected","availableMoney","emptyPlaceholder","CustomSelectLayer","account","number","payerName","currency","CustomSelectOption","FormatMoney","CustomSelectOptionSecondaryText","AutoProlongationPurchase","showError","onSelect","publicationTypes","totalCost","totalCount","agreements","currencyName","currencies","code","publicationsNeeded","publicationsOne","publicationsSome","publicationsMany","index","Fragment","accountDescription","H1","lite","Strings","FormError","show","accountError","publicationError","requirements","purchaseRequired","purchaseInfo","shouldBePurchased","entries","AutoProlongation","showAgreementsError","setShowAgreementsError","selectedAgreement","setSelectedAgreement","planLoading","setPlanLoading","purchaseLoading","setPurchaseLoading","router","modalRef","usePrepareRequirements","vacancy_id","handleSubmitCommon","eventName","vacancyAutoProlongation","handleSubmitPlan","handleSubmitPurchase","handleAgreementSelect","handleCancel","ModalHeader","outlined","ModalTitle","info","ModalFooter","scale","LoadingScale","enableWithoutPurchasing","kind","ButtonKind","buyAndEnable","enable","vacancyUpgrades","AutoPublication","draftId","billInfo","printButtonUrl","urlParser","print","showHidden","printButton","TextStyle","preview","VacancyPreview","autoWidth","DisableAutoPublicationModal","activeGroupId","managerVacanciesActiveGroupId","handleAutoPublicationDisable","AUTO_PUBLICATION_DISABLED","managerId","parseInt","removeAutoPublicationDraft","fetchAndUpdateVacanciesCount","disableAutoPublication","fetchGroupsInfo","content","controls","renderPlaceholder","view","IconView","initial","IconColor","IconScale","suppressHydrationWarning","formatDate","DateSelect","start","end","date","setDate","isDisabled","startOfDay","getTime","placeholderTemplate","eachDayOfInterval","nextDate","Summary","updatesCount","summary","disableVisited","conditions","FREE","STANDARD","STANDARD_PROMO","STANDARD_PLUS","STANDARD_ANONYMOUS","STANDARD_ADVERTISING","PREMIUM","PREMIUM_ANONYMOUS","PREMIUM_ADVERTISING","STANDARD_PLUS_ANONYMOUS","timeIntervals","formatHour","hour","padStart","formatTime","IconKind","TimeSelect","time","setTime","VacanciesWithLocation","covered","isCovered","toggleCovered","setCovered","useToggleState","shownVacanciesCount","setShownVacanciesCount","allVacancies","vacanciesToDisplay","slice","leftToDisplay","handleShowMore","conversionTitle","vacancySome","vacancyMany","appearance","LinkAppearance","strong","idx","more","vacancyOne","Warnings","NOT_ENOUGH_PERMISSIONS","NOT_ENOUGH_PUBLICATIONS","NOT_ENOUGH_QUOTAS","AutoUpdateModal","updatedIds","currentStep","setCurrentStep","scheduleTypes","firstPossibleDate","lastPossibleDate","timezoneOffsetHours","getTimezoneOffset","employerId","startDate","setStartDate","endDate","setEndDate","scheduleType","setScheduleType","handleChangeScheduleType","getHours","isTimeDisabled","isSameDay","handleCloseWithAnalytics","labelGroupId","labelCurrentStep","formatISO","set","seconds","milliseconds","isMultiSelection","isMultiple","EDIT_AUTO_UPDATE_SCHEDULE","AUTO_UPDATES_SCHEDULED","addUpdateSchedule","labelSubmittedIds","nextStep","updateCountByScheduleType","setUpdateCountByScheduleType","amount","getAutoUpdateCount","setUpdatesCount","publicationsCount","labelVacanciesToUpdate","labelFailedToUpdate","labelStepsCount","titleEdit","titlePlan","importance","TextImportance","timezone","step","bottom","vacanciesGroup","firstDate","firstTime","popularTime","applicantActivityHint","applicantActivityLink","lastDate","sameTime","option","FormItem","baseline","FormSpacer","submit","EVERY_DAY","EVERY_WORKING_DAY","EVERY_WEEK","EVERY_TWO_WEEKS","EVERY_SIXTH_DAY","EVERY_FOURTH_DAY","GroupAutoUpdateSummary","failedIds","dispatchCheckVacancy","hasFailedVacancies","handleCloseUnchecked","ModalContent","xs","s","m","l","container","updatedVacancies","succeeded","renderUpdatedVacancies","failed","failedReason","close","RemoveAutoUpdateModal","expireTime","upgradeManagerVacancy","AUTO_UPDATES_REMOVED","removeSchedule","description","HumanDate","textify","ERRORS_TO_SHOW","formatDateSchedule","UpdatesSchedule","schedule","previousSequentialFailuresCount","scheduledUpdateTimes","plannedExpireTime","nextUpdateWithFailure","failureReason","nextFailureIsTheLast","scheduleParams","shouldShowError","handleRemoveSchedule","preventDefault","MODAL_REMOVE_AUTO_UPDATE","handleOpenEdit","formatWithValue","scheduledInfo","updateHours","onSameMonth","getMonth","toLowerCase","getDate","futureUpdates","nextUpdate","mayCanceled","failureReasons","short","planed","expired","failureMany","failureSome","lastFailure","beforeFailure","full","removePlaned","priceList","month0","month1","month2","month3","month4","month5","month6","month7","month8","month9","month10","month11","AutoUpdateWarningModal","nextModal","showYear","ShowYear","continue","BuyOption","TextSize","listTitle","search","profArea","vacancyOfDay","labelPremium","maxResponses","paths","HiringPlan","rules","vacancyHiringPlanValidationRules","submitForm","updateHasHiringPlan","hasHiringPlan","HIRING_PLAN_UPDATE_SUCCESS","initialValues","submitting","Form","HiringPlanFields","fields","ButtonType","AvailableProlongation","vacancyServiceCode","regionsTrls","unlimited","serviceName","followingRegions","UNAVAILABLE_GROUP_PROP","reasonTrl","UnavailableProlongation","unavailableGroup","separated","getUniqUnavailable","publications","reasons","publication","notUpdateOne","notUpdateSome","notUpdateMany","TRL_SEPARATOR","POPUP_CLASS","SPENDABLE_PROLONGATION_PROP","UNAVAILABLE_PUBLICATIONS_PROP","PROLONGATION_WITH_TYPE_CHANGE_PROP","services","serviceTrl","service","availableServiceTypes","PROMO_PUBLICATION_INFO_PROP","VACANCY_IDS_WITH_FREE_RENEWAL_PROP","VACANCIES_IDS","ProlongateContent","anyVacancyCanBeProlonged","nonProlongableVacancies","hasPublicationsInsufficiency","spendableProlongations","canProlongateAsOtherType","unavailablePublications","vacancyProlongationWithServiceTypeChangeInfo","vacancyIdsWithFreeRenewal","promoPublicationInfo","handleUpdate","isZP","useIsZarplataPlatform","getExperimentGroup","useExperimentGroupCheckFunction","onClickBuyVacancies","renderFreeProlongationBlock","showTitle","freeOfCharge","classnames","renderFreeRenewalTip","needToRenderFreeProlongationTitle","chargeOff","notEnough","buyOrChange","buyVacancies","refresh","freeUnavailablePublications","MetallicVacancyType","withFreeProlongationText","displayFreeProlongationText","EXPERIMENT_GROUP","onlyFreeProlongationText","neededForUpdate","buyProlongation","freeProlongation","promo","regular","promoDescription","Prolongation","totalProlongations","spentPublications","notNeedProlongation","cantBeProlongated","updateVacancy","nonProlongableVacanciesIds","errorTitle","failOne","failMany","titleDataQa","targetMetallic","analyticsLabel","updateIds","renewalId","ignore","updateSome","updateMany","FormHint","autoprolongationNotice","VACANCY_UPDATE_SUCCESS","Transfer","filterEmployerManagerIdList","managersList","currentGroupManagersIdsSet","employerManagers","getGroupManagerIdsSet","managersTree","getTreeCollection","isError","setError","setManager","isSubmitting","setIsSubmitting","useContext","FilterContext","vacanciesCount","selectedMager","getModel","managerToTransfer","targetManagerId","moveManagerVacancies","checkedVacancies","groupManagersIds","moveVacancies","fetchClustersInfo","finally","popupTrl","disabledSubmit","hideOnSubmitClick","singleChoice","collection","TransferDrafts","draftsIds","CheckContext","currentManagerId","draftsCount","removeManagerVacancies","VACANCY_DRAFT_MOVE_SUCCESS","moveDrafts","VacancyAdviceGroup","VacancyAdviceToGroup","VacancyAdvice","Free","Important","Paid","link","renderIcon","adviceGroup","shape","IconShape","getLinkUrl","adviceItem","formatSalary","marketSalary","from","formatToInt","EN_DASH","VacancyAdviceItem","hideAdviceItem","advice","LinkKind","adviceCode","VacancyAdviceModal","setAdvice","modalAdvice","setModalAdvice","adviceSorted","adviceImportant","advicePaid","adviceFree","sortAdviceByGroup","newAdvice","currentAdviceItem","useBottomSheet","modalReducer","CLOSE_MODAL","MODAL_COMPONENTS","MODAL_ARCHIVE","MODAL_AUTO_PROLONG","AutoProlongationModal","ProlongateModal","MODAL_TRANSFER","TransferModal","MODAL_UPDATES_SCHEDULE","MODAL_UPGRADE","UpgradeModal","MODAL_AUTO_PUBLICATION_DISABLE","MODAL_AUTO_PUBLICATION_PREVIEW","AutoPublicationPreviewModal","MODAL_VIDEOINTERVIEW","MODAL_BUY_OPTION","BuyOptionModal","MODAL_HIRING_PLAN","MODAL_TRANSFER_DRAFTS","TransferDraftsModal","MODAL_VACANCY_ADVICE","Modals","modalData","isModalVisible","setModalVisible","gracefulCloseModal","setTimeout","ModalComponent","round","NumberFormatter","groupSeparator","NARROW_NON_BREAKING_SPACE"],"sourceRoot":""}