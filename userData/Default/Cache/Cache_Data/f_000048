{"version":3,"file":"ApplicantNegotiations.315a4fee03b774f99057.js","mappings":"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","sources":["xhh/./webapp-static/js/HH/LoadBannerOnVisibleModule.js","xhh/./webapp-static/js/HHC/EmployerReadStatisticsModule.ts","xhh/./webapp-static/js/Modules/ProxyExternalServiceLoader.ts","xhh/./webapp-static/js/Utils/VisibilityWatcher.js","xhh/./webapp-static/lux/components/Banner/index.tsx","xhh/./webapp-static/lux/components/Banner/AdsExternalBanner.tsx","xhh/./webapp-static/lux/components/Banner/BannerPropType.ts","xhh/./webapp-static/lux/components/Clickme/Wrapper.jsx","xhh/./webapp-static/lux/components/Clickme/List.jsx","xhh/./webapp-static/lux/components/Clickme/ReferralLink.jsx","xhh/./webapp-static/lux/components/Banner/BannersGroup.jsx","xhh/./webapp-static/lux/components/Clickme/index.jsx","xhh/./webapp-static/lux/components/CodeInjector/ContainerForMicroFrontend.tsx","xhh/./webapp-static/lux/components/Conversion/DateOnly.tsx","xhh/./webapp-static/lux/hooks/useIsClient.ts","xhh/./webapp-static/lux/models/banners.ts","xhh/./webapp-static/lux/models/employer/vacancyresponses/calls.types.ts","webpack://xhh/./webapp-static/lux/components/Applicant/JobSearchStatus/JobSearchStatusBanner/job-search-status-banner.less?9b08","xhh/./webapp-static/lux/components/Applicant/JobSearchStatus/JobSearchStatusBanner/index.tsx","xhh/./webapp-static/lux/components/AutosearchMessengers/AutoSearchMessengersTip.jsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/FiltersByActive.tsx","xhh/./webapp-static/lux/models/applicantNegotiationTopic.types.ts","webpack://xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/responses.less?37fa","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/BatchAction.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/FiltersByStatus.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListBanner.tsx","xhh/./webapp-static/lux/modules/callTracking/utils.ts","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/doActionWithApplicantNegotiation.ts","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListAction.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/EmployerStats.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListTopicStatus.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListStatsColumn.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/PendingAutoActionSurveyTag.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ViewSummaryAction.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListRow.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/mapListOfObjects.ts","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/List.tsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantSuitableVacancies/Header.jsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/ApplicantSuitableVacancies/index.jsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/components/Surveys/index.jsx","xhh/./webapp-static/lux/pages/ApplicantNegotiations/ApplicantNegotiations.route.jsx"],"sourcesContent":["import Banners from 'HHC/Banners';\nimport visibilityWatcher from 'Utils/VisibilityWatcher';\n/**\n * Подгружает баннер в ноду компонента, при видимости этой ноды.\n *\n * @param {String|Number}   id              ID баннера\n * @param {Array}           ids             ID баннеров, имеет приоритет перед id\n * @param {String}          [templateName]  Имя шаблона для баннера, если имя шаблона не указано, то баннер будет\n *                                          добавлен в текущую ноду без применения шаблонов\n *\n * @name HH/LoadBannerOnVisibleModule\n * @constructor\n */\nexport default (element, params) => {\n    window.requestIdleCallback(() => {\n        visibilityWatcher.init({\n            element,\n            onVisible() {\n                const { ids, id, templateName, adfoxParams } = params;\n                let banners = [id];\n                if (ids) {\n                    banners = ids;\n                }\n                Banners.create(element, banners, templateName, adfoxParams);\n            },\n        });\n    });\n};\n","function getCoordinatesForPercent(percent: number) {\n    const radianValue = 2 * Math.PI * (percent / 100);\n    const x = Math.cos(radianValue);\n    const y = Math.sin(radianValue);\n    return [x, y].map((value) => Math.round(value * 100) / 100);\n}\nexport default {\n    getPath: (percent: number): string => {\n        const largeArcFlag = percent > 50 ? 1 : 0;\n        const [coordX, coordY] = getCoordinatesForPercent(percent);\n        return `M 1 0 A 1 1 0 ${largeArcFlag} 1 ${coordX} ${coordY || -0.001} L 0 0`;\n    },\n};\n","import { Dispatch } from 'react';\nimport { DefaultRootState } from 'react-redux';\n\nimport { Action } from '@hh.ru/redux-create-reducer';\nimport StatsSender from '@hh.ru/stats-sender';\n\nimport {\n    MicroFrontendServiceName,\n    SerivceInfo,\n    RemoteServiceName,\n    deleteMicroFrontend,\n} from 'lux/models/microFrontends';\nimport { addUserNotifications } from 'lux/models/userNotifications';\nimport fetcher from 'lux/modules/fetcher';\nimport { getStore } from 'lux/modules/typedStore';\n\ninterface ServiceResponse {\n    renderResult: string;\n    inlineScript?: string;\n    styles?: string[];\n    scripts: string[];\n    globalServiceName: MicroFrontendServiceName;\n    remoteServiceName?: RemoteServiceName;\n    remoteEntry?: string;\n    isSuccessSSR: boolean;\n    proxiedState?: Partial<DefaultRootState>;\n    noContent?: boolean;\n}\n\ninterface RemoteWebpackModule {\n    init: (moduleName: string) => Promise<() => { default: () => void }>;\n    get: (moduleName: string) => Promise<() => { default: () => void }>;\n    inited: boolean;\n}\n\ndeclare global {\n    interface FetcherGetApi {\n        [`SERVICE_URL`]: {\n            response: ServiceResponse;\n            queryParams: unknown;\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-interface\n    interface Window extends Record<RemoteServiceName, RemoteWebpackModule> {}\n}\n\ninterface ScriptAttributes {\n    src?: string;\n    type: string;\n    innerHTML?: string;\n    crossOrigin?: string;\n    onload?: () => void;\n    onerror?: (src?: string) => void;\n    remote?: RemoteServiceName;\n}\n\ninterface LinkAttributes {\n    href: string;\n    type: string;\n    rel: string;\n}\n\nconst putLink = (props: LinkAttributes, context: HTMLElement) => {\n    const node = document.createElement('link');\n\n    const promise = new Promise<void>((resolve) => {\n        node.addEventListener('load', () => {\n            resolve();\n        });\n    });\n\n    Object.keys(props).forEach((prop) => {\n        node[prop] = props[prop];\n    });\n\n    context.appendChild(node);\n    return promise;\n};\n\nconst putScript = ({ remote, onerror, onload, ...props }: ScriptAttributes, context: HTMLElement) => {\n    const node = document.createElement('script');\n\n    Object.entries(props).forEach(([prop, value]) => {\n        const attr = prop as Exclude<keyof ScriptAttributes, 'onload' | 'onerror' | 'remote'>;\n        node[attr] = value;\n    });\n\n    if (onload) {\n        node.addEventListener('load', onload);\n    }\n\n    if (onerror) {\n        node.addEventListener('error', () => onerror(props.src));\n    }\n\n    if (remote) {\n        node.dataset.webpack = remote;\n    }\n\n    context.appendChild(node);\n};\n\nconst getRemoteWebpackModuleLink = (remote: RemoteServiceName) => {\n    const linkToRemoteWebpackModule = window[remote];\n    return linkToRemoteWebpackModule;\n};\n\nconst getExistingRemote = (remote: RemoteServiceName | undefined): HTMLScriptElement | null => {\n    if (!remote) {\n        return null;\n    }\n    return document.querySelector(`[data-webpack=\"${remote}\"]`);\n};\n\nconst loadingRemoteEntry: Record<string, Promise<void>> = {};\n\nconst getOrLoadRemote = async (\n    remote: RemoteServiceName,\n    shareScope: string,\n    remoteFallbackUrl: string,\n    container: HTMLElement\n) => {\n    const loadEntry = new Promise<void>((resolve) => {\n        const existingRemote = getExistingRemote(remote);\n        const onload = async () => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            await __webpack_init_sharing__('default');\n            const linkToRemoteWebpackModule = getRemoteWebpackModuleLink(remote);\n\n            if (linkToRemoteWebpackModule.inited) {\n                resolve();\n                return;\n            }\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            // eslint-disable-next-line camelcase,@typescript-eslint/no-unsafe-member-access\n            await linkToRemoteWebpackModule.init(__webpack_share_scopes__[shareScope] as string);\n            linkToRemoteWebpackModule.inited = true;\n            resolve();\n        };\n\n        const onError = (src?: string) => {\n            let remoteScriptResource: PerformanceEntry[] | undefined;\n\n            if (PerformanceObserver?.supportedEntryTypes?.includes?.('resource')) {\n                remoteScriptResource = performance.getEntriesByType('resource').filter((entry) => {\n                    return src ? entry.name.includes(src) : false;\n                });\n            }\n\n            const remoteScriptResourceDuration = remoteScriptResource?.reduce((prev, item) => prev + item.duration, 0);\n\n            const statsSender = new StatsSender('xhh', window.globalVars, '/stat');\n\n            statsSender.sendMetrics({\n                report: 'mf-load-error',\n                value: remoteScriptResourceDuration,\n            });\n        };\n\n        function loadScript() {\n            putScript(\n                {\n                    src: remoteFallbackUrl,\n                    type: 'text/javascript',\n                    crossOrigin: 'anonymous',\n                    onload,\n                    onerror: onError,\n                    remote,\n                },\n                container\n            );\n        }\n\n        if (!(remote in window)) {\n            if (existingRemote) {\n                void loadingRemoteEntry[remote].then(() => {\n                    void onload();\n                });\n            } else {\n                loadScript();\n            }\n        } else {\n            void onload();\n        }\n    });\n\n    loadingRemoteEntry[remote] = loadingRemoteEntry[remote] ?? loadEntry;\n    return loadEntry;\n};\n\ninterface AppOptions {\n    unmountApp?: boolean;\n    container: HTMLDivElement;\n    identifier: string;\n}\n\nexport interface RemoteModule {\n    (options: AppOptions): void;\n}\nexport type RemoteModuleOrNull = RemoteModule | null;\nexport type RemoteModuleWithGlobalServiceNameOrNull = [RemoteModuleOrNull, MicroFrontendServiceName] | null;\n\nconst loggingPlaces: Record<string, { hasDefault: boolean; moduleValue: number }> = {};\n\nconst getRemoteModule = async (\n    remote: RemoteServiceName | undefined,\n    url: string | undefined,\n    container: HTMLDivElement\n): Promise<RemoteModuleOrNull> => {\n    if (remote && url) {\n        try {\n            await getOrLoadRemote(remote, 'default', url, container);\n        } catch (error) {\n            return null;\n        }\n        const linkToRemoteWebpackModule = getRemoteWebpackModuleLink(remote);\n        const factory = await linkToRemoteWebpackModule.get('./App');\n\n        const Module = factory();\n\n        loggingPlaces[container.classList.value] = {\n            hasDefault: true,\n            moduleValue: Module.default.toString().length,\n        };\n\n        return Module.default;\n    }\n\n    return null;\n};\n\nconst getAndLoadARemoteApp = async (\n    remote: RemoteServiceName | undefined,\n    globalServiceName: MicroFrontendServiceName,\n    url: string | undefined,\n    container: HTMLDivElement,\n    identifier: string\n): Promise<RemoteModuleOrNull> => {\n    let initApp = await getRemoteModule?.(remote, url, container);\n\n    if (window.globalServiceVars?.[globalServiceName]?.hasSupportToDestroyApp && initApp) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        initApp = initApp();\n    }\n    initApp?.({ unmountApp: false, container, identifier });\n    return initApp;\n};\n\ntype StateLoaderMapping = {\n    [K in keyof DefaultRootState]?: LoaderFunction<DefaultRootState[K]>;\n};\ntype LoaderFunction<T> = (dispatch: Dispatch<Action>, value: T) => void;\ntype ProxiedState = Partial<DefaultRootState>;\n\nconst STATE_LOADERS_MAPPING: StateLoaderMapping = {\n    userNotifications: (dispatch, value) => {\n        dispatch(addUserNotifications(value));\n    },\n} as const;\n\nconst processProxiedState = async (proxiedState: ProxiedState) => {\n    const store = await getStore();\n    Object.keys(STATE_LOADERS_MAPPING).forEach((storeFieldName) => {\n        const value = proxiedState[storeFieldName];\n        const loader = STATE_LOADERS_MAPPING[storeFieldName];\n        if (value !== undefined && loader) {\n            (loader as LoaderFunction<typeof value>)(store.dispatch, value);\n        }\n    });\n};\n\nconst loadProxyService = async (\n    place: string,\n    serviceInfo: SerivceInfo,\n    container: HTMLDivElement | null,\n    identifier: string,\n    isFullPage?: boolean\n): Promise<RemoteModuleWithGlobalServiceNameOrNull> => {\n    if (serviceInfo === undefined) {\n        return null;\n    }\n    const loadService = async (data: ServiceResponse): Promise<RemoteModuleWithGlobalServiceNameOrNull> => {\n        if (container === null) {\n            return null;\n        }\n\n        container.classList.add(`HH-ProxyExternalServiceLoader-${data.globalServiceName}`);\n\n        if (data.isSuccessSSR && data.renderResult !== '' && data.remoteServiceName) {\n            if (data.inlineScript) {\n                putScript(\n                    {\n                        type: 'text/javascript',\n                        innerHTML: data.inlineScript,\n                    },\n                    container\n                );\n            }\n\n            const moduleApp = await getAndLoadARemoteApp(\n                data.remoteServiceName,\n                data.globalServiceName,\n                data.remoteEntry,\n                container,\n                identifier\n            );\n            return [moduleApp, data.globalServiceName];\n        }\n\n        container.innerHTML = '';\n        const ssrRenderNode = document.createElement('div');\n        ssrRenderNode.innerHTML = data.renderResult;\n        container.appendChild(ssrRenderNode);\n\n        data.styles?.forEach((href) => {\n            const attr: LinkAttributes = { href, type: 'text/css', rel: 'stylesheet' };\n            void putLink(attr, container);\n        });\n\n        if (data.inlineScript) {\n            putScript(\n                {\n                    type: 'text/javascript',\n                    innerHTML: data.inlineScript,\n                },\n                container\n            );\n        }\n\n        data.scripts?.forEach((src) => {\n            putScript({ src: `${src}`, type: 'text/javascript', crossOrigin: 'anonymous' }, container);\n        });\n\n        // TODO Удалить все условие после перехода фронтов на front-static-app >= 1.1.2\n        if (data.remoteEntry) {\n            const notLoadedScript = getExistingRemote(data.remoteServiceName);\n\n            /**\n             * Скрипт, который был вставлен через innerHTML загружен не будет, нужно отличать от случая, когда скрипт\n             * кладет SSR. В случае с SSR мы используем уже загруженный скрипт\n             */\n            if (notLoadedScript) {\n                notLoadedScript.dataset.webpack = '';\n            }\n\n            const moduleApp = await getAndLoadARemoteApp(\n                data.remoteServiceName,\n                data.globalServiceName,\n                data.remoteEntry,\n                container,\n                identifier\n            );\n            return [moduleApp, data.globalServiceName];\n        }\n\n        return null;\n    };\n\n    const renderResult = container?.innerHTML ?? '';\n\n    if ((serviceInfo.isSuccessSSR && renderResult !== '') || serviceInfo.useSSRResult) {\n        return loadService({\n            scripts: serviceInfo.scripts ?? [],\n            styles: serviceInfo.styles ?? [],\n            globalServiceName: serviceInfo.globalServiceName,\n            remoteServiceName: serviceInfo.remoteServiceName,\n            inlineScript: serviceInfo.inlineScript,\n            remoteEntry: serviceInfo.remoteEntry,\n            renderResult: renderResult ?? '',\n            isSuccessSSR: serviceInfo.isSuccessSSR,\n        });\n    }\n\n    let data;\n    try {\n        data = await fetcher.get<'SERVICE_URL'>(serviceInfo.url, {\n            headers: {\n                'X-Proxied-Type': isFullPage ? '' : 'Component',\n                'X-Proxied-Place': place,\n                'X-Proxied-Page-Name': window.globalVars.pageName,\n                'X-Proxied-Hhtm-Source': window.globalVars.analyticsParams.hhtmSource,\n                'X-Static-Version': window.globalVars.build,\n            },\n            params: {},\n        });\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n\n    if (data.noContent) {\n        const store = await getStore();\n        store.dispatch(deleteMicroFrontend(place));\n        return null;\n    }\n\n    void processProxiedState(data.proxiedState || {});\n    return loadService(data);\n};\n\nexport default loadProxyService;\n","/**\n * Утилита следит за видимостью элемента на странице, и запускает калбеки при изменении состояния. <br>\n *\n * @type {Object}\n * @exports Utils/VisibilityWatcher\n */\nconst visibilityWatcher = {\n    /**\n     * Инициализирует вотчер на элементе.\n     *\n     * @param {Object}   options\n     * @param {Element}  options.element   DOM элемент за которым наблюдаем\n     * @param {Function} options.onVisible Функция, которая будет вызвана, когда элемент отобразится\n     *\n     * @member\n     * @method\n     */\n    init(options) {\n        let visible = false;\n        const element = options.element;\n        const checkVisible = () => {\n            if (visible) {\n                return;\n            }\n            if (element.offsetWidth || element.offsetHeight || element.getClientRects().length) {\n                visible = true;\n                options.onVisible();\n                window.removeEventListener('resize', checkVisible);\n                window.removeEventListener('element-displayed', checkVisible);\n                element.dataset.listenersSetted = 'false';\n            } else {\n                visible = false;\n            }\n        };\n        if (options.element.dataset.listenersSetted !== 'true') {\n            window.addEventListener('resize', checkVisible);\n            window.addEventListener('element-displayed', checkVisible);\n            options.element.dataset.listenersSetted = 'true';\n        }\n        checkVisible();\n    },\n};\nexport default visibilityWatcher;\n","import { Component, ReactNode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect, DefaultRootState } from 'react-redux';\n\nimport LoadBannerOnVisibleSignature from 'HH/LoadBannerOnVisibleModule.d';\nimport { YandexAdfoxBannerProps } from 'lux/models/banners/YandexAdfoxBanner.types';\nimport { UserTargeting } from 'lux/models/userTargeting';\n\nlet loadBannerOnVisible: typeof LoadBannerOnVisibleSignature | undefined;\n\nif (!process.env.LUX_SERVER) {\n    /* eslint @typescript-eslint/no-var-requires: \"off\" */\n    /* eslint @typescript-eslint/no-unsafe-member-access: \"off\" */\n    loadBannerOnVisible = require('HH/LoadBannerOnVisibleModule').default as typeof LoadBannerOnVisibleSignature;\n}\n\ninterface BannerProps {\n    /** Индификатор баннера */\n    id: string;\n    /** Название шаблона для баннера */\n    templateName?: string;\n    /** Нода в которую кладется баннер */\n    children?: ReactNode;\n    /** Флаг отмены отправки запросов в баннерную систему */\n    cancelFetchBanners?: boolean;\n    /** Строка текущих get параметров URL */\n    search?: string;\n    /** Строка текущего URL без параметров */\n    pathname?: string;\n    /** Параметры для Yandex adfox баннеров */\n    adfoxParams?: Omit<YandexAdfoxBannerProps, 'id'>;\n    /** Строит пустой див вместо баннера **/\n    isEmpty?: boolean;\n    userTargeting?: UserTargeting;\n}\n\nclass Banner extends Component<BannerProps> {\n    element: HTMLElement | null = null;\n    static defaultProps = {\n        templateName: 'HHC-Banners-Place-Template',\n    };\n\n    componentDidMount() {\n        this.element = this.props.isEmpty ? null : (ReactDOM.findDOMNode(this) as HTMLElement);\n        if (this.element) {\n            this.element.addEventListener('HH-Banners-Init', this.setAutoHeight.bind(this));\n            this.initBanners();\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.element) {\n            this.initBanners();\n        }\n    }\n\n    componentWillUnmount() {\n        this.element?.removeEventListener('HH-Banners-Init', this.setAutoHeight);\n    }\n\n    shouldComponentUpdate(nextProps: BannerProps) {\n        if (nextProps.cancelFetchBanners) {\n            return false;\n        }\n        return nextProps.search !== this.props.search || nextProps.pathname !== this.props.pathname;\n    }\n\n    initBanners() {\n        const { id, templateName, adfoxParams, userTargeting } = this.props;\n        if (this.element) {\n            this.element.style.height = `${this.element.clientHeight}px`;\n            this.element.innerHTML = '';\n        }\n        let adfoxParamsProperty;\n        if (adfoxParams) {\n            adfoxParamsProperty = {\n                ...adfoxParams,\n                type: 'adfox',\n                bannerId: id,\n                place: id,\n                bannerCommonTargeting: userTargeting,\n                bannerAdTargeting: adfoxParams.bannerAdTargeting || {},\n            };\n        }\n        const bannerParams = {\n            id,\n            templateName,\n            adfoxParams: adfoxParamsProperty,\n        };\n\n        loadBannerOnVisible?.(this.element, bannerParams);\n    }\n\n    setAutoHeight = (): void => {\n        if (this.element) {\n            this.element.style.height = 'auto';\n        }\n    };\n\n    render() {\n        return this.props.children || <div />;\n    }\n}\n\nexport default connect((state: DefaultRootState) => ({\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    cancelFetchBanners: state.cancelFetchBanners,\n    userTargeting: state.userTargeting,\n}))(Banner);\n","import type { FC } from 'react';\n\nimport { isExternalBannersRestricted } from 'HHC/Banners';\nimport { useIsBelarus } from 'lux/hooks/useCountries';\nimport { AdsExternalBannerProps } from 'lux/models/banners/AdsExternalBanner.types';\n\nimport Banner from 'lux/components/Banner';\n\nconst AdsExternalBanner: FC<AdsExternalBannerProps> = ({ id, cId, pp, p2, ...adfoxParams }) => {\n    const enableAdfox = pp && p2;\n    const shouldHideExternalBanners = isExternalBannersRestricted(useIsBelarus());\n\n    if (!enableAdfox || shouldHideExternalBanners) {\n        return <Banner key={cId} id={id} isEmpty={shouldHideExternalBanners} />;\n    }\n\n    return (\n        <Banner\n            key={cId}\n            id={id}\n            templateName=\"\"\n            adfoxParams={{\n                pp,\n                p2,\n                cId,\n                ...adfoxParams,\n            }}\n        >\n            <div\n                id={cId}\n                className={`HHC-Banner-${id} HH-Banner-Adfox banner-place banner-place_${id} banner-place-adfox banner-place-adfox_${id}`}\n                data-banner-id={id}\n                data-empty-class=\"banner-place_hide\"\n                data-loaded-class=\"banner-place_show\"\n            />\n        </Banner>\n    );\n};\n\nexport default AdsExternalBanner;\n","import PropTypes from 'prop-types';\n\nexport default PropTypes.shape({\n    id: PropTypes.string,\n});\n","import PropTypes from 'prop-types';\n\nconst Wrapper = ({ children }) => (\n    <div className=\"HHC-Banner-Wrapper clickme\" data-loaded-class=\"clickme_loaded\">\n        {children}\n    </div>\n);\n\nWrapper.propTypes = {\n    children: PropTypes.node,\n};\n\nexport default Wrapper;\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Column from 'bloko/blocks/column';\nimport Gap from 'bloko/blocks/gap';\n\nimport bannerPropType from 'lux/components/Banner/BannerPropType';\n\nimport Clickme from 'lux/components/Clickme';\nimport ClickmeWrapper from 'lux/components/Clickme/Wrapper';\n\nconst HIDE_ON_XS_SCREEN_POSITION = new Set([1, 2]);\nconst HIDE_ON_S_SCREEN_POSITION = 2;\n\nconst List = ({ banners, clickmeReferralLink }) => {\n    if (!banners || banners.length === 0) {\n        return null;\n    }\n    return (\n        <ClickmeWrapper>\n            <Gap bottom>\n                {clickmeReferralLink}\n                <Clickme banners={banners}>\n                    {banners.map(({ id }, index) => (\n                        <Column\n                            key={id}\n                            xs={HIDE_ON_XS_SCREEN_POSITION.has(index) ? '0' : '4'}\n                            s={index === HIDE_ON_S_SCREEN_POSITION ? '0' : '4'}\n                            m=\"4\"\n                            l=\"5\"\n                        >\n                            <div className=\"HHC-Group-Banners-Place\" data-banner-id={id} />\n                        </Column>\n                    ))}\n                </Clickme>\n            </Gap>\n        </ClickmeWrapper>\n    );\n};\n\nList.propTypes = {\n    banners: PropTypes.arrayOf(bannerPropType),\n    clickmeReferralLink: PropTypes.node,\n};\n\nexport default connect(\n    (state) => ({ banners: state.banners }),\n    undefined,\n    (stateProps, dispatchProps, ownProps) => ({\n        banners: stateProps.banners['right-column-clickme'],\n        ...ownProps,\n        ...dispatchProps,\n    })\n)(List);\n","import PropTypes from 'prop-types';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Text, { TextSize } from 'bloko/blocks/text';\n\nimport translation from 'lux/components/translation';\n\nconst ReferralLink = ({ trls }) => (\n    <div className=\"clickme__link-wrapper\">\n        <Link\n            to=\"https://clickme.hh.ru/new/dashboard?utm_source=block_referral\"\n            rel=\"noopener noreferrer\"\n            className=\"clickme__link\"\n            target=\"_blank\"\n        >\n            <Text size={TextSize.Small}>{trls[ReferralLink.trls.link]}</Text>\n        </Link>\n    </div>\n);\n\nReferralLink.trls = {\n    link: 'clickme.adv.here',\n};\n\nReferralLink.propTypes = {\n    trls: PropTypes.object,\n};\n\nexport default translation(ReferralLink);\n","import { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nlet loadBannerOnVisible = () => {};\n\nif (!process.env.LUX_SERVER) {\n    loadBannerOnVisible = require('HH/LoadBannerOnVisibleModule').default;\n}\n\nclass BannersGroup extends Component {\n    static propTypes = {\n        /** Индификаторы баннеров */\n        banners: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.string })),\n        /** Название шаблона для баннеров */\n        templateName: PropTypes.string,\n        /** Нода в которую кладется баннер */\n        children: PropTypes.node,\n        /** Класс для групповой банерной ноды */\n        groupClassNames: PropTypes.string,\n    };\n\n    static defaultProps = {\n        templateName: 'HHC-Banners-Place-Template',\n        groupClassNames: '',\n    };\n\n    componentDidMount() {\n        this.element = ReactDOM.findDOMNode(this);\n        this.initBanners();\n    }\n\n    initBanners() {\n        const { banners, templateName } = this.props;\n        const bannerParams = {\n            ids: banners.map(({ id }) => id),\n            templateName,\n        };\n        loadBannerOnVisible(this.element, bannerParams);\n    }\n\n    render() {\n        const { groupClassNames, children } = this.props;\n        return <div className={groupClassNames}>{children}</div>;\n    }\n}\n\nexport default BannersGroup;\n","import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport BannersGroup from 'lux/components/Banner/BannersGroup';\n\nimport ClickmeReferralLink from 'lux/components/Clickme/ReferralLink';\n\nconst Clickme = ({ banners, showReferralLink, children, groupClassNames }) => (\n    <Fragment>\n        {showReferralLink && <ClickmeReferralLink />}\n        <BannersGroup banners={banners} groupClassNames={groupClassNames}>\n            {children}\n        </BannersGroup>\n    </Fragment>\n);\n\nClickme.defaultProps = {\n    showReferralLink: false,\n    groupClassNames: '',\n};\n\nClickme.propTypes = {\n    banners: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.string })),\n    showReferralLink: PropTypes.bool,\n    children: PropTypes.node,\n    groupClassNames: PropTypes.string,\n};\n\nexport default Clickme;\n","import {\n    MutableRefObject,\n    FC,\n    PropsWithChildren,\n    ReactNode,\n    useEffect,\n    useContext,\n    useState,\n    useRef,\n    memo,\n} from 'react';\n\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\n\nimport loadProxyService, { RemoteModuleOrNull } from 'Modules/ProxyExternalServiceLoader';\nimport { SerivceInfo, MicroFrontendServiceName } from 'lux/models/microFrontends';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport { CodeInjectorContext } from 'lux/components/CodeInjector';\n\ninterface ContainerForMicroFrontendProps {\n    preloadContent?: ReactNode;\n    place: string;\n    isFullPage?: boolean;\n    serviceInfo: MutableRefObject<SerivceInfo>;\n}\n\nconst getClassName = (place: string) => `HH-ContainerForMicroFrontend-${place}`;\n\nlet id = 0;\n\nconst ContainerForMicroFrontend: FC<PropsWithChildren<ContainerForMicroFrontendProps>> = ({\n    preloadContent = <Loading scale={LoadingScale.Small} />,\n    serviceInfo,\n    place,\n    isFullPage = false,\n}) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const codeInjectorContext = useContext(CodeInjectorContext);\n    const classNameForJS = getClassName(place);\n    let content = serviceInfo.current?.isSuccessSSR ? null : preloadContent;\n\n    let innerHTML = {};\n\n    if (process.env.LUX_SERVER) {\n        codeInjectorContext.placesNamesForMicroFrontends.push(place);\n        const MicrofrontendDelimeter = place;\n        content = <MicrofrontendDelimeter />;\n    } else if (serviceInfo.current?.isSuccessSSR) {\n        const container: HTMLDivElement | null =\n            document.querySelector(`.${classNameForJS}`) ??\n            document.querySelector(`.HH-ContainerForMicroFrontend-Hidden-${place}`);\n\n        innerHTML = {\n            dangerouslySetInnerHTML: {\n                __html: container?.innerHTML,\n            },\n        };\n    }\n\n    useEffect(() => {\n        const container = containerRef.current;\n        let globalServiceName: MicroFrontendServiceName;\n        let app: RemoteModuleOrNull = null;\n\n        id += 1;\n        const identifier = `${place}-${id}`;\n\n        void loadProxyService(place, serviceInfo.current, container, identifier, isFullPage).then((data) => {\n            if (data && container) {\n                const [appModule, globalServiceNameValue] = data;\n                app = appModule;\n                globalServiceName = globalServiceNameValue;\n            }\n        });\n\n        return () => {\n            /* Destroy надо делать в micro || macro таске, иначе получаем гонку между unmount\n             * microfrontend и xhh\n             * */\n            setTimeout(() => {\n                if (!globalServiceName) {\n                    return;\n                }\n\n                const isSupportDestroy = window.globalServiceVars?.[globalServiceName]?.hasSupportToDestroyApp;\n                if (container && isSupportDestroy) {\n                    app?.({\n                        unmountApp: true,\n                        container,\n                        identifier,\n                    });\n                    app = null;\n                }\n            }, 0);\n        };\n    }, [place, isFullPage, serviceInfo]);\n\n    if (!serviceInfo.current) {\n        return null;\n    }\n\n    return (\n        <div ref={containerRef} className={classNameForJS} {...innerHTML}>\n            {content}\n        </div>\n    );\n};\n\ninterface ContainerForMicroFrontendWrapper {\n    preloadContent?: ReactNode;\n    place: string;\n    isFullPage?: boolean;\n}\n\nconst ContainerForMicroFrontendWrapper: FC<PropsWithChildren<ContainerForMicroFrontendWrapper>> = ({\n    place,\n    preloadContent,\n}) => {\n    const serviceInfo = useSelector(({ microFrontends }) => microFrontends[place]);\n    const [keyComponent, setKeyComponent] = useState(place);\n    const previousServiceInfoRef = useRef(serviceInfo);\n\n    useEffect(() => {\n        if (previousServiceInfoRef.current !== serviceInfo) {\n            previousServiceInfoRef.current = serviceInfo;\n            setKeyComponent(`${place}-${Date.now()}`);\n        }\n    }, [place, serviceInfo]);\n\n    if (!serviceInfo) {\n        return null;\n    }\n\n    /* Идея в уничтожении компонента если serviceInfo возвращает новую ссылку\n     * это поможет корректно инициализировать приложение всегда на новой DOM ноде\n     * */\n    return (\n        <ContainerForMicroFrontend\n            key={keyComponent}\n            preloadContent={preloadContent}\n            serviceInfo={previousServiceInfoRef}\n            place={place}\n        />\n    );\n};\n\nexport default memo(ContainerForMicroFrontendWrapper, () => true);\n","import { ReactNode } from 'react';\n\nimport Conversion from 'bloko/blocks/conversion';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\n\ninterface DateOnlyProps {\n    /** Количество дней */\n    value: number;\n    /** Флаг выводить ли со склоняемым словом число */\n    hasValue?: boolean;\n    /** Функция обработки числа */\n    formatValue?: (value: number) => ReactNode;\n    /** Выводить количество дней в часах */\n    shouldShowInHours?: boolean;\n}\n\nconst TrlKeys = {\n    days: {\n        one: 'lang.day.1', // 1 день\n        some: 'lang.day.2', // 2 дня\n        many: 'lang.day.5', // 5 дней\n        zero: 'lang.day.5', // 0 дней\n    },\n    hours: {\n        one: 'hour.2', // 24 часа\n        some: 'hour.5', // 48 часов\n        many: 'hour.5', // 120 часов\n        zero: 'hour.5', // 0 часов\n    },\n};\n\nconst DateOnly: TranslatedComponent<DateOnlyProps> = ({\n    hasValue = true,\n    formatValue,\n    value,\n    trls,\n    shouldShowInHours,\n}) => {\n    const translations = shouldShowInHours ? TrlKeys.hours : TrlKeys.days;\n\n    const getFormatter = () => {\n        if (shouldShowInHours) {\n            return (value: number) => <span suppressHydrationWarning>{formatValue?.(value * 24) ?? value * 24}</span>;\n        }\n        return formatValue;\n    };\n\n    return (\n        <Conversion\n            many={trls[translations.many]}\n            some={trls[translations.some]}\n            one={trls[translations.one]}\n            zero={trls[translations.zero]}\n            formatValue={getFormatter()}\n            hasValue={hasValue}\n            value={value}\n        />\n    );\n};\n\nexport default translation(DateOnly);\n","import { useState, useLayoutEffect } from 'react';\n\nexport default function useIsClient(): boolean {\n    const [isClient, setIsClient] = useState(false);\n    useLayoutEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    return isClient;\n}\n","import { autoGeneratedReducer } from '@hh.ru/redux-create-reducer';\n\nexport interface BannerObject {\n    id: string;\n    cId: string;\n    bannerAdTargeting?: Record<string, unknown>;\n}\n\n// Не забудь продублировать в константы в  places.py!!!\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum BannerPlace {\n    AFTER_4TH_TOPIC_L = 'after-4th-topic-l',\n    AFTER_4TH_TOPIC_M = 'after-4th-topic-m',\n    AFTER_4TH_TOPIC_S = 'after-4th-topic-s',\n    AFTER_4TH_TOPIC_XS = 'after-4th-topic-xs',\n    AFTER_PAYMENT_FORM_L = 'after-payment-form-l',\n    AFTER_PAYMENT_FORM_S_M = 'after-payment-form-s-m',\n    AFTER_PAYMENT_FORM_XS = 'after-payment-form-xs',\n    AFTER_VACANCY_RESPONSE = 'after-vacancy-response',\n    BOTTOM_DASHBOARD = 'bottom-dashboard',\n    BOTTOM_DASHBOARD_CLICKME = 'bottom-dashboard-clickme',\n    CALENDAR = 'calendar',\n    DASHBOARD = 'dashboard',\n    INDEX_BOTTOM = 'index-bottom',\n    INDEX_BOTTOM_MOBILE = 'index-bottom-mobile',\n    INDEX_BOTTOM_XS = 'index-bottom-xs',\n    INDEX_DASHBOARD_MOBILE = 'index-dashboard-mobile',\n    INDEX_HORIZONTAL = 'index-horizontal',\n    INDEX_UNDER_NEWS_BOX = 'index-under-news-box',\n    INDEX_UNDER_DASHBOARD_SMALL = 'index-under-dashboard-small',\n    INDEX_VOD = 'index-vod',\n    INDEX_UNDER_RAINBOW_MOBILE = 'index-under-rainbow-mobile',\n    INDEX_UNDER_NEWS_BOX_MOBILE = 'index-under-news-box-mobile',\n    INDEX_WORK_IN_COMPANY = 'index-work-in-company',\n    INDEX_WORK_IN_COMPANY_MOBILE = 'index-work-in-company-mobile',\n    LEFT_COLUMN_UNDER_TABS = 'left-column-under-tabs',\n    RIGHT_COLUMN = 'right-column',\n    RIGHT_COLUMN_CLICKME = 'right-column-clickme',\n    RIGHT_COLUMN_CLICKME_ADAPTIVE = 'right-column-clickme-adaptive',\n    SERP_FIFTH_L = 'serp-fifth-l',\n    SERP_FIFTH_M = 'serp-fifth-m',\n    SERP_FIFTH_S = 'serp-fifth-s',\n    SERP_FIFTH_XS = 'serp-fifth-xs',\n    SERP_FIRST = 'serp-first',\n    SERP_FIRST_SMALL = 'serp-first-small',\n    SERP_FIRST_L = 'serp-first-l',\n    SERP_FIRST_M = 'serp-first-m',\n    SERP_FIRST_S = 'serp-first-s',\n    SERP_FIRST_XS = 'serp-first-xs',\n    SERP_FOURTH_L = 'serp-fourth-l',\n    SERP_FOURTH_M = 'serp-fourth-m',\n    SERP_FOURTH_S = 'serp-fourth-s',\n    SERP_FOURTH_XS = 'serp-fourth-xs',\n    SERP_SECOND = 'serp-second',\n    SERP_SECOND_SMALL = 'serp-second-small',\n    SERP_SECOND_L = 'serp-second-l',\n    SERP_SECOND_M = 'serp-second-m',\n    SERP_SECOND_S = 'serp-second-s',\n    SERP_SECOND_XS = 'serp-second-xs',\n    SERP_THIRD_L = 'serp-third-l',\n    SERP_THIRD_M = 'serp-third-m',\n    SERP_THIRD_S = 'serp-third-s',\n    SERP_THIRD_XS = 'serp-third-xs',\n    UNDER_PAGINATION_SEARCH_RESULTS_L = 'under-pagination-search-results-l',\n    UNDER_PAGINATION_SEARCH_RESULTS_M = 'under-pagination-search-results-m',\n    UNDER_PAGINATION_SEARCH_RESULTS_S = 'under-pagination-search-results-s',\n    UNDER_PAGINATION_SEARCH_RESULTS_XS = 'under-pagination-search-results-xs',\n    UNDER_SEARCH_RESULTS_ROTATE = 'under-search-results-rotate',\n    UNDER_SEARCH_RESULTS_XS = 'under-search-results-xs',\n    VACANCY_PROMOTION = 'vacancy-promotion',\n    VACANCY_RECOMMENDATIONS = 'vacancy-recommendations',\n    VACANCY_RIGHT_TEASER = 'vacancy-right-teaser',\n    VACANCY_VIEW_SERP_FIRST_L = 'vacancy-view-serp-first-l',\n    VACANCY_VIEW_SERP_FIRST_S_M = 'vacancy-view-serp-first-s-m',\n    VACANCY_VIEW_SERP_FIRST_XS = 'vacancy-view-serp-first-xs',\n    VACANCY_VIEW_SERP_FIRST_ODD_L = 'vacancy-view-serp-first-odd-l',\n    VACANCY_VIEW_SERP_FIRST_ODD_S_M = 'vacancy-view-serp-first-odd-s-m',\n    VACANCY_VIEW_SERP_FIRST_ODD_XS = 'vacancy-view-serp-first-odd-xs',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n// Не забудь продублировать в константы в  places.py!!!\n\nexport interface Banners {\n    dashboard?: BannerObject[];\n    [BannerPlace.INDEX_BOTTOM]?: BannerObject[];\n    [BannerPlace.INDEX_BOTTOM_MOBILE]?: BannerObject[];\n    [BannerPlace.INDEX_DASHBOARD_MOBILE]?: BannerObject[];\n    [BannerPlace.INDEX_HORIZONTAL]?: BannerObject[];\n    [BannerPlace.INDEX_UNDER_NEWS_BOX]?: BannerObject[];\n    [BannerPlace.INDEX_UNDER_NEWS_BOX_MOBILE]?: BannerObject[];\n    [BannerPlace.INDEX_UNDER_RAINBOW_MOBILE]?: BannerObject[];\n    [BannerPlace.INDEX_VOD]?: BannerObject[];\n}\n\nexport default autoGeneratedReducer<Banners>({});\n","export enum CallStatuses {\n    DidNotConnect = 'DID_NOT_CONNECT',\n    CallEnded = 'CALL_ENDED',\n}\n\nexport interface Call {\n    id: number;\n    creationTime: string;\n    durationSeconds?: number;\n    callerNumber: string;\n    lastChangeTime: string;\n    status: CallStatuses;\n    formattedCallerNumber: string;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"bannerWrapper\":\"banner-wrapper--RvqPrTfKMutE4J42z7rp\",\"banner\":\"banner--_u9shvUAIOyRiYDLrdBl\",\"bannerTitle\":\"banner-title--hunbGpumimYw07yG7L7P\",\"bannerButtons\":\"banner-buttons--ExMSD_sa1VtjYAoC6aGT\",\"bannerCloseButton\":\"banner-close-button--P4SQyqGDfb_jgaBud_b6\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport responseOfferUserStatusCloseButtonClick from '@hh.ru/analytics-js-events/build/xhh/applicant/user_status/negotiation_list/response_offer_user_status_close_button_click';\nimport responseOfferUserStatusElementShown from '@hh.ru/analytics-js-events/build/xhh/applicant/user_status/negotiation_list/response_offer_user_status_element_shown';\nimport Button, { ButtonAppearance, ButtonKind, ButtonScale } from 'bloko/blocks/button';\nimport HSpacing from 'bloko/blocks/hSpacing';\nimport HSpacingContainer from 'bloko/blocks/hSpacing/HSpacingContainer';\nimport Icon, { IconColor, IconLink, IconScale, IconView } from 'bloko/blocks/icon';\nimport Text, { TextSize } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport useMarkAsRead from 'lux/components/Applicant/JobSearchStatus/useMarkAsRead';\nimport useSetJobSearchStatus from 'lux/components/Applicant/JobSearchStatus/useSetJobSearchStatus';\nimport ElementShownAnchor from 'lux/components/ElementShownAnchor';\nimport { APPLICANT_JOB_SEARCH_STATUS_SUCCESS } from 'lux/components/Notifications/ApplicantJobSearchStatusSuccess';\nimport translation from 'lux/components/translation';\nimport { ApplicantNegotiationStatus } from 'lux/models/applicantNegotiations/applicantNegotiationsActionsData';\nimport { JobSearchStatus, JobSearchStatusForm, JobSearchStatusTrigger } from 'lux/models/applicantUserStatuses';\nimport { useSelector } from 'lux/modules/useSelector';\nimport addNotification from 'lux/requests/notifications/addNotification';\n\nimport styles from './job-search-status-banner.less';\n\nconst TrlKeys = {\n    header: 'applicant.negotiations.jobSearchStatusBanner.header',\n    text: 'applicant.negotiations.jobSearchStatusBanner.text',\n    buttonAccepted: 'applicant.negotiations.jobSearchStatusBanner.button.accepted',\n    buttonThinking: 'applicant.negotiations.jobSearchStatusBanner.button.thinking',\n};\n\nconst JobSearchStatusBanner: TranslatedComponent = ({ trls }) => {\n    const activeTrigger = useSelector((state) => state.applicantUserStatusesTrigger);\n    const dispatch = useDispatch();\n    const statusFilter = useSelector((state) => state.router.location.query?.state);\n    const [isClosed, setIsClosed] = useState<boolean>(false);\n    const [isDisabled, setIsDisabled] = useState<boolean>(false);\n    const setJobSearchStatus = useSetJobSearchStatus(JobSearchStatusForm.ResponsesPageBanner);\n    const markAsRead = useMarkAsRead();\n    const needToShow = activeTrigger === JobSearchStatusTrigger.NegotiationsScreen;\n\n    if (isClosed || !needToShow || statusFilter === ApplicantNegotiationStatus.Discard) {\n        return null;\n    }\n\n    const onClose = (markRead = false) => {\n        if (markRead) {\n            markAsRead();\n        }\n        setIsClosed(true);\n    };\n\n    return (\n        <ElementShownAnchor fn={responseOfferUserStatusElementShown} className={styles.bannerWrapper}>\n            <VSpacing base={5} />\n            <HSpacingContainer>\n                <HSpacing base={5} />\n                <div className={styles.banner}>\n                    <div className={styles.bannerTitle}>\n                        <Text size={TextSize.Large} strong>\n                            {trls[TrlKeys.header]}\n                        </Text>\n                        <div className={styles.bannerCloseButton}>\n                            <IconLink\n                                onClick={() => {\n                                    responseOfferUserStatusCloseButtonClick();\n                                    onClose(true);\n                                }}\n                            >\n                                <Icon view={IconView.Cross} initial={IconColor.Gray50} scale={IconScale.Small} />\n                            </IconLink>\n                        </div>\n                    </div>\n                    <VSpacing base={2} />\n                    <Text>{trls[TrlKeys.text]}</Text>\n                    <VSpacing base={4} />\n                    <div className={styles.bannerButtons}>\n                        <Button\n                            onClick={() => {\n                                setIsDisabled(true);\n                                void setJobSearchStatus(JobSearchStatus.AcceptedJobOffer)\n                                    .then(() => {\n                                        onClose();\n                                    })\n                                    .finally(() => {\n                                        setIsDisabled(false);\n                                    });\n                            }}\n                            disabled={isDisabled}\n                            scale={ButtonScale.Small}\n                            kind={ButtonKind.Success}\n                        >\n                            {trls[TrlKeys.buttonAccepted]}\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                setIsDisabled(true);\n                                void setJobSearchStatus(JobSearchStatus.HasJobOffer)\n                                    .then(() => {\n                                        dispatch(addNotification(APPLICANT_JOB_SEARCH_STATUS_SUCCESS));\n                                        onClose();\n                                    })\n                                    .finally(() => {\n                                        setIsDisabled(false);\n                                    });\n                            }}\n                            disabled={isDisabled}\n                            scale={ButtonScale.Small}\n                            kind={ButtonKind.Success}\n                            appearance={ButtonAppearance.Outlined}\n                        >\n                            {trls[TrlKeys.buttonThinking]}\n                        </Button>\n                    </div>\n                </div>\n                <HSpacing base={5} />\n            </HSpacingContainer>\n            <VSpacing base={5} />\n        </ElementShownAnchor>\n    );\n};\n\nexport default translation(JobSearchStatusBanner);\n","import { useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport Gap from 'bloko/blocks/gap';\nimport Link from 'bloko/blocks/link';\nimport Text from 'bloko/blocks/text';\n\nimport translation from 'lux/components/translation';\nimport useToggleState from 'lux/hooks/useToggleState';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport AutosearchMessengersModal from 'lux/components/AutosearchMessengers/AutosearchMessengersModal';\n\nconst analyticsData = { category: 'applicant', action: 'chatbot-messenger-setup', label: 'negotiations' };\n\nconst AutoSearchMessengersTip = ({ trls }) => {\n    const chatBot = useSelector((store) => store.chatBot);\n    const [modalIsVisible, toggleModal] = useToggleState(false);\n    const handleButtonClick = useCallback(() => {\n        toggleModal();\n        Analytics.sendEvent(analyticsData.category, analyticsData.action, analyticsData.label);\n    }, [toggleModal]);\n\n    if (!chatBot) {\n        return null;\n    }\n\n    return (\n        <div className=\"autosearch-messengers-tip-wrap\">\n            <div className=\"autosearch-messengers-tip\">\n                <span className=\"autosearch-messengers-tip-text-wrap\">\n                    <Gap right Element=\"span\">\n                        <Text Element=\"span\" strong>\n                            {trls[AutoSearchMessengersTip.trls.tip]}\n                        </Text>{' '}\n                        {trls[AutoSearchMessengersTip.trls.text]}\n                    </Gap>\n                </span>\n                <Link Element={'button'} onClick={handleButtonClick}>\n                    {trls[AutoSearchMessengersTip.trls.button]}\n                </Link>\n            </div>\n            <AutosearchMessengersModal isVisible={modalIsVisible} handleCloseModal={toggleModal} />\n        </div>\n    );\n};\nAutoSearchMessengersTip.trls = {\n    tip: 'autosearch.tip',\n    text: 'autosearch.tip.text',\n    button: 'autosearch.tip.button',\n};\n\nAutoSearchMessengersTip.propTypes = {\n    trls: PropTypes.object.isRequired,\n};\n\nexport default translation(AutoSearchMessengersTip);\n","import { Link } from '@hh.ru/redux-spa-middleware';\nimport Gap from 'bloko/blocks/gap';\nimport Tabs, { Tab } from 'bloko/blocks/tabs';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport urlParser from 'bloko/common/urlParser';\n\nimport translation from 'lux/components/translation';\nimport { NegotiationsFilterTab } from 'lux/models/applicantNegotiations/applicantNegotiationsActionsData';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst TrlKeys = {\n    [NegotiationsFilterTab.Active]: 'applicant.negotiations.filter.active',\n    [NegotiationsFilterTab.All]: 'applicant.negotiations.filter.all',\n};\n\nconst FiltersByActive: TranslatedComponent = ({ trls }) => {\n    const filters = useSelector((state) => state.applicantNegotiationsActionsData.filters);\n    const location = useSelector((state) => state.router.location);\n\n    const url = urlParser(location.pathname);\n\n    return (\n        <Gap top bottom>\n            <Tabs>\n                {filters.map((tab) => {\n                    url.search = tab.href;\n                    return (\n                        <Tab\n                            id={url.href}\n                            disabled={tab.selected}\n                            data-qa=\"negotiations-tab\"\n                            to={url.href}\n                            active={tab.selected}\n                            key={tab.href}\n                            Element={Link}\n                        >\n                            {trls[TrlKeys[tab.name]]}\n                        </Tab>\n                    );\n                })}\n            </Tabs>\n        </Gap>\n    );\n};\n\nexport default translation(FiltersByActive);\n","export enum TopicActionName {\n    Decline = 'decline',\n    Delete = 'delete',\n    Restore = 'restore',\n    Feedback = 'feedback',\n}\n\nexport interface TopicAction {\n    name: TopicActionName;\n    method: string;\n    href: string;\n    substate: string;\n}\n\nexport interface Topic {\n    id: number;\n    resumeId: number;\n    vacancyId: number;\n    employerId: number;\n    lastModified?: number;\n    lastModifiedMillis: number;\n    creationTime: number;\n    employerCreationTime: number;\n    responseLetter: string;\n    hasNewMessages: boolean;\n    chatId: number;\n    actions?: TopicAction[];\n    cantBeOpenedWithCurrentResume: boolean;\n    applicantVacancySummaryEnabled: boolean;\n    archived: boolean;\n    lastSubState: string;\n    lastState: string;\n    viewedByOpponent: boolean;\n    employerViolatesRules: boolean;\n    hasPendingAutoActionSurvey?: boolean;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"responsesTopControl\":\"responses-top-control--k7eKjy2EsmlND56uJ8JZ\",\"responsesTopControlState\":\"responses-top-control_state--fpskwS5LP3E1dvUOltC1\",\"responsesTopControlDiscard\":\"responses-top-control_discard--FLvs2euJOLNgO2POO3V3\",\"responsesTopControlButtonShowOnXs\":\"responses-top-control__button_show-on-xs--U7R6UAyydFhpR2MrYQ7v\",\"responsesTopControlButtonHideOnXs\":\"responses-top-control__button_hide-on-xs--pjwuQD_k18TCk2UpwCdO\",\"responsesTableWrapper\":\"responses-table-wrapper--rIfNLdCkNV33p2W9_STt\",\"responsesTable\":\"responses-table--a8Ep4bUwLTVr8MQyBd46\",\"responsesTableHeader\":\"responses-table-header--GUNOSW75MRlwW6h8mjis\",\"responsesTableHeaderCell\":\"responses-table-header__cell--mc8vVvTzA6xkq3ZTKRGd\",\"responsesTableTbody\":\"responses-table-tbody--GA5nMRIjZv1vAE3pRtUZ\",\"responsesTableRow\":\"responses-table-row--nt2CTesRhLfQSD4j36rt\",\"responsesTableRowSelected\":\"responses-table-row_selected--HNJDIP4gsljTezp4LAbQ\",\"responsesTableRowUnread\":\"responses-table-row_unread--kv4vNH4xxeM538K2a5lo\",\"responsesTableRowBanner\":\"responses-table-row_banner--W6fvX8owBfBAsZ8ke3ia\",\"responsesTableRowChatbot\":\"responses-table-row__chatbot--XBC4xnqco6hdZyWRQEQp\",\"responsesTableRowChatbotCell\":\"responses-table-row__chatbot-cell--Lh_AtcbVO47iyImhkMx6\",\"responsesTableRowChatbotCellFilterAllSelected\":\"responses-table-row__chatbot-cell_filter-all-selected--NpcgyQVVwM8anOnteSij\",\"responsesTableRowCell\":\"responses-table-row__cell--Wm_QalzEwBixzgReLAAA\",\"responsesTableRowTopicHasPendingAutoActionSurveyTag\":\"responses-table-row__topic-has-pending-auto-action-survey-tag--nqljpK1WwrqQgxQ31xO1\",\"responsesTableRowVacancyDetails\":\"responses-table-row__vacancy-details--Eo5OkKsC13x3peQBhQgk\",\"responsesTableActions\":\"responses-table-actions--IOmoF0PCnsMFEcA6eujE\",\"responsesTableActionsAndMenuContainer\":\"responses-table-actions-and-menu-container--gW4P6YoJybh7EO0bqMGN\",\"responsesTableRowEmployer\":\"responses-table-row__employer--rPOuH84x54BRxAHKfk3J\",\"responsesTableRowCellNowrap\":\"responses-table-row__cell_nowrap--VkXX3h9pV0JdQTZ6j_P1\",\"responsesTableRowCellStatus\":\"responses-table-row__cell_status--eICDJ_UPgxY74D5DP2GD\",\"responsesTableRowCellIcon\":\"responses-table-row__cell_icon--OxJkhMBmp7GFdR24EtNx\",\"responsesTableRowCellVacancy\":\"responses-table-row__cell_vacancy--NRlTRjNyY2TwDnxZtXxg\",\"responsesTableRowWithCheckbox\":\"responses-table-row_with-checkbox--p_yZsi8nOcynv0SjNXF6\",\"responsesTableRowCellVacancyStatus\":\"responses-table-row__cell_vacancy-status--ZJ4NPcM49GYcOzt_RX4j\",\"responsesTableRowCellDate\":\"responses-table-row__cell_date--e8GffRzAbGBXFQfIKvmK\",\"responsesTableRowCellFailed\":\"responses-table-row__cell_failed--_8Zq3RYs_vWf3EMJFrwT\",\"responsesTableStatus\":\"responses-table-status--Vx1t53OVQQRVxr64Hsdx\",\"responsesTableStatusInvitation\":\"responses-table-status_invitation--KzLYLpIMILBreaFgPmiK\",\"responsesTableStatusDiscard\":\"responses-table-status_discard--UHGvQOq0TOFdJJnEnA3D\",\"responsesTableStatusViolatesRules\":\"responses-table-status_violates-rules--sTQdPduxnHHrB1TOZn0r\",\"responsesTableForm\":\"responses-table-form--mgzm__llMWQNABRTZlT1\",\"responsesTableAction\":\"responses-table-action--jp7lohpWgldb4EiCdQFr\",\"responseTableIcon\":\"response-table-icon--GPuX6IOUXylL0_U_CKAb\",\"responseTableIconManually\":\"response-table-icon_manually--JoL3jNewLREUiVp_IBlS\",\"responseTableIconSuccess\":\"response-table-icon_success--X2NzPt5CKIbegIRW6jmt\",\"responseTableIconFailed\":\"response-table-icon_failed--gTuaTcDVbyFvjLqMhYqd\",\"responsesTableDateShowOnXs\":\"responses-table-date_show-on-xs--YArKFSvtuQstr0t6xz13\",\"responsesTableVacancyStatusShowOnXs\":\"responses-table-vacancy-status_show-on-xs--dNSAATkKFUw57KNPxxLf\",\"responsesTableEmployerStatsContainerDummy\":\"responses-table-employer-stats-container-dummy--FSlfOK79o6jYtnzeNMSj\",\"responsesTableEmployerStatsContainer\":\"responses-table-employer-stats-container--h_bun8xRVhvcLVjvRZQj\",\"responsesTableEmployerStats\":\"responses-table-employer-stats--XvKNVPnFzBPC3umK6KtA\",\"responsesTableEmployerStatsEmpty\":\"responses-table-employer-stats_empty--XgSERPNy0PUendCenrRc\",\"responsesTableEmployerStatsIndicator\":\"responses-table-employer-stats__indicator--EP5a4OKdT6htODogvP0v\",\"responsesTableEmployerStatsNumber\":\"responses-table-employer-stats__number--ue_E4002IY_MCnQRQbNk\",\"responsesTableEmployerCourtesyIndicator\":\"responses-table-employer-courtesy__indicator--gHPiQMze8Y6jX5feLyeK\",\"responsesTableEmployerStatsValue\":\"responses-table-employer-stats__value--prQvATNwUCguWjFSqpgj\",\"responsesTableEmployerStatsSvg\":\"responses-table-employer-stats__svg--CALQU9cC8L4jQC4Qe3a_\",\"responsesTableEmployerStatsPath\":\"responses-table-employer-stats__path--DswLh6eFZndFCeZMc3aH\",\"xsFriendly\":\"xs-friendly--GbCTTIIILQc1fqiPiUyY\",\"responsesEmpty\":\"responses-empty--O0d5_rQVGEu6VFoetaYJ\",\"abstractLinkLoading\":\"abstract-link-loading--ufNI6FgHQ6_5AZzRi7NJ\"};","import classNames from 'classnames';\n\nimport Button from 'bloko/blocks/button';\nimport { FormSpacer } from 'bloko/blocks/form';\nimport Icon, { IconScale, IconColor, IconView } from 'bloko/blocks/icon';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\n\nimport styles from './responses.less';\n\ninterface BatchActionProps {\n    batchRemove: () => void;\n    show: boolean;\n}\n\nconst TrlKeys = {\n    actionDelete: 'applicant.negotiations.action.delete.bulk',\n};\n\nconst BatchAction: TranslatedComponent<BatchActionProps> = ({ show, batchRemove, trls }) => {\n    if (!show) {\n        return null;\n    }\n\n    return (\n        <div className={classNames(styles.responsesTopControl, styles.responsesTopControlDiscard)}>\n            <span className={classNames(styles.responsesTopControl, styles.responsesTopControlButtonHideOnXs)}>\n                <FormSpacer>\n                    <Button onClick={batchRemove} data-qa=\"responses-action-batch-remove\">\n                        {trls[TrlKeys.actionDelete]}\n                    </Button>\n                </FormSpacer>\n            </span>\n            <span className={styles.responsesTopControlButtonShowOnXs}>\n                <Button\n                    data-qa=\"responses-action-batch-remove\"\n                    onClick={batchRemove}\n                    icon={<Icon view={IconView.Trash} initial={IconColor.Gray60} scale={IconScale.Small} />}\n                />\n            </span>\n        </div>\n    );\n};\n\nexport default translation(BatchAction);\n","import { ChangeEvent, useMemo, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { push } from 'connected-react-router';\n\nimport Select, { Option } from 'bloko/blocks/select';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport urlParser from 'bloko/common/urlParser';\n\nimport translation from 'lux/components/translation';\nimport {\n    ApplicantNegotiationStatus,\n    FilterByStatus,\n} from 'lux/models/applicantNegotiations/applicantNegotiationsActionsData';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport styles from './responses.less';\n\nconst TrlKeys = {\n    status: {\n        [ApplicantNegotiationStatus.Discard]: 'applicant.negotiations.state.DISCARD',\n        [ApplicantNegotiationStatus.Invitation]: 'applicant.negotiations.state.INVITATION',\n        [ApplicantNegotiationStatus.Read]: 'applicant.negotiations.state.READ',\n        [ApplicantNegotiationStatus.Unread]: 'applicant.negotiations.state.UNREAD',\n        [ApplicantNegotiationStatus.OnlyNew]: 'applicant.negotiations.state.ONLY_NEW',\n        [ApplicantNegotiationStatus.All]: 'applicant.negotiations.state.ALL',\n    },\n};\n\nconst FiltersByStatus: TranslatedComponent = ({ trls }) => {\n    const filters = useSelector((state) => state.applicantNegotiationsActionsData.filterByStatus);\n    const location = useSelector((state) => state.router.location);\n    const dispatch = useDispatch();\n\n    const [selected, setSelected] = useState<ApplicantNegotiationStatus>(ApplicantNegotiationStatus.All);\n    const oldSelected = useRef<ApplicantNegotiationStatus>(ApplicantNegotiationStatus.All);\n    const filtersMap = useMemo(() => {\n        let newSelected = ApplicantNegotiationStatus.All;\n        const filtersMap = filters.reduce((result, filter) => {\n            result[filter.name] = filter;\n\n            if (filter.selected) {\n                newSelected = filter.name;\n            }\n\n            return result;\n        }, {} as Record<ApplicantNegotiationStatus, FilterByStatus>);\n\n        if (newSelected !== oldSelected.current) {\n            oldSelected.current = newSelected;\n            setSelected(newSelected);\n        }\n\n        return filtersMap;\n    }, [filters]);\n\n    const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        const statusValue = event.target.value as ApplicantNegotiationStatus;\n        setSelected(statusValue);\n        if (statusValue === ApplicantNegotiationStatus.All) {\n            const url = urlParser(location.pathname + location.search);\n            url.params.state = [''];\n            dispatch(push(url.href));\n        } else {\n            dispatch(push(filtersMap[statusValue].href));\n        }\n    };\n\n    if (filters.length === 0) {\n        return null;\n    }\n\n    return (\n        <div className={classNames(styles.responsesTopControl, styles.responsesTopControlState)}>\n            <Select onChange={handleChange} value={selected} flexible data-qa=\"responses-state-control\">\n                {filters.map((item) => (\n                    <Option key={item.href} value={item.name}>\n                        {trls[TrlKeys.status[item.name]]}\n                    </Option>\n                ))}\n            </Select>\n        </div>\n    );\n};\n\nexport default translation(FiltersByStatus);\n","import { FC } from 'react';\nimport classNames from 'classnames';\n\nimport AdsExternalBanner from 'lux/components/Banner/AdsExternalBanner';\nimport { BannerPlace } from 'lux/models/banners';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport styles from './responses.less';\n\nconst ListBanner: FC = () => {\n    const bannerL = useSelector((state) => state.banners[BannerPlace.AFTER_4TH_TOPIC_L]);\n    const bannerM = useSelector((state) => state.banners[BannerPlace.AFTER_4TH_TOPIC_M]);\n    const bannerS = useSelector((state) => state.banners[BannerPlace.AFTER_4TH_TOPIC_S]);\n    const bannerXS = useSelector((state) => state.banners[BannerPlace.AFTER_4TH_TOPIC_XS]);\n\n    if (!bannerL && !bannerM && !bannerS && !bannerXS) {\n        return null;\n    }\n\n    return (\n        <tr className={classNames(styles.responsesTableRow, styles.responsesTableRowBanner)}>\n            <td className={styles.responsesTableRowCell} colSpan={6}>\n                <div className=\"banner-substrate\">\n                    {bannerL && bannerL.length > 0 && (\n                        <div className=\"banner-place-wrapper_show-on-l\">\n                            <AdsExternalBanner {...bannerL[0]} />\n                        </div>\n                    )}\n                    {bannerM && bannerM.length > 0 && (\n                        <div className=\"banner-place-wrapper_show-on-m\">\n                            <AdsExternalBanner {...bannerM[0]} />\n                        </div>\n                    )}\n                    {bannerS && bannerS.length > 0 && (\n                        <div className=\"banner-place-wrapper_show-on-s\">\n                            <AdsExternalBanner {...bannerS[0]} />\n                        </div>\n                    )}\n                    {bannerXS && bannerXS.length > 0 && (\n                        <div className=\"banner-place-wrapper_show-on-xs\">\n                            <AdsExternalBanner {...bannerXS[0]} />\n                        </div>\n                    )}\n                </div>\n            </td>\n        </tr>\n    );\n};\n\nexport default ListBanner;\n","import { CallStatuses } from 'lux/models/employer/vacancyresponses/calls.types';\nimport { CallItem, TopicCall } from 'lux/models/topicsCallHistory';\n\nexport const findCall = (calls: TopicCall): CallItem => {\n    return calls.items.find((call) => call.status === CallStatuses.CallEnded) || calls.items[calls.items.length - 1];\n};\n\nconst getCallDuration = (calls: TopicCall, trls: { min: string; sec: string }): string | null => {\n    if (!calls?.pickedUpPhone) {\n        return null;\n    }\n\n    const duration = findCall(calls)?.durationSeconds;\n\n    if (!duration) {\n        return null;\n    }\n\n    if (duration / 60 >= 1) {\n        return `${Math.floor(duration / 60)} ${trls.min}`;\n    }\n    return `${duration} ${trls.sec}`;\n};\n\nexport default getCallDuration;\n","import { DefaultRootState } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { ActionCreator } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nimport { Action } from '@hh.ru/redux-create-reducer';\n\nimport { updateUrl } from 'Modules/url';\nimport fetcher from 'lux/modules/fetcher';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\ninterface Payload {\n    method: string;\n    href: keyof FetcherPostApi;\n    substate: string;\n    topicId: string;\n}\n\nconst doActionWithApplicantNegotiation: ActionCreator<\n    ThunkAction<Promise<unknown>, DefaultRootState, unknown, Action>\n> =\n    ({ method, href, substate, topicId }: Payload) =>\n    (dispatch, getState) => {\n        if (method === 'GET') {\n            dispatch(push(updateUrl(href, { topicId })));\n            return Promise.resolve();\n        }\n\n        return fetcher\n            .postFormData(href, {\n                topic: topicId,\n                query: getState().router.location.search,\n                substate,\n            })\n            .then(\n                () => dispatch(push(window.location)),\n                (err) => dispatch(showDefaultError(err))\n            );\n    };\n\nexport default doActionWithApplicantNegotiation;\n","import { MouseEventHandler, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport { MarkAsViewedEvent } from 'Modules/Notices';\nimport ContainerForMicroFrontend from 'lux/components/CodeInjector/ContainerForMicroFrontend';\nimport Infotip, { InfoPlacement, InfoTheme } from 'lux/components/Infotip';\nimport translation from 'lux/components/translation';\nimport { TopicAction, TopicActionName } from 'lux/models/applicantNegotiationTopic.types';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport doActionWithApplicantNegotiation from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/doActionWithApplicantNegotiation';\n\nimport styles from './responses.less';\n\ninterface ListActionProps {\n    action: TopicAction;\n    topicId: number;\n    showFeedbackTip: boolean;\n}\n\nconst TrlKeys = {\n    actions: {\n        [TopicActionName.Decline]: 'applicant.negotiations.action.decline',\n        [TopicActionName.Delete]: 'applicant.negotiations.action.delete',\n        [TopicActionName.Restore]: 'applicant.negotiations.action.restore',\n        [TopicActionName.Feedback]: 'applicant.negotiations.action.feedback',\n    },\n    feedbackTip: 'infotips.content.applicant_feedback_about_vacancy_infotip',\n};\n\nconst ListAction: TranslatedComponent<ListActionProps> = ({ topicId, action, trls, showFeedbackTip }) => {\n    const [disabled, setDisabled] = useState(false);\n    const search = useSelector((state) => state.router.location.search);\n    const dispatch = useDispatch();\n\n    const actionHandler: MouseEventHandler<HTMLButtonElement> = (event) => {\n        event.stopPropagation();\n        const { method, href, substate } = action;\n\n        setDisabled(true);\n\n        const dispatchResult = dispatch(\n            doActionWithApplicantNegotiation({\n                method,\n                href,\n                substate,\n                topicId,\n                search,\n            })\n        );\n\n        /**\n         * Пока часть (немалая) редьюсеров написана на JS — создание стора не можем целиком унести в TS\n         * Чтобы получить правильный тип для диспатча (с поддержкой thunk-action) нужно стор создавать в TS\n         */\n        (dispatchResult as unknown as Promise<void>).then(\n            () => setDisabled(false),\n            () => setDisabled(false)\n        );\n    };\n\n    const renderButton = () => {\n        if (action.name === TopicActionName.Feedback) {\n            return <ContainerForMicroFrontend place={`topicInterviewReview${topicId}`} />;\n        }\n        return (\n            <button\n                type=\"button\"\n                disabled={disabled}\n                className={styles.responsesTableAction}\n                onClick={actionHandler}\n                data-qa={`negotiations-${action.name}`}\n            >\n                {trls[TrlKeys.actions[action.name]]}\n            </button>\n        );\n    };\n\n    return (\n        <>\n            {showFeedbackTip && action.name === TopicActionName.Feedback ? (\n                <Infotip\n                    name=\"applicant_feedback_about_vacancy_infotip\"\n                    placement={InfoPlacement.TopStart}\n                    render={() => trls[TrlKeys.feedbackTip]}\n                    theme={InfoTheme.Dark}\n                    show={true}\n                    markAsViewedEvent={MarkAsViewedEvent.OnHide}\n                >\n                    {renderButton()}\n                </Infotip>\n            ) : (\n                renderButton()\n            )}\n        </>\n    );\n};\n\nexport default translation(ListAction);\n","import { useMemo, useCallback, ReactNode } from 'react';\nimport classnames from 'classnames';\n\nimport HoverTip, { TipPlacement } from 'bloko/blocks/drop/Tip/HoverTip';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { formatToReactComponent, format } from 'bloko/common/trl';\n\nimport EmployerReadStatisticsModule from 'HHC/EmployerReadStatisticsModule';\nimport ConversionDate from 'lux/components/Conversion/DateOnly';\nimport translation from 'lux/components/translation';\nimport useIsClient from 'lux/hooks/useIsClient';\nimport { ApplicantEmployerPoliteness } from 'lux/models/applicantEmployerPoliteness';\nimport {\n    ManagerActivityData,\n    ManagerInactiveTrlCode,\n} from 'lux/models/applicantNegotiations/applicantEmployerManagersActivity';\n\nimport styles from './responses.less';\n\nenum ResponseSpeedColor {\n    EmptyColor = '#E7E7E7',\n    LowColor = '#DDA7A7',\n    MediumColor = '#DDC7A7',\n    HighColor = '#A7DDB0',\n}\n\nenum EmployerResponseSpeed {\n    Low = 'low',\n    Medium = 'medium',\n    High = 'high',\n}\n\nconst COLOR_SET = {\n    [EmployerResponseSpeed.Low]: [\n        ResponseSpeedColor.LowColor,\n        ResponseSpeedColor.EmptyColor,\n        ResponseSpeedColor.EmptyColor,\n    ],\n    [EmployerResponseSpeed.Medium]: [\n        ResponseSpeedColor.MediumColor,\n        ResponseSpeedColor.MediumColor,\n        ResponseSpeedColor.EmptyColor,\n    ],\n    [EmployerResponseSpeed.High]: [\n        ResponseSpeedColor.HighColor,\n        ResponseSpeedColor.HighColor,\n        ResponseSpeedColor.HighColor,\n    ],\n};\n\ninterface EmployerStatsProps {\n    /** Объект работодательской статистики */\n    employerPoliteness: ApplicantEmployerPoliteness;\n    /** Объект активности менеджера */\n    managerInactiveData?: ManagerActivityData;\n}\n\nconst TrlKeys = {\n    responseSpeed: {\n        [EmployerResponseSpeed.Low]: 'applicant.negotiations.stats.responseSpeed.low',\n        [EmployerResponseSpeed.Medium]: 'applicant.negotiations.stats.responseSpeed.medium',\n        [EmployerResponseSpeed.High]: 'applicant.negotiations.stats.responseSpeed.high',\n    },\n    statsEmpty: 'applicant.negotiations.stats.noReadData',\n    statsRead: 'applicant.negotiations.stats.read',\n    statsWeekExact: 'applicant.negotiations.activity.weekExact',\n    stats: {\n        [ManagerInactiveTrlCode.Online]: 'applicant.negotiations.activity.online',\n        [ManagerInactiveTrlCode.Today]: 'applicant.negotiations.activity.today',\n        [ManagerInactiveTrlCode.Yesterday]: 'applicant.negotiations.activity.yesterday',\n        [ManagerInactiveTrlCode.Week]: 'applicant.negotiations.activity.week',\n        [ManagerInactiveTrlCode.Month]: 'applicant.negotiations.activity.month',\n    },\n};\n\nconst EmployerStats: TranslatedComponent<EmployerStatsProps> = ({ employerPoliteness, managerInactiveData, trls }) => {\n    const isClient = useIsClient();\n    const employerResponseSpeed = useMemo(() => {\n        const replyTime = employerPoliteness?.replyTotalWorkingTimeDays;\n\n        if (!replyTime || replyTime < 1) {\n            return null;\n        }\n\n        if (replyTime === 1) {\n            return EmployerResponseSpeed.High;\n        }\n\n        if (replyTime > 3) {\n            return EmployerResponseSpeed.Low;\n        }\n\n        return EmployerResponseSpeed.Medium;\n    }, [employerPoliteness]);\n\n    const renderResponsesSpeedStat = useCallback(() => {\n        if (!employerResponseSpeed) {\n            return null;\n        }\n\n        return (\n            <span className={styles.responsesTableEmployerCourtesyIndicator}>\n                <svg width=\"13\" height=\"14\" fill=\"none\">\n                    <rect width=\"3\" height=\"14\" rx=\"1\" fill={COLOR_SET[employerResponseSpeed][0]} />\n                    <rect x=\"5\" width=\"3\" height=\"14\" rx=\"1\" fill={COLOR_SET[employerResponseSpeed][1]} />\n                    <rect x=\"10\" width=\"3\" height=\"14\" rx=\"1\" fill={COLOR_SET[employerResponseSpeed][2]} />\n                </svg>\n            </span>\n        );\n    }, [employerResponseSpeed]);\n\n    const renderStatsPercents = useCallback(\n        (emptyStats: boolean) => {\n            let statsPercents = '';\n\n            if (emptyStats) {\n                statsPercents = trls[TrlKeys.statsEmpty];\n            } else {\n                statsPercents = format(trls[TrlKeys.statsRead], {\n                    '{0}': employerPoliteness?.readTopicPercent,\n                });\n            }\n\n            return statsPercents;\n        },\n        [employerPoliteness, trls]\n    );\n\n    const renderStatsActivity = useCallback(() => {\n        if (!managerInactiveData) {\n            return '';\n        }\n        const managerInactiveTrlCode = managerInactiveData.trl_code;\n\n        let statsActivity: ReactNode = '';\n\n        if (managerInactiveTrlCode === ManagerInactiveTrlCode.WeekExact) {\n            statsActivity = formatToReactComponent(trls[TrlKeys.statsWeekExact], {\n                '{0}': <ConversionDate value={managerInactiveData.inactive_days} />,\n            });\n        } else if (managerInactiveTrlCode) {\n            statsActivity = trls[TrlKeys.stats[managerInactiveTrlCode]];\n        }\n\n        return statsActivity && <p>{statsActivity}</p>;\n    }, [managerInactiveData, trls]);\n\n    const renderTooltip = useCallback(() => {\n        const emptyStats = !employerPoliteness?.allTopicCount;\n        const path = EmployerReadStatisticsModule.getPath(employerPoliteness?.readTopicPercent || 0);\n\n        if (!isClient) {\n            return null;\n        }\n\n        return (\n            <HoverTip\n                host={document.body}\n                placement={TipPlacement.Top}\n                render={() => (\n                    <div data-qa=\"employer-stats-tooltip\">\n                        {renderStatsPercents(emptyStats)}\n                        {employerResponseSpeed && <p>{trls[TrlKeys.responseSpeed[employerResponseSpeed]]}</p>}\n                        {renderStatsActivity()}\n                    </div>\n                )}\n            >\n                <div\n                    className={classnames(styles.responsesTableEmployerStats, {\n                        [styles.responsesTableEmployerStatsEmpty]: emptyStats,\n                    })}\n                >\n                    <Text importance={TextImportance.Tertiary}>\n                        <div className={styles.responsesTableEmployerStatsIndicator}>\n                            <svg viewBox=\"-1 -1 2 2\" className={styles.responsesTableEmployerStatsSvg}>\n                                <path className={styles.responsesTableEmployerStatsPath} d={path} />\n                            </svg>\n                        </div>\n                        <span\n                            className={styles.responsesTableEmployerStatsValue}\n                            data-qa=\"negotiations-employer-statistics\"\n                        >\n                            <span className={styles.responsesTableEmployerStatsNumber}>\n                                {employerPoliteness?.readTopicPercent}\n                            </span>\n                            %\n                        </span>\n                        {renderResponsesSpeedStat()}\n                    </Text>\n                </div>\n            </HoverTip>\n        );\n    }, [\n        employerPoliteness,\n        isClient,\n        renderResponsesSpeedStat,\n        renderStatsPercents,\n        employerResponseSpeed,\n        trls,\n        renderStatsActivity,\n    ]);\n\n    return (\n        <>\n            <div className={styles.responsesTableEmployerStatsContainerDummy} />\n            <div className={styles.responsesTableEmployerStatsContainer}>{renderTooltip()}</div>\n        </>\n    );\n};\n\nexport default translation(EmployerStats);\n","import { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { ApplicantSubState } from 'lux/models/negotiationTopic.types';\n\ninterface ListTopicStatusProps {\n    /** Флаг архивной вакансии */\n    archived: boolean;\n    /** Последнее состояние топика */\n    lastSubState: string;\n}\n\nconst TrlKeys = {\n    topicDeleted: 'applicant.negotiations.status.deleted',\n    vacancyArchived: 'applicant.negotiations.vacancyArchivedShort',\n};\n\nconst ListTopicStatus: TranslatedComponent<ListTopicStatusProps> = ({ archived, lastSubState, trls }) => {\n    let status;\n\n    if (!archived && lastSubState !== ApplicantSubState.Hide) {\n        return null;\n    }\n\n    if (archived) {\n        status = trls[TrlKeys.vacancyArchived];\n    } else if (lastSubState === ApplicantSubState.Hide) {\n        status = trls[TrlKeys.topicDeleted];\n    }\n\n    return <>{status}</>;\n};\n\nexport default translation(ListTopicStatus);\n","import classnames from 'classnames';\n\nimport topicSelectButtonClick from '@hh.ru/analytics-js-events/build/xhh/applicant/negotiation_list/topic_select_button_click';\nimport Checkbox from 'bloko/blocks/checkbox';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { Topic } from 'lux/models/applicantNegotiationTopic.types';\nimport { ManagerActivityData } from 'lux/models/applicantNegotiations/applicantEmployerManagersActivity';\nimport { ApplicantSubState } from 'lux/models/negotiationTopic.types';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport ApplicantNegotiationsListEmployerStats from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/EmployerStats';\nimport ApplicantNegotiationsListTopicStatus from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListTopicStatus';\n\nimport styles from './responses.less';\n\nenum TopicStatus {\n    NotViewed = 'not-viewed',\n    Viewed = 'viewed',\n    Invitation = 'invitation',\n    Discard = 'discard',\n}\n\nconst INVITATION_STATE = 'INVITATION';\nconst DISCARD_STATE = 'DISCARD';\nconst DISCARD_AFTER_INTERVIEW_STATE = 'DISCARD_AFTER_INTERVIEW';\nconst RESPONSE_STATE = 'RESPONSE';\n\ninterface ListStatsColumnProps {\n    /** Объект с полями топика */\n    topic: Topic;\n    /** Объект активности менеджера */\n    managerInactiveData: ManagerActivityData;\n    /** Флаг выбран ли фильтр активных откликов */\n    hasActiveFilter: boolean;\n    /** Хендлер изменения топика */\n    topicChange: (params: { checked: boolean; topicId: number }) => void;\n    /** Флаг выбора топика */\n    selected: boolean;\n}\n\nconst TrlKeys = {\n    status: {\n        [TopicStatus.Discard]: 'applicant.negotiations.denial',\n        [TopicStatus.Invitation]: 'applicant.negotiations.invitation',\n        [TopicStatus.NotViewed]: 'applicant.negotiations.notSeenMasc',\n        [TopicStatus.Viewed]: 'applicant.negotiations.seenMasc',\n    },\n    violatesRules: 'applicant.negotiations.employerViolatesRules',\n};\n\nconst getTopicStatus = (topic: Topic): TopicStatus => {\n    const mapping = {\n        [TopicStatus.NotViewed]: topic.lastState === RESPONSE_STATE && !topic.viewedByOpponent,\n        [TopicStatus.Viewed]: topic.lastState === RESPONSE_STATE && topic.viewedByOpponent,\n        [TopicStatus.Invitation]: topic.lastState === INVITATION_STATE,\n        [TopicStatus.Discard]: topic.lastState === DISCARD_STATE || topic.lastState === DISCARD_AFTER_INTERVIEW_STATE,\n    } as const;\n\n    return Object.keys(mapping).find((key: TopicStatus) => mapping[key]) || TopicStatus.Viewed;\n};\n\nconst ListStatsColumn: TranslatedComponent<ListStatsColumnProps> = ({\n    topic,\n    topicChange,\n    managerInactiveData,\n    hasActiveFilter,\n    selected,\n    trls,\n}) => {\n    const employerPoliteness = useSelector(\n        (state) => state.applicantEmployerPoliteness.employerPolitenessIndexes[topic.employerId]\n    );\n\n    const renderTopicStatus = () => {\n        const topicStatus = getTopicStatus(topic);\n\n        return (\n            <span\n                className={classnames(styles.responsesTableStatus, {\n                    [styles.responsesTableStatusInvitation]: topicStatus === TopicStatus.Invitation,\n                    [styles.responsesTableStatusDiscard]: topicStatus === TopicStatus.Discard,\n                    [styles.responsesTableStatusViolatesRules]: topic.employerViolatesRules,\n                })}\n                data-qa={classnames({\n                    'negotiations-item-invite': topicStatus === TopicStatus.Invitation,\n                    'negotiations-item-discard': topicStatus === TopicStatus.Discard,\n                    'negotiations-item-not-viewed': topicStatus === TopicStatus.NotViewed,\n                    'negotiations-item-viewed': topicStatus === TopicStatus.Viewed,\n                })}\n            >\n                {trls[topic.employerViolatesRules ? TrlKeys.violatesRules : TrlKeys.status[topicStatus]]}\n            </span>\n        );\n    };\n\n    const showEmployerStats = !topic.archived && topic.lastSubState !== ApplicantSubState.Hide;\n\n    return (\n        <>\n            {hasActiveFilter ? (\n                <Checkbox\n                    onChange={(event) => {\n                        if (event.target.checked) {\n                            topicSelectButtonClick({ topicId: topic.id });\n                        }\n                        topicChange({\n                            checked: event.target.checked,\n                            topicId: topic.id,\n                        });\n                    }}\n                    wrapperProps={{\n                        onClick: (event) => {\n                            event.stopPropagation();\n                        },\n                    }}\n                    checked={selected}\n                    data-qa=\"negotiations-item-checkbox\"\n                >\n                    {renderTopicStatus()}\n                </Checkbox>\n            ) : (\n                renderTopicStatus()\n            )}\n            <span\n                className={classnames(\n                    styles.responsesTableRowCellVacancyStatus,\n                    styles.responsesTableVacancyStatusShowOnXs\n                )}\n            >\n                <ApplicantNegotiationsListTopicStatus archived={topic.archived} lastSubState={topic.lastSubState} />\n            </span>\n            {!topic.employerViolatesRules && showEmployerStats && (\n                <ApplicantNegotiationsListEmployerStats\n                    employerPoliteness={employerPoliteness}\n                    managerInactiveData={managerInactiveData}\n                />\n            )}\n        </>\n    );\n};\n\nexport default translation(ListStatsColumn);\n","import { useElementShown } from '@hh.ru/analytics-js';\nimport negotiationItemPendingAutoActionSurveyTagButtonClick from '@hh.ru/analytics-js-events/build/xhh/applicant/negotiation_list/negotiation_item_pending_auto_action_survey_tag_button_click';\nimport negotiationItemPendingAutoActionSurveyTagElementShown from '@hh.ru/analytics-js-events/build/xhh/applicant/negotiation_list/negotiation_item_pending_auto_action_survey_tag_element_shown';\nimport HSpacing from 'bloko/blocks/hSpacing';\nimport Icon, { IconColor, IconScale, IconView } from 'bloko/blocks/icon';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\n\nimport styles from './responses.less';\n\nconst TrlKeys = {\n    tagText: 'applicant.negotiations.pendingAutoActionSurveyTag.text',\n};\n\ninterface PendingAutoActionSurveyTagProps {\n    topicId: number;\n}\n\nconst PendingAutoActionSurveyTag: TranslatedComponent<PendingAutoActionSurveyTagProps> = ({ topicId, trls }) => {\n    const tagRef = useElementShown(negotiationItemPendingAutoActionSurveyTagElementShown, { topicId });\n\n    return (\n        <>\n            <VSpacing base={2} />\n            <div\n                ref={tagRef}\n                className={styles.responsesTableRowTopicHasPendingAutoActionSurveyTag}\n                onClick={() => negotiationItemPendingAutoActionSurveyTagButtonClick({ topicId })}\n            >\n                <Icon view={IconView.Bot} initial={IconColor.Violet30} scale={IconScale.Small} />\n                <HSpacing base={1} />\n                <Text>{trls[TrlKeys.tagText]}</Text>\n            </div>\n        </>\n    );\n};\n\nexport default translation(PendingAutoActionSurveyTag);\n","import { MouseEventHandler } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\n\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport styles from './responses.less';\n\ninterface ViewSummaryActionProps {\n    topicId: number;\n}\n\nconst TrlKeys = {\n    viewResponsesSummary: 'applicant.negotiations.action.summary',\n};\n\nconst ViewSummaryAction: TranslatedComponent<ViewSummaryActionProps> = ({ trls, topicId }) => {\n    const hasVacancyResponsesSummaryService = useSelector((state) => state.hasVacancyResponsesSummaryService);\n    const dispatch = useDispatch();\n\n    const handleClick: MouseEventHandler<HTMLButtonElement> = (event) => {\n        event.stopPropagation();\n        dispatch(\n            push(\n                hasVacancyResponsesSummaryService\n                    ? `/applicant-services/vacancy-summary/${topicId}`\n                    : `/article/vacancy_summary?topicId=${topicId}`\n            )\n        );\n    };\n\n    return (\n        <button\n            type=\"button\"\n            className={styles.responsesTableAction}\n            onClick={handleClick}\n            data-qa={`negotiations-vacancy_summary`}\n        >\n            {trls[TrlKeys.viewResponsesSummary]}\n        </button>\n    );\n};\n\nexport default translation(ViewSummaryAction);\n","import { Fragment, useEffect, useRef, useState, useMemo, useContext, MouseEvent, RefObject } from 'react';\nimport classnames from 'classnames';\n\nimport { ChatikContext } from '@hh.ru/chatik-integration';\nimport { MenuItem } from 'bloko/blocks/drop';\nimport ClickMenu, { MenuPlacement } from 'bloko/blocks/drop/Menu/Click';\nimport HoverTip, { TipPlacement } from 'bloko/blocks/drop/Tip/HoverTip';\nimport Icon, {\n    IconDynamic,\n    IconLink,\n    IconKind,\n    IconScale,\n    IconColor,\n    IconAppearance,\n    IconShape,\n    IconView,\n} from 'bloko/blocks/icon';\nimport BlokoLink, { LinkAppearance, LinkKind } from 'bloko/blocks/link';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport requestAnimation from 'bloko/common/requestAnimation';\n\nimport HumanDate from 'lux/components/HumanDate';\nimport translation from 'lux/components/translation';\nimport { Topic, TopicActionName } from 'lux/models/applicantNegotiationTopic.types';\nimport { ManagerActivityData } from 'lux/models/applicantNegotiations/applicantEmployerManagersActivity';\nimport { VacancySearchItem } from 'lux/models/vacancySearch/vacancySearchItem.types';\nimport getCallDuration from 'lux/modules/callTracking/utils';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport ApplicantNegotiationsListAction from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListAction';\nimport ApplicantNegotiationsListStatsColumn from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListStatsColumn';\nimport ApplicantNegotiationsListTopicStatus from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListTopicStatus';\nimport PendingAutoActionSurveyTag from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/PendingAutoActionSurveyTag';\nimport ApplicantNegotiationsViewSummaryAction from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ViewSummaryAction';\n\nimport styles from './responses.less';\n\ninterface ShowActions {\n    decline: boolean;\n    delete: boolean;\n    restore: boolean;\n    feedback: boolean;\n    vacancySummary: boolean;\n}\n\ntype AugmentedTopicAction = TopicActionName | 'vacancySummary';\n\nconst shouldShowActionsInMenu = (actionNames: Record<AugmentedTopicAction, RefObject<HTMLElement>>) => {\n    return Object.entries(actionNames).reduce((acc, [actionName, ref]) => {\n        acc[actionName as TopicActionName] = ref.current !== null && ref.current.offsetTop > 0;\n        return acc;\n    }, {} as ShowActions);\n};\n\ninterface ListRowProps {\n    /** Объект с полями топика */\n    topic: Topic;\n    /** Объект вакансия соответсвующая текущему топику */\n    vacancy: VacancySearchItem;\n    /** Объект активности менеджера */\n    managerInactiveData: ManagerActivityData;\n    /** Хендлер измения топика */\n    topicChange: (params: { checked: boolean; topicId: number }) => void;\n    /** Флаг выбора топика */\n    selected: boolean;\n    /** Флаг выбран ли фильтр активных откликов */\n    hasActiveFilter: boolean;\n    showFeedbackTip: boolean;\n}\n\nconst TrlKeys = {\n    in: 'applicant.negotiations.in',\n    sec: 'sec',\n    min: 'min',\n    callResponse: 'applicant.negotiations.callResponse',\n};\n\nconst ListRow: TranslatedComponent<ListRowProps> = ({\n    topic,\n    vacancy,\n    managerInactiveData,\n    topicChange,\n    selected,\n    hasActiveFilter,\n    trls,\n    showFeedbackTip,\n}) => {\n    const openChatik = useContext(ChatikContext)?.openChatik;\n    const hhtmSource = useSelector(({ analyticsParams }) => analyticsParams.hhtmSource);\n    const topicCallHistory = useSelector((state) => state.topicsCallHistory[topic.id]);\n    const [unread, setUnread] = useState(topic.hasNewMessages);\n\n    const declineRef = useRef<HTMLSpanElement>(null);\n    const deleteRef = useRef<HTMLSpanElement>(null);\n    const restoreRef = useRef<HTMLSpanElement>(null);\n    const feedbackRef = useRef<HTMLSpanElement>(null);\n    const vacancySummaryRef = useRef<HTMLSpanElement>(null);\n    const refMap = useMemo(\n        () => ({\n            decline: declineRef,\n            delete: deleteRef,\n            restore: restoreRef,\n            feedback: feedbackRef,\n            vacancySummary: vacancySummaryRef,\n        }),\n        []\n    );\n\n    const [showMenu, setShowMenu] = useState(false);\n    const [showMenuActivator, setShowMenuActivator] = useState(false);\n    const [showActionsInMenu, setShowActionsInMenu] = useState({\n        decline: false,\n        delete: false,\n        restore: false,\n        feedback: false,\n        vacancySummary: false,\n    });\n\n    /**\n     * Если работодатель заблокирован за нарушение правил —\n     * из действий оставляем только \"Удалить\"\n     */\n    const topicActions = topic.employerViolatesRules\n        ? topic.actions?.filter((action) => action.name === TopicActionName.Delete)\n        : topic.actions;\n\n    useEffect(() => {\n        const showMenuIfNeeded = requestAnimation(() => {\n            const newMenu = shouldShowActionsInMenu({ ...refMap });\n            setShowActionsInMenu(newMenu);\n            setShowMenuActivator(Object.values(newMenu).includes(true));\n        });\n\n        showMenuIfNeeded();\n        window.addEventListener('resize', showMenuIfNeeded);\n\n        const menuElementsResizeObserver = new ResizeObserver(() => {\n            showMenuIfNeeded();\n        });\n\n        const elementsForObserve: HTMLSpanElement[] = [];\n\n        Object.keys(refMap).forEach((key) => {\n            const ref = refMap[key];\n            if (ref.current) {\n                elementsForObserve.push(ref.current);\n            }\n        });\n\n        elementsForObserve.forEach((ref) => {\n            menuElementsResizeObserver.observe(ref);\n        });\n\n        return () => {\n            elementsForObserve.forEach((ref) => {\n                menuElementsResizeObserver.unobserve(ref);\n            });\n            window.removeEventListener('resize', showMenuIfNeeded);\n        };\n    }, [refMap, showMenuActivator]);\n\n    const renderMenu = () => (\n        <IconDynamic>\n            <ClickMenu\n                placement={MenuPlacement.BottomEnd}\n                show={showMenu}\n                render={() => (\n                    <Fragment>\n                        {topicActions?.map((action) => (\n                            <Fragment key={action.name}>\n                                {showActionsInMenu[action.name] && (\n                                    <MenuItem>\n                                        <ApplicantNegotiationsListAction\n                                            action={action}\n                                            topicId={topic.id}\n                                            showFeedbackTip={showFeedbackTip}\n                                        />\n                                    </MenuItem>\n                                )}\n                            </Fragment>\n                        ))}\n                        {showActionsInMenu.vacancySummary && (\n                            <MenuItem>\n                                <ApplicantNegotiationsViewSummaryAction topicId={topic.id} />\n                            </MenuItem>\n                        )}\n                    </Fragment>\n                )}\n            >\n                <IconLink\n                    Element=\"button\"\n                    type=\"button\"\n                    onClick={(event: MouseEvent) => {\n                        event.stopPropagation();\n                        setShowMenu(!showMenu);\n                    }}\n                >\n                    <Icon\n                        view={IconView.Ellipsis}\n                        initial={IconColor.Gray40}\n                        kind={IconKind.Horizontal}\n                        scale={IconScale.Small}\n                    />\n                </IconLink>\n            </ClickMenu>\n        </IconDynamic>\n    );\n\n    const topicOnclick = () => {\n        setUnread(false);\n\n        openChatik?.({\n            chatId: topic.chatId,\n            view: 'widget',\n            hhtmFromLabel: hhtmSource,\n        });\n    };\n\n    const renderVacancyName = () => {\n        if (topic.cantBeOpenedWithCurrentResume) {\n            return <span data-qa=\"negotiations-item-vacancy\">{vacancy.name}</span>;\n        }\n\n        return (\n            <BlokoLink\n                appearance={LinkAppearance.Pseudo}\n                kind={topic.archived ? LinkKind.Secondary : undefined}\n                data-qa=\"negotiations-item-vacancy\"\n            >\n                {vacancy.name}\n            </BlokoLink>\n        );\n    };\n\n    const callDuration = getCallDuration(topicCallHistory, {\n        sec: trls[TrlKeys.sec],\n        min: trls[TrlKeys.min],\n    });\n\n    return (\n        <tr\n            className={classnames(styles.responsesTableRow, {\n                [styles.responsesTableRowWithCheckbox]: hasActiveFilter,\n                [styles.responsesTableRowUnread]: unread,\n                [styles.responsesTableRowSelected]: selected && hasActiveFilter,\n            })}\n            data-qa=\"negotiations-item\"\n            onClick={topicOnclick}\n        >\n            <td className={styles.responsesTableRowCell}>\n                <ApplicantNegotiationsListStatsColumn\n                    selected={selected}\n                    topic={topic}\n                    topicChange={topicChange}\n                    hasActiveFilter={hasActiveFilter}\n                    managerInactiveData={managerInactiveData}\n                />\n            </td>\n            <td className={classnames(styles.responsesTableRowCell, styles.responsesTableRowCellIcon)}>\n                {unread && topic.hasNewMessages && (\n                    <Icon\n                        view={IconView.Bubble}\n                        initial={IconColor.Green60}\n                        appearance={IconAppearance.Filled}\n                        kind={IconKind.Single}\n                        shape={IconShape.Square}\n                        scale={IconScale.Small}\n                    />\n                )}\n            </td>\n            <td className={classnames(styles.responsesTableRowCell, styles.responsesTableRowCellVacancy)}>\n                {renderVacancyName()}\n                <div className={styles.responsesTableRowEmployer}>\n                    <Text importance={TextImportance.Tertiary}>\n                        {trls[TrlKeys.in]}\n                        <span data-qa=\"negotiations-item-company\"> {vacancy.company.visibleName}</span>\n                    </Text>\n                </div>\n                {topic.hasPendingAutoActionSurvey && <PendingAutoActionSurveyTag topicId={topic.id} />}\n                <div className={styles.responsesTableRowVacancyDetails}>\n                    <div className={styles.responsesTableActionsAndMenuContainer}>\n                        <div className={styles.responsesTableActions}>\n                            {topicActions?.map?.((action) => (\n                                <span\n                                    onClick={(e) => e.stopPropagation()}\n                                    className={styles.responsesTableForm}\n                                    key={action.name}\n                                    ref={refMap[action.name]}\n                                >\n                                    <ApplicantNegotiationsListAction\n                                        action={action}\n                                        topicId={topic.id}\n                                        showFeedbackTip={showFeedbackTip && !showActionsInMenu.feedback}\n                                    />\n                                </span>\n                            ))}\n                            {!topic.employerViolatesRules && topic.applicantVacancySummaryEnabled && (\n                                <span className={styles.responsesTableForm} ref={vacancySummaryRef}>\n                                    <ApplicantNegotiationsViewSummaryAction topicId={topic.id} />\n                                </span>\n                            )}\n                        </div>\n                        <div>{!topic.employerViolatesRules && showMenuActivator && renderMenu()}</div>\n                    </div>\n                    <span className={styles.responsesTableDateShowOnXs}>\n                        <HumanDate date={topic.lastModifiedMillis} textify />\n                    </span>\n                </div>\n            </td>\n            <td\n                className={classnames(\n                    styles.responsesTableRowCell,\n                    styles.responsesTableRowCellVacancyStatus,\n                    styles.responsesTableRowCellNowrap\n                )}\n            >\n                <ApplicantNegotiationsListTopicStatus archived={topic.archived} lastSubState={topic.lastSubState} />\n            </td>\n            <td\n                className={classnames(\n                    styles.responsesTableRowCell,\n                    styles.responsesTableRowCellDate,\n                    styles.responsesTableRowCellNowrap,\n                    { [styles.responsesTableRowCellFailed]: topicCallHistory?.pickedUpPhone === false }\n                )}\n            >\n                {!topicCallHistory ? (\n                    <div className={classnames(styles.responseTableIcon, styles.responseTableIconManually)} />\n                ) : (\n                    <HoverTip\n                        host={!process.env.LUX_SERVER ? document.body : null}\n                        placement={TipPlacement.Top}\n                        render={() => trls[TrlKeys.callResponse]}\n                    >\n                        <div\n                            className={classnames(styles.responseTableIcon, {\n                                [styles.responseTableIconSuccess]: topicCallHistory.pickedUpPhone,\n                                [styles.responseTableIconFailed]: !topicCallHistory.pickedUpPhone,\n                            })}\n                        />\n                    </HoverTip>\n                )}\n                <span data-qa=\"negotiations-item-date\">\n                    <HumanDate date={topic.lastModifiedMillis} textify />\n                </span>\n                {callDuration && <span> • {callDuration}</span>}\n            </td>\n        </tr>\n    );\n};\n\nexport default translation(ListRow);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nexport default function <T extends Record<string, any>, K extends string>(array: T[] = [], key: K): Record<T[K], T> {\n    return array.reduce((result, item) => {\n        result[item[key]] = item;\n        return result;\n    }, {} as Record<T[K], T>);\n}\n","import { useState, useMemo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport topicSelectAllButtonClick from '@hh.ru/analytics-js-events/build/xhh/applicant/negotiation_list/topic_select_all_button_click';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport Checkbox from 'bloko/blocks/checkbox';\nimport Column from 'bloko/blocks/column';\nimport Gap from 'bloko/blocks/gap';\nimport BlokoLink, { LinkAppearance, LinkKind } from 'bloko/blocks/link';\nimport BlokoTranslateGuard from 'bloko/blocks/translateGuard';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport urlParser from 'bloko/common/urlParser';\n\nimport Pagination from 'lux/components/Pagination';\nimport translation from 'lux/components/translation';\nimport { Topic, TopicActionName } from 'lux/models/applicantNegotiationTopic.types';\nimport {\n    ApplicantNegitiationsOrder,\n    ApplicantNegotiationStatus,\n    NegotiationsFilterTab,\n    OrderDirection,\n} from 'lux/models/applicantNegotiations/applicantNegotiationsActionsData';\nimport paths from 'lux/modules/routePaths';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport ApplicantNegotiationsListBatchAction from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/BatchAction';\nimport NegotiationsFilterByStatus from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/FiltersByStatus';\nimport ApplicantNegotiationsListBanner from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListBanner';\nimport ApplicantNegotiationsListRow from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/ListRow';\nimport doActionWithApplicantNegotiation from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/doActionWithApplicantNegotiation';\nimport mapListOfObjects from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/mapListOfObjects';\n\nimport styles from './responses.less';\n\nconst BANNER_PLACE_INDEX = 4;\nconst TrlKeys = {\n    order: {\n        [ApplicantNegitiationsOrder.LastState]: 'applicant.negotiations.order.LAST_STATE',\n        [ApplicantNegitiationsOrder.LastModified]: 'applicant.negotiations.order.LAST_MODIFIED',\n    },\n\n    filter: {\n        [NegotiationsFilterTab.Active]: 'vacancyResponses.empty.active',\n        [NegotiationsFilterTab.All]: 'vacancyResponses.empty.all',\n    },\n\n    pageNumberWrong: 'vacancyResponses.empty.page',\n    vacancy: 'applicant.negotiations.order.VACANCY',\n    search: 'applicant.negotiations.search.vacancies',\n};\n\nconst List: TranslatedComponent = ({ trls }) => {\n    const storedLocation = useSelector((state) => state.router.location);\n    const topics = useSelector((state) => state.applicantNegotiations.topicList) || [];\n    const storedOrder = useSelector((state) => state.applicantNegotiationsActionsData.order);\n    const paging = useSelector((state) => state.applicantNegotiations.paging);\n    const deleteAction = useSelector((state) => state.applicantNegotiationsActionsData.deleteAction);\n    const filterInUse = useSelector((state) => state.applicantNegotiations.filterInUse || '');\n\n    const rawFilters = useSelector((state) => state.applicantNegotiationsActionsData.filters);\n    const rawVacancies = useSelector((state) => state.vacanciesShort.vacanciesList);\n    const rawManagerActivity = useSelector((state) => state.applicantEmployerManagersActivity);\n\n    const filters = useMemo(() => mapListOfObjects(rawFilters, 'name'), [rawFilters]);\n    const vacancies = useMemo(() => mapListOfObjects(rawVacancies, 'vacancyId'), [rawVacancies]);\n    const managerActivityMap = useMemo(\n        () => mapListOfObjects(rawManagerActivity, '@managerHhid'),\n        [rawManagerActivity]\n    );\n\n    const [selectedTopics, setSelectedTopics] = useState<number[]>([]);\n    const dispatch = useDispatch();\n\n    const dataQa = {\n        'data-qa': `responses-list${topics.length === 0 ? ' responses-list-empty' : ''}`,\n    };\n\n    const renderOrder = useCallback(\n        (orderType: ApplicantNegitiationsOrder) => {\n            const order = storedOrder[orderType];\n            if (!order) {\n                return null;\n            }\n            const dataQaOrderSelected =\n                order.order === OrderDirection.Ascending || order.order === OrderDirection.Descending\n                    ? 'negotiations-sort-selected'\n                    : '';\n\n            const location = urlParser(storedLocation.pathname + storedLocation.search);\n            const orderUrl = urlParser(order.href);\n            location.params = { ...location.params, ...orderUrl.params };\n\n            return (\n                <span className={styles.responsesTableStatus}>\n                    <BlokoLink\n                        appearance={LinkAppearance.Pseudo}\n                        to={location.href}\n                        data-qa={`negotiations-sort ${dataQaOrderSelected}`}\n                        kind={LinkKind.Secondary}\n                        Element={Link}\n                    >\n                        <BlokoTranslateGuard useSpan>{trls[TrlKeys.order[order.name]]}</BlokoTranslateGuard>\n                        <BlokoTranslateGuard useSpan>\n                            {order.order === OrderDirection.Ascending && ' ↑'}\n                        </BlokoTranslateGuard>\n                        <BlokoTranslateGuard useSpan>\n                            {order.order === OrderDirection.Descending && ' ↓'}\n                        </BlokoTranslateGuard>\n                    </BlokoLink>\n                </span>\n            );\n        },\n        [storedLocation.pathname, storedLocation.search, storedOrder, trls]\n    );\n\n    const topicChange = useCallback(\n        ({ checked, topicId }: { checked: boolean; topicId: number }) => {\n            const newSelectedTopics = selectedTopics.slice();\n\n            if (checked) {\n                newSelectedTopics.push(topicId);\n            } else if (newSelectedTopics.includes(topicId)) {\n                newSelectedTopics.splice(newSelectedTopics.indexOf(topicId), 1);\n            }\n\n            setSelectedTopics(newSelectedTopics);\n        },\n        [selectedTopics]\n    );\n\n    const renderTopic = useCallback(\n        (topic: Topic, index: number, showFeedbackTip: boolean) => {\n            const topicVacancy = vacancies[topic.vacancyId];\n            const managerInactiveData = managerActivityMap[topicVacancy.employerManager['@hhid']];\n\n            return [\n                index === BANNER_PLACE_INDEX && (\n                    <ApplicantNegotiationsListBanner key={`banner-${BANNER_PLACE_INDEX}`} />\n                ),\n                <ApplicantNegotiationsListRow\n                    topic={topic}\n                    topicChange={topicChange}\n                    managerInactiveData={managerInactiveData}\n                    vacancy={topicVacancy}\n                    key={topic.id}\n                    hasActiveFilter={filters.active.selected}\n                    selected={selectedTopics.includes(topic.id)}\n                    showFeedbackTip={showFeedbackTip}\n                />,\n            ];\n        },\n        [filters.active.selected, managerActivityMap, selectedTopics, topicChange, vacancies]\n    );\n\n    const renderPagination = useCallback(() => {\n        if (!paging) {\n            return null;\n        }\n        return (\n            <div className=\"b-pager\">\n                <Gap bottom>\n                    <Pagination {...paging} />\n                </Gap>\n            </div>\n        );\n    }, [paging]);\n\n    const renderTableContent = useCallback(() => {\n        let content;\n\n        if (topics.length === 0) {\n            if (urlParser(storedLocation.pathname + storedLocation.search).params.page) {\n                content = trls[TrlKeys.pageNumberWrong];\n            }\n\n            if (filterInUse) {\n                content = trls[TrlKeys.filter[filterInUse]];\n            }\n\n            return (\n                <Gap bottom>\n                    <span className={styles.responsesEmpty}>{content}</span>\n                    {ApplicantNegotiationStatus.All === filterInUse.toUpperCase() && (\n                        <Column xs=\"4\" s=\"0\" m=\"0\" l=\"0\" container>\n                            <Gap top>\n                                <Button stretched kind={ButtonKind.Primary} Element={Link} to={paths.vacancySearch}>\n                                    {trls[TrlKeys.search]}\n                                </Button>\n                            </Gap>\n                        </Column>\n                    )}\n                </Gap>\n            );\n        }\n\n        const topicWithFeedbackTip = topics.find((topic) =>\n            topic.actions?.some((action) => action.name === TopicActionName.Feedback)\n        );\n\n        return (\n            <>\n                <Gap bottom>\n                    <div className={styles.responsesTableWrapper}>\n                        <table className={styles.responsesTable}>\n                            <thead>\n                                <tr className={styles.responsesTableHeader}>\n                                    <th className={styles.responsesTableHeaderCell}>\n                                        {filters[NegotiationsFilterTab.Active].selected ? (\n                                            <Checkbox\n                                                checked={selectedTopics.length === topics.length}\n                                                onChange={(event) => {\n                                                    if (event.target.checked) {\n                                                        topicSelectAllButtonClick();\n                                                    }\n                                                    setSelectedTopics(\n                                                        event.target.checked ? topics.map(({ id }) => id) : []\n                                                    );\n                                                }}\n                                                data-qa=\"negotiations-item-checkbox-all\"\n                                            >\n                                                {renderOrder(ApplicantNegitiationsOrder.LastState)}\n                                            </Checkbox>\n                                        ) : (\n                                            renderOrder(ApplicantNegitiationsOrder.LastState)\n                                        )}\n                                    </th>\n                                    <th className={styles.responsesTableHeaderCell} />\n                                    <th className={styles.responsesTableHeaderCell}>{trls[TrlKeys.vacancy]}</th>\n                                    <th className={styles.responsesTableHeaderCell} />\n                                    <th className={styles.responsesTableHeaderCell}>\n                                        {renderOrder(ApplicantNegitiationsOrder.LastModified)}\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody className={styles.responsesTableTbody}>\n                                {topics.map((topic, index) =>\n                                    renderTopic(topic, index, topic === topicWithFeedbackTip)\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </Gap>\n                {renderPagination()}\n            </>\n        );\n    }, [\n        filterInUse,\n        filters,\n        renderOrder,\n        renderPagination,\n        renderTopic,\n        selectedTopics.length,\n        storedLocation.pathname,\n        storedLocation.search,\n        topics,\n        trls,\n    ]);\n\n    const batchRemove = useCallback(() => {\n        const { href, substate } = deleteAction;\n\n        void dispatch(\n            doActionWithApplicantNegotiation({\n                href,\n                substate,\n                topicId: selectedTopics.slice(),\n            })\n        );\n\n        setSelectedTopics([]);\n    }, [deleteAction, dispatch, selectedTopics]);\n\n    return (\n        <div className=\"HH-Pagination-ScrollToContainer\" {...dataQa}>\n            <Gap top bottom>\n                <NegotiationsFilterByStatus />\n                <ApplicantNegotiationsListBatchAction\n                    show={selectedTopics.length > 0 && filters.active.selected}\n                    batchRemove={batchRemove}\n                />\n            </Gap>\n            {renderTableContent()}\n        </div>\n    );\n};\n\nexport default translation(List);\n","import PropTypes from 'prop-types';\n\nimport Column from 'bloko/blocks/column';\nimport { H2 } from 'bloko/blocks/header';\nimport VSpacing from 'bloko/blocks/vSpacing';\n\nimport translation from 'lux/components/translation';\n\nconst Header = ({ trls }) => (\n    <Column xs=\"4\" s=\"8\" m=\"12\" l=\"16\">\n        <H2>{trls[Header.trls.title]}</H2>\n        <VSpacing base={4} />\n    </Column>\n);\n\nHeader.trls = {\n    title: 'applicant.negotiations.suitableVacancies',\n};\n\nHeader.propTypes = {\n    trls: PropTypes.object,\n};\n\nexport default translation(Header);\n","import { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Column from 'bloko/blocks/column';\nimport useBreakpoint, { Breakpoint } from 'bloko/common/hooks/useBreakpoint';\n\nimport VacancySearchItem from 'lux/components/VacancySearchItem';\nimport Source from 'lux/components/VacancySearchItem/Source';\n\nimport ApplicantSuitableVacanciesHeader from 'lux/pages/ApplicantNegotiations/components/ApplicantSuitableVacancies/Header';\n\nconst ApplicantSuitableVacancies = ({ suitableVacancies }) => {\n    const breakpoint = useBreakpoint();\n    const isXs = breakpoint === Breakpoint.XS;\n\n    if (!suitableVacancies?.vacancies) {\n        return null;\n    }\n\n    return (\n        <Fragment>\n            <ApplicantSuitableVacanciesHeader />\n            <Column xs=\"4\" s=\"8\" m=\"12\" l=\"16\">\n                <div className=\"recommended-vacancies\">\n                    {suitableVacancies.vacancies.map((vacancy) => (\n                        <VacancySearchItem\n                            key={vacancy.vacancyId}\n                            vacancy={vacancy}\n                            vacancySource={Source.ApplicantNegotiations}\n                            hhtmFromLabel=\"suitable_vacancies\"\n                            isXs={isXs}\n                        />\n                    ))}\n                </div>\n            </Column>\n        </Fragment>\n    );\n};\n\nApplicantSuitableVacancies.propTypes = {\n    suitableVacancies: PropTypes.shape({\n        resultsFound: PropTypes.number,\n        totalPages: PropTypes.number,\n        itemsOnPage: PropTypes.number,\n        vacancies: PropTypes.array,\n    }),\n};\n\nexport const ApplicantSuitableVacanciesRaw = ApplicantSuitableVacancies;\nexport const mapStateToProps = (state) => ({\n    suitableVacancies: state.suitableVacancies,\n});\n\nexport default connect(mapStateToProps)(ApplicantSuitableVacanciesRaw);\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { makeSetStoreField } from '@hh.ru/redux-create-reducer';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Icon, { IconLink, IconScale, IconColor, IconView } from 'bloko/blocks/icon';\nimport BlokoLink from 'bloko/blocks/link';\n\nimport translation from 'lux/components/translation';\nimport { useIsZarplataPlatform } from 'lux/hooks/usePlatform';\nimport fetcher from 'lux/modules/fetcher';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nconst surveysAction = makeSetStoreField('surveys');\n\nexport const removeSurvey =\n    ({ id }) =>\n    (dispatch, getState) => {\n        const { surveys } = getState();\n\n        return fetcher\n            .postFormData('/surveys/finish', {\n                sid: id,\n            })\n            .then(\n                () => dispatch(surveysAction(surveys.filter((item) => item.id !== id))),\n                (err) => dispatch(showDefaultError(err))\n            );\n    };\n\nconst Surveys = ({ surveys, removeSurvey, trls }) => {\n    const isZarplata = useIsZarplataPlatform();\n    if (isZarplata) {\n        return null;\n    }\n    if (surveys.length === 0) {\n        return null;\n    }\n\n    return surveys.map(({ url, id, text }) => (\n        <div className=\"announcement\" key={id}>\n            <BlokoLink disableVisited Element={Link} to={url} target=\"_blank\">\n                {trls[Surveys.trls.take]}\n                {` \"${text}\"`}\n            </BlokoLink>\n            <IconLink onClick={removeSurvey.bind(null, { id })}>\n                <Icon view={IconView.Cross} initial={IconColor.Gray50} scale={IconScale.Small} />\n            </IconLink>\n        </div>\n    ));\n};\n\nSurveys.trls = {\n    take: 'survey.take',\n};\n\nSurveys.propTypes = {\n    /** Список опросов */\n    surveys: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string,\n            text: PropTypes.string,\n            url: PropTypes.string,\n        })\n    ),\n    trls: PropTypes.object,\n    /** Сигнал удаления опроса */\n    removeSurvey: PropTypes.func.isRequired,\n};\n\nexport default connect((state) => ({ surveys: state.surveys }), { removeSurvey })(translation(Surveys));\n","import PropTypes from 'prop-types';\n\nimport Column from 'bloko/blocks/column';\n\nimport JobSearchStatusBanner from 'lux/components/Applicant/JobSearchStatus/JobSearchStatusBanner';\nimport AutoSearchMessengersTip from 'lux/components/AutosearchMessengers/AutoSearchMessengersTip';\nimport ClickmeList from 'lux/components/Clickme/List';\nimport ClickmeReferralLink from 'lux/components/Clickme/ReferralLink';\nimport ContainerForMicroFrontend from 'lux/components/CodeInjector/ContainerForMicroFrontend';\nimport PageLayout, { HeaderLayout } from 'lux/components/PageLayout';\nimport translation from 'lux/components/translation';\n\nimport NegotiationsFilterByActive from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/FiltersByActive';\nimport NegotiationsList from 'lux/pages/ApplicantNegotiations/components/ApplicantNegotiations/List';\nimport ApplicantSuitableVacancies from 'lux/pages/ApplicantNegotiations/components/ApplicantSuitableVacancies';\nimport Surveys from 'lux/pages/ApplicantNegotiations/components/Surveys';\n\nconst ApplicantNegotiations = ({ trls }) => {\n    return (\n        <PageLayout title={trls[ApplicantNegotiations.trls.title]} layout={HeaderLayout}>\n            <Column xs=\"4\" s=\"8\" m=\"12\" l=\"16\">\n                <Surveys />\n                <JobSearchStatusBanner />\n                <NegotiationsFilterByActive />\n                <NegotiationsList />\n            </Column>\n            <AutoSearchMessengersTip />\n            <ApplicantSuitableVacancies />\n            <ClickmeList\n                clickmeReferralLink={\n                    <Column xs=\"4\" s=\"8\" m=\"12\" l=\"16\">\n                        <ClickmeReferralLink />\n                    </Column>\n                }\n            />\n            <ContainerForMicroFrontend place=\"topicInterviewReviewWizard\" />\n        </PageLayout>\n    );\n};\n\nApplicantNegotiations.trls = {\n    title: 'vacancyresponses.and.invitations.title',\n};\n\nApplicantNegotiations.propTypes = {\n    trls: PropTypes.object,\n};\n\nexport default translation(ApplicantNegotiations);\n"],"names":["element","params","window","requestIdleCallback","visibilityWatcher","onVisible","ids","id","templateName","adfoxParams","banners","Banners","getPath","percent","largeArcFlag","coordX","coordY","radianValue","Math","PI","cos","sin","map","value","round","getCoordinatesForPercent","putScript","context","remote","onerror","onload","props","node","document","createElement","Object","entries","forEach","prop","addEventListener","src","dataset","webpack","appendChild","getRemoteWebpackModuleLink","getExistingRemote","querySelector","loadingRemoteEntry","loggingPlaces","getRemoteModule","async","url","container","shareScope","remoteFallbackUrl","loadEntry","Promise","resolve","existingRemote","__webpack_init_sharing__","linkToRemoteWebpackModule","inited","init","__webpack_share_scopes__","onError","remoteScriptResource","PerformanceObserver","supportedEntryTypes","includes","performance","getEntriesByType","filter","entry","name","remoteScriptResourceDuration","reduce","prev","item","duration","StatsSender","globalVars","sendMetrics","report","then","type","crossOrigin","getOrLoadRemote","error","Module","get","classList","hasDefault","moduleValue","default","toString","length","getAndLoadARemoteApp","globalServiceName","identifier","initApp","globalServiceVars","hasSupportToDestroyApp","unmountApp","STATE_LOADERS_MAPPING","userNotifications","dispatch","addUserNotifications","place","serviceInfo","isFullPage","undefined","loadService","add","data","isSuccessSSR","renderResult","remoteServiceName","inlineScript","innerHTML","remoteEntry","ssrRenderNode","styles","href","promise","keys","putLink","rel","scripts","notLoadedScript","useSSRResult","fetcher","headers","pageName","analyticsParams","hhtmSource","build","console","noContent","getStore","deleteMicroFrontend","store","storeFieldName","proxiedState","loader","processProxiedState","options","visible","checkVisible","offsetWidth","offsetHeight","getClientRects","removeEventListener","listenersSetted","loadBannerOnVisible","require","Banner","Component","componentDidMount","this","isEmpty","ReactDOM","setAutoHeight","bind","initBanners","componentDidUpdate","componentWillUnmount","shouldComponentUpdate","nextProps","cancelFetchBanners","search","pathname","userTargeting","adfoxParamsProperty","style","height","clientHeight","bannerId","bannerCommonTargeting","bannerAdTargeting","bannerParams","render","children","connect","state","router","location","AdsExternalBanner","cId","pp","p2","enableAdfox","shouldHideExternalBanners","isExternalBannersRestricted","useIsBelarus","className","PropTypes","Wrapper","propTypes","HIDE_ON_XS_SCREEN_POSITION","Set","List","clickmeReferralLink","bottom","Clickme","index","xs","has","s","m","l","bannerPropType","stateProps","dispatchProps","ownProps","ReferralLink","trls","Link","to","target","size","TextSize","link","translation","BannersGroup","groupClassNames","showReferralLink","Fragment","defaultProps","ContainerForMicroFrontend","preloadContent","scale","LoadingScale","containerRef","useRef","classNameForJS","useContext","CodeInjectorContext","getClassName","content","current","dangerouslySetInnerHTML","__html","useEffect","app","loadProxyService","appModule","globalServiceNameValue","setTimeout","isSupportDestroy","ref","ContainerForMicroFrontendWrapper","useSelector","microFrontends","keyComponent","setKeyComponent","useState","previousServiceInfoRef","Date","now","memo","TrlKeys","days","one","some","many","zero","hours","DateOnly","hasValue","formatValue","shouldShowInHours","translations","suppressHydrationWarning","useIsClient","isClient","setIsClient","useLayoutEffect","BannerPlace","autoGeneratedReducer","CallStatuses","JobSearchStatusBanner","activeTrigger","applicantUserStatusesTrigger","useDispatch","statusFilter","query","isClosed","setIsClosed","isDisabled","setIsDisabled","setJobSearchStatus","useSetJobSearchStatus","JobSearchStatusForm","markAsRead","useMarkAsRead","needToShow","JobSearchStatusTrigger","ApplicantNegotiationStatus","onClose","markRead","ElementShownAnchor","fn","responseOfferUserStatusElementShown","base","strong","IconLink","onClick","responseOfferUserStatusCloseButtonClick","view","IconView","initial","IconColor","IconScale","JobSearchStatus","finally","disabled","ButtonScale","kind","ButtonKind","addNotification","APPLICANT_JOB_SEARCH_STATUS_SUCCESS","appearance","ButtonAppearance","analyticsData","AutoSearchMessengersTip","chatBot","modalIsVisible","toggleModal","useToggleState","handleButtonClick","useCallback","Analytics","right","Element","tip","text","button","AutosearchMessengersModal","isVisible","handleCloseModal","NegotiationsFilterTab","FiltersByActive","filters","applicantNegotiationsActionsData","urlParser","top","tab","Tab","selected","active","TopicActionName","BatchAction","show","batchRemove","classNames","FormSpacer","icon","FiltersByStatus","filterByStatus","setSelected","oldSelected","filtersMap","useMemo","newSelected","result","onChange","event","statusValue","push","flexible","Option","ListBanner","bannerL","bannerM","bannerS","bannerXS","colSpan","calls","pickedUpPhone","items","find","call","status","findCall","durationSeconds","floor","min","sec","method","substate","topicId","getState","updateUrl","topic","err","showDefaultError","Decline","Delete","Restore","Feedback","ListAction","action","showFeedbackTip","setDisabled","actionHandler","stopPropagation","doActionWithApplicantNegotiation","renderButton","Infotip","placement","InfoPlacement","theme","InfoTheme","markAsViewedEvent","MarkAsViewedEvent","ResponseSpeedColor","EmployerResponseSpeed","COLOR_SET","Low","LowColor","EmptyColor","Medium","MediumColor","High","HighColor","ManagerInactiveTrlCode","EmployerStats","employerPoliteness","managerInactiveData","employerResponseSpeed","replyTime","replyTotalWorkingTimeDays","renderResponsesSpeedStat","width","fill","rx","x","renderStatsPercents","emptyStats","statsPercents","format","readTopicPercent","renderStatsActivity","managerInactiveTrlCode","trl_code","statsActivity","formatToReactComponent","inactive_days","renderTooltip","allTopicCount","path","EmployerReadStatisticsModule","host","body","TipPlacement","classnames","importance","TextImportance","viewBox","d","archived","lastSubState","ApplicantSubState","TopicStatus","RESPONSE_STATE","Discard","Invitation","NotViewed","Viewed","ListStatsColumn","topicChange","hasActiveFilter","applicantEmployerPoliteness","employerPolitenessIndexes","employerId","renderTopicStatus","topicStatus","mapping","lastState","viewedByOpponent","key","getTopicStatus","employerViolatesRules","showEmployerStats","checked","topicSelectButtonClick","wrapperProps","PendingAutoActionSurveyTag","tagRef","useElementShown","negotiationItemPendingAutoActionSurveyTagElementShown","negotiationItemPendingAutoActionSurveyTagButtonClick","ViewSummaryAction","hasVacancyResponsesSummaryService","ListRow","vacancy","openChatik","ChatikContext","topicCallHistory","topicsCallHistory","unread","setUnread","hasNewMessages","declineRef","deleteRef","restoreRef","feedbackRef","vacancySummaryRef","refMap","decline","delete","restore","feedback","vacancySummary","showMenu","setShowMenu","showMenuActivator","setShowMenuActivator","showActionsInMenu","setShowActionsInMenu","topicActions","actions","showMenuIfNeeded","requestAnimation","newMenu","actionNames","acc","actionName","offsetTop","values","menuElementsResizeObserver","ResizeObserver","elementsForObserve","observe","unobserve","callDuration","getCallDuration","chatId","hhtmFromLabel","IconAppearance","IconKind","shape","IconShape","cantBeOpenedWithCurrentResume","LinkAppearance","LinkKind","company","visibleName","hasPendingAutoActionSurvey","e","applicantVacancySummaryEnabled","IconDynamic","MenuPlacement","MenuItem","HumanDate","date","lastModifiedMillis","textify","array","ApplicantNegitiationsOrder","storedLocation","topics","applicantNegotiations","topicList","storedOrder","order","paging","deleteAction","filterInUse","rawFilters","rawVacancies","vacanciesShort","vacanciesList","rawManagerActivity","applicantEmployerManagersActivity","mapListOfObjects","vacancies","managerActivityMap","selectedTopics","setSelectedTopics","dataQa","renderOrder","orderType","dataQaOrderSelected","OrderDirection","orderUrl","useSpan","newSelectedTopics","slice","splice","indexOf","renderTopic","topicVacancy","vacancyId","employerManager","renderPagination","Pagination","renderTableContent","page","toUpperCase","stretched","paths","topicWithFeedbackTip","topicSelectAllButtonClick","Header","H2","title","ApplicantSuitableVacancies","suitableVacancies","isXs","useBreakpoint","Breakpoint","VacancySearchItem","vacancySource","Source","resultsFound","totalPages","itemsOnPage","ApplicantSuitableVacanciesRaw","surveysAction","makeSetStoreField","Surveys","surveys","removeSurvey","useIsZarplataPlatform","disableVisited","take","sid","ApplicantNegotiations","PageLayout","layout","HeaderLayout"],"sourceRoot":""}