{"version":3,"file":"93149.ab426f438ae9ab0758c8.js","mappings":"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","sources":["xhh/./webapp-static/lux/components/Attention/index.tsx","xhh/./webapp-static/lux/components/SavedSearch/BOAction.tsx","xhh/./webapp-static/lux/components/SavedSearch/FilterType.tsx","xhh/./webapp-static/lux/components/SavedSearch/MoveSavedSearch.tsx","xhh/./webapp-static/lux/components/SavedSearch/SavedSearchControls.tsx","xhh/./webapp-static/lux/components/SavedSearch/SavedSearchItemHeader.tsx","xhh/./webapp-static/lux/components/SavedSearch/SavedSearchType.ts"],"sourcesContent":["import { FC, memo, PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nexport enum AttentionKind {\n    Bad = 'bad',\n    Good = 'good',\n}\n\ninterface AttentionProps {\n    kind?: AttentionKind;\n    corrected?: boolean;\n}\n\nconst Attention: FC<AttentionProps & PropsWithChildren> = ({ kind, children, corrected }) => (\n    <div\n        className={classnames('attention', {\n            [`attention_${kind || ''}`]: kind,\n            'attention_corrected-width': corrected,\n        })}\n    >\n        {children}\n    </div>\n);\n\nexport default memo(Attention);\n","import { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Button, { ButtonAppearance, ButtonType } from 'bloko/blocks/button';\nimport { FormSpacer } from 'bloko/blocks/form';\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\nimport Modal, { ModalFooter, ModalHeader, ModalTitle } from 'bloko/blocks/modal';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nexport enum ActionType {\n    UnsubscribeAll = 'unsubscribe_all',\n    DeleteAll = 'delete_all',\n}\n\ndeclare global {\n    interface FetcherPostApi {\n        '/resumesavedsearch/unsubscribe_all': {\n            queryParams: {\n                employerManagerId: string;\n            };\n            body: null;\n            response: void;\n        };\n        '/resumesavedsearch/delete_all': {\n            queryParams: {\n                employerManagerId: string;\n            };\n            body: null;\n            response: void;\n        };\n    }\n}\n\nconst TrlKeys = {\n    unsubscribe_all: 'savedSearches.unsubscribeAll', // eslint-disable-line camelcase\n    delete_all: 'savedSearches.deleteAll', // eslint-disable-line camelcase\n    title: 'bonus.list.get-bonus-confirm',\n    submit: 'contents.button.yes',\n    cancel: 'contents.button.no',\n};\n\nconst BOAction: TranslatedComponent<{ actionType: ActionType }> = ({ trls, actionType }) => {\n    const dispatch = useDispatch();\n    const [isLoading, setIsLoading] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    const employerManagerId = useSelector((state) => state.resumeSavedSearch?.employerManager?.employerManagerId || '');\n    const isSudo = useSelector((state) => state.resumeSavedSearch.isSudo);\n\n    const handleSubmit = useCallback(() => {\n        setIsLoading(true);\n        fetcher\n            .post(`/resumesavedsearch/${actionType}`, null, { params: { employerManagerId } })\n            .catch((error) => {\n                dispatch(showDefaultError(error));\n            })\n            .finally(() => {\n                setIsLoading(false);\n                window.location.reload();\n            });\n    }, [actionType, dispatch, employerManagerId]);\n\n    if (!isSudo) {\n        return null;\n    }\n\n    return (\n        <>\n            <FormSpacer>\n                <Button\n                    onClick={() => {\n                        setShowModal(true);\n                    }}\n                    type={ButtonType.Button}\n                    data-qa={`autosearch-header__${actionType}`}\n                >\n                    {trls[TrlKeys[actionType]]}\n                </Button>\n            </FormSpacer>\n            <Modal\n                visible={showModal}\n                onClose={() => {\n                    setShowModal(false);\n                }}\n            >\n                <ModalHeader>\n                    <ModalTitle>{trls[TrlKeys.title]}</ModalTitle>\n                </ModalHeader>\n                <div className=\"saved-search-backoffice-confirmation-modal\">\n                    <ModalFooter>\n                        <Button\n                            loading={isLoading && <Loading scale={LoadingScale.Small} />}\n                            type={ButtonType.Button}\n                            onClick={handleSubmit}\n                        >\n                            {trls[TrlKeys.submit]}\n                        </Button>\n                        <FormSpacer>\n                            <Button\n                                appearance={ButtonAppearance.Outlined}\n                                onClick={() => {\n                                    setShowModal(false);\n                                }}\n                            >\n                                {trls[TrlKeys.cancel]}\n                            </Button>\n                        </FormSpacer>\n                    </ModalFooter>\n                </div>\n            </Modal>\n        </>\n    );\n};\n\nexport default translation(BOAction);\n","import Select, { Option } from 'bloko/blocks/select';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport urlParser from 'bloko/common/urlParser';\n\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst TrlKeys = {\n    selectAll: 'savedSearches.filter.all',\n    selectSubscribed: 'savedSearches.filter.subscribed',\n    selectUnsubscribed: 'savedSearches.filter.unsubscribed',\n};\n\nconst FilterType: TranslatedComponent<{ filterValue: string }> = ({ trls, filterValue }) => {\n    const location = useSelector(({ router }) => router.location);\n    const handleFilterChange = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n        const parsedUrl = urlParser(`${location.pathname}${location.search}`);\n        parsedUrl.params.filter = [target.value];\n        parsedUrl.params.page = [0];\n        window.location.href = parsedUrl.href;\n    };\n    return (\n        <span className=\"saved-search-top-menu-container__item-right\">\n            <Select value={filterValue} onChange={handleFilterChange} data-qa=\"autosearch-header__filter\" flexible>\n                <Option value=\"all\">{trls[TrlKeys.selectAll]}</Option>\n                <Option value=\"subscribed\">{trls[TrlKeys.selectSubscribed]}</Option>\n                <Option value=\"unsubscribed\">{trls[TrlKeys.selectUnsubscribed]}</Option>\n            </Select>\n        </span>\n    );\n};\n\nexport default translation(FilterType);\n","import { useCallback, useState } from 'react';\nimport { useDispatch, DefaultRootState } from 'react-redux';\n\nimport Button, { ButtonType } from 'bloko/blocks/button';\nimport { FormSpacer } from 'bloko/blocks/form';\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\nimport TreeSelectorDummy from 'bloko/blocks/treeSelector/Dummy';\nimport TreeSelectorPopup from 'bloko/blocks/treeSelectorPopup';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { fromTree } from 'bloko/common/tree/treeCollectionHelper';\n\nimport translation from 'lux/components/translation';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\ndeclare global {\n    interface FetcherGetApi {\n        fetchManagerList: {\n            queryParams: {\n                employerManagerId?: string;\n                excludedManagerId?: string;\n                employerId?: string;\n            };\n            response: { data: DefaultRootState['managersList'] };\n        };\n    }\n    interface FetcherPostApi {\n        fetchMoveSavedSearch: {\n            queryParams: void;\n            body: {\n                idList: number[];\n                targetManagerId: string;\n            };\n            response: void;\n        };\n    }\n}\n\nconst TrlKeys = {\n    error: 'employer.savedSearches.move.error',\n    title: 'employer.savedSearches.move.title',\n    submit: 'employer.savedSearches.move',\n    cancel: 'employer.savedSearches.move.cancel',\n    buttonTitle: 'savedSearches.move',\n};\n\nconst MoveSavedSearch: TranslatedComponent<{ disabled: boolean; selectedItems: number[] }> = ({\n    trls,\n    disabled,\n    selectedItems,\n}) => {\n    const dispatch = useDispatch();\n    const [selectedManager, setSelectedManager] = useState('');\n    const [managersList, setManagersList] = useState<{ id: string; text: string }[]>([]);\n    const [isVisible, setIsVisible] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const employerManagerId = useSelector((state) => state?.employerManager?.id);\n    const employerId = useSelector((state) => state.resumeSavedSearch?.employerManager?.employerId);\n    const currentManagerId = useSelector((state) => state.resumeSavedSearch?.employerManager?.employerManagerId);\n\n    const isSudo = useSelector((state) => state.resumeSavedSearch.isSudo);\n\n    const handleOpenModal = useCallback(() => {\n        setIsLoading(true);\n        const sudoParams = {\n            employerId,\n            excludedManagerId: currentManagerId,\n        };\n        const userParams = { employerManagerId };\n        fetcher\n            .get('/employer/resumefolders/managers' as 'fetchManagerList', {\n                params: isSudo ? sudoParams : userParams,\n            })\n            .then((response) => {\n                setManagersList(response.data.map(({ id, name }) => ({ id: `${id}`, text: name })));\n                setIsVisible(true);\n            })\n            .catch((error) => {\n                dispatch(showDefaultError(error));\n            })\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }, [currentManagerId, dispatch, employerId, employerManagerId, isSudo]);\n\n    const handleSubmit = useCallback(() => {\n        const data = {\n            idList: selectedItems,\n            targetManagerId: selectedManager,\n            ...(isSudo && { sourceEmployerManagerId: currentManagerId }),\n        };\n        fetcher\n            .postFormData('/employer/autosearch_move' as 'fetchMoveSavedSearch', data)\n            .catch((error) => {\n                dispatch(showDefaultError(error));\n            })\n            .finally(() => {\n                setIsVisible(false);\n                window.location.reload();\n            });\n    }, [currentManagerId, dispatch, isSudo, selectedItems, selectedManager]);\n\n    return (\n        <>\n            <FormSpacer>\n                <Button\n                    onClick={handleOpenModal}\n                    loading={isLoading && <Loading scale={LoadingScale.Small} />}\n                    type={ButtonType.Button}\n                    disabled={disabled}\n                    data-qa=\"autosearch-header__move\"\n                >\n                    {trls[TrlKeys.buttonTitle]}\n                </Button>\n            </FormSpacer>\n            <TreeSelectorPopup\n                visible={isVisible}\n                selected={[selectedManager]}\n                trl={{\n                    submit: trls[TrlKeys.submit],\n                    cancel: trls[TrlKeys.cancel],\n                }}\n                onClose={() => {\n                    setIsVisible(!isVisible);\n                }}\n                onSubmit={handleSubmit}\n                disabledSubmit={!selectedManager}\n                title={trls[TrlKeys.title]}\n            >\n                <TreeSelectorDummy\n                    singleChoice\n                    onChange={(id) => setSelectedManager(id)}\n                    collection={fromTree(managersList)}\n                />\n            </TreeSelectorPopup>\n        </>\n    );\n};\n\nexport default translation(MoveSavedSearch);\n","import Button, { ButtonKind, ButtonType } from 'bloko/blocks/button';\nimport Checkbox from 'bloko/blocks/checkbox';\nimport { FormSpacer } from 'bloko/blocks/form';\nimport Loading, { LoadingColor, LoadingScale } from 'bloko/blocks/loading';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { LoadingActivityName } from 'lux/models/resumeSavedSearch';\n\nimport BOAction, { ActionType } from 'lux/components/SavedSearch/BOAction';\nimport FilterType from 'lux/components/SavedSearch/FilterType';\nimport MoveSavedSearch from 'lux/components/SavedSearch/MoveSavedSearch';\nimport { SavedSearchType } from 'lux/components/SavedSearch/SavedSearchType';\n\nconst TrlKeys = {\n    subscribeButton: 'savedSearches.subscribe.many',\n    unsubscribeButton: 'savedSearches.unsubscribe',\n    deleteButton: 'savedSearches.delete',\n};\n\ninterface SavedSearchControlsProps {\n    selectedItems: number[];\n    isAllSelected: boolean;\n    filterValue: string;\n    currentLoadingActivityName?: LoadingActivityName;\n    handleAllSelected: () => void;\n    handleChange: (loadingActivityName: LoadingActivityName) => void;\n    searchType: SavedSearchType;\n}\n\nconst SavedSearchControls: TranslatedComponent<SavedSearchControlsProps> = ({\n    trls,\n    selectedItems,\n    isAllSelected,\n    filterValue,\n    currentLoadingActivityName,\n    handleAllSelected,\n    handleChange,\n    searchType,\n}) => {\n    const isDisabled = selectedItems.length === 0 || !!currentLoadingActivityName;\n\n    return (\n        <div className=\"saved-search-top-menu-container\">\n            <div>\n                <Checkbox checked={isAllSelected} onChange={handleAllSelected} data-qa=\"autosearch-header__select-all\">\n                    &#8204;\n                </Checkbox>\n                <FormSpacer>\n                    <Button\n                        onClick={() => handleChange(LoadingActivityName.Subscribe)}\n                        loading={\n                            currentLoadingActivityName === LoadingActivityName.Subscribe && (\n                                <Loading initial={LoadingColor.White} scale={LoadingScale.Small} />\n                            )\n                        }\n                        kind={ButtonKind.Primary}\n                        type={ButtonType.Button}\n                        disabled={isDisabled}\n                        data-qa=\"autosearch-header__subscribe\"\n                    >\n                        {trls[TrlKeys.subscribeButton]}\n                    </Button>\n                </FormSpacer>\n                <FormSpacer>\n                    <Button\n                        onClick={() => handleChange(LoadingActivityName.Unsubscribe)}\n                        loading={\n                            currentLoadingActivityName === LoadingActivityName.Unsubscribe && (\n                                <Loading scale={LoadingScale.Small} />\n                            )\n                        }\n                        type={ButtonType.Button}\n                        disabled={isDisabled}\n                        data-qa=\"autosearch-header__unsubscribe\"\n                    >\n                        {trls[TrlKeys.unsubscribeButton]}\n                    </Button>\n                </FormSpacer>\n                {searchType === SavedSearchType.Resume && <BOAction actionType={ActionType.UnsubscribeAll} />}\n                {searchType === SavedSearchType.Resume && (\n                    <MoveSavedSearch disabled={isDisabled} selectedItems={selectedItems} />\n                )}\n                <FormSpacer>\n                    <Button\n                        onClick={() => handleChange(LoadingActivityName.Delete)}\n                        loading={\n                            currentLoadingActivityName === LoadingActivityName.Delete && (\n                                <Loading scale={LoadingScale.Small} />\n                            )\n                        }\n                        type={ButtonType.Button}\n                        disabled={isDisabled}\n                        data-qa=\"autosearch-header__delete\"\n                    >\n                        {trls[TrlKeys.deleteButton]}\n                    </Button>\n                </FormSpacer>\n                {searchType === SavedSearchType.Resume && <BOAction actionType={ActionType.DeleteAll} />}\n            </div>\n            <VSpacing base={4} />\n            <FilterType filterValue={filterValue} />\n        </div>\n    );\n};\n\nexport default translation(SavedSearchControls);\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Button from 'bloko/blocks/button';\nimport Gap from 'bloko/blocks/gap';\nimport { H3Section } from 'bloko/blocks/header';\nimport InputText from 'bloko/blocks/inputText';\nimport Link, { LinkAppearance, LinkKind } from 'bloko/blocks/link';\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\nimport BlokoText, { TextSize } from 'bloko/blocks/text';\nimport { KeyCode } from 'bloko/common/constants/keyboard';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport formatDate from 'Modules/formatDate';\nimport translation from 'lux/components/translation';\nimport fetcher from 'lux/modules/fetcher';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nimport { SavedSearchType } from 'lux/components/SavedSearch/SavedSearchType';\n\nconst TrlKeys = {\n    addName: 'employer.resumesSearch.addName',\n    confirmName: 'employer.resumesSearch.confirmName',\n    tooManySymbols: 'autosearch.resume.name.too.many.symbols',\n};\n\ninterface SavedSearchItemHeaderProps {\n    id: number;\n    name?: string;\n    date: string;\n    type: SavedSearchType;\n}\n\nconst RENAME_VACANCY_URL = '/vacancysavedsearch/rename';\nconst RENAME_RESUME_URL = '/resumesavedsearch/rename';\n\ndeclare global {\n    interface FetcherPostApi {\n        [RENAME_VACANCY_URL]: {\n            queryParams: void;\n            body: { id: string; name: string };\n            response: void;\n        };\n        [RENAME_RESUME_URL]: {\n            queryParams: void;\n            body: { id: number; name: string };\n            response: void;\n        };\n    }\n}\n\nconst SavedSearchItemHeader: TranslatedComponent<SavedSearchItemHeaderProps> = ({ trls, name, date, id, type }) => {\n    const dispatch = useDispatch();\n    const [SavedSearchName, setName] = useState(name || '');\n    const [isEdit, setEdit] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n    const renameUrl = type === SavedSearchType.Vacancy ? RENAME_VACANCY_URL : RENAME_RESUME_URL;\n    const renameSavedSearch = () => {\n        const currentName = SavedSearchName.trim();\n        if (name === currentName) {\n            setEdit(false);\n            return;\n        }\n        setLoading(true);\n        fetcher\n            .postFormData(renameUrl, {\n                id,\n                name: currentName,\n            })\n            .catch((error) => {\n                setName(name || '');\n                dispatch(showDefaultError(error));\n            })\n            .finally(() => {\n                setEdit(false);\n                setLoading(false);\n            });\n    };\n    return (\n        <div className=\"saved-search-item__header\">\n            <Gap right>\n                <div className=\"saved-search__title\">\n                    <BlokoText size={TextSize.Large}>\n                        {!isEdit ? (\n                            <H3Section onClick={() => setEdit(true)}>\n                                <Link\n                                    data-qa=\"autosearch__title\"\n                                    appearance={LinkAppearance.Pseudo}\n                                    kind={LinkKind.Tertiary}\n                                >\n                                    {SavedSearchName || trls[TrlKeys.addName]}\n                                </Link>\n                            </H3Section>\n                        ) : (\n                            <span className=\"title-editor\">\n                                <span className=\"title-editor__field\">\n                                    <InputText\n                                        value={SavedSearchName}\n                                        onChange={setName}\n                                        onKeyDown={(e) => {\n                                            if (e.keyCode === KeyCode.Enter) {\n                                                renameSavedSearch();\n                                            }\n                                        }}\n                                        disabled={isLoading}\n                                        data-qa=\"autosearch__input\"\n                                        maxLength={128}\n                                    />\n                                </span>\n                                <span className=\"title-editor__submit\">\n                                    <Button\n                                        onClick={renameSavedSearch}\n                                        loading={isLoading && <Loading scale={LoadingScale.Small} />}\n                                        data-qa=\"autosearch__ok\"\n                                        stretched\n                                    >\n                                        {trls[TrlKeys.confirmName]}\n                                    </Button>\n                                </span>\n                            </span>\n                        )}\n                    </BlokoText>\n                </div>\n            </Gap>\n            <div className=\"saved-search-item-date\" suppressHydrationWarning>\n                {formatDate(new Date(Number(date)), 'd MMMM')}\n            </div>\n        </div>\n    );\n};\n\nexport default translation(SavedSearchItemHeader);\n","export enum SavedSearchType {\n    Resume = 'resume',\n    Vacancy = 'vacancy',\n}\n"],"names":["AttentionKind","Attention","kind","children","corrected","className","classnames","memo","ActionType","TrlKeys","unsubscribe_all","delete_all","title","submit","cancel","BOAction","trls","actionType","dispatch","useDispatch","isLoading","setIsLoading","useState","showModal","setShowModal","employerManagerId","useSelector","state","resumeSavedSearch","employerManager","isSudo","handleSubmit","useCallback","fetcher","params","catch","error","showDefaultError","finally","window","location","reload","FormSpacer","onClick","type","ButtonType","visible","onClose","ModalHeader","ModalTitle","ModalFooter","loading","scale","LoadingScale","appearance","ButtonAppearance","translation","FilterType","filterValue","router","value","onChange","target","parsedUrl","urlParser","pathname","search","filter","page","href","flexible","Option","MoveSavedSearch","disabled","selectedItems","selectedManager","setSelectedManager","managersList","setManagersList","isVisible","setIsVisible","id","employerId","currentManagerId","handleOpenModal","sudoParams","excludedManagerId","userParams","then","response","data","map","name","text","idList","targetManagerId","sourceEmployerManagerId","selected","trl","onSubmit","disabledSubmit","singleChoice","collection","fromTree","SavedSearchControls","isAllSelected","currentLoadingActivityName","handleAllSelected","handleChange","searchType","isDisabled","length","checked","LoadingActivityName","initial","LoadingColor","ButtonKind","SavedSearchType","UnsubscribeAll","DeleteAll","base","SavedSearchItemHeader","date","SavedSearchName","setName","isEdit","setEdit","setLoading","renameUrl","renameSavedSearch","currentName","trim","right","size","TextSize","onKeyDown","e","keyCode","KeyCode","maxLength","stretched","H3Section","LinkAppearance","LinkKind","suppressHydrationWarning","formatDate","Date","Number"],"sourceRoot":""}