{"version":3,"file":"15292.af09b19f1f95edadd5c4.js","mappings":"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","sources":["xhh/./webapp-static/js/HH/SendFbPixelRegistrationConversion.ts","xhh/./webapp-static/js/Modules/constants/auth.ts","xhh/./webapp-static/lux/components/AccountDeleteInactive/Select.tsx","xhh/./webapp-static/lux/components/AccountDeleteInactive/index.tsx","webpack://xhh/./webapp-static/lux/components/AdvertisementAgreement/styles.less?170b","xhh/./webapp-static/lux/components/AdvertisementAgreement/Checkbox.tsx","xhh/./webapp-static/lux/components/AdvertisementAgreement/Text.tsx","xhh/./webapp-static/lux/components/AdvertisementAgreement/useShowAdvertisementAgreement.ts","xhh/./webapp-static/lux/components/AdvertisementSubscription/AdvertisementSubscriptionApplicant.tsx","xhh/./webapp-static/lux/components/AdvertisementSubscription/useShowAdvertisementSubscriptionApplicant.ts","xhh/./webapp-static/lux/components/ApplicantSignInSignUpFlow/Control.jsx","xhh/./webapp-static/lux/components/ApplicantSignInSignUpFlow/MultiAccountGroupingStep/MultiAccountGrouping.tsx","xhh/./webapp-static/lux/components/ApplicantSignInSignUpFlow/MultiAccountGroupingStep/MultiAccountGroupingForm.tsx","xhh/./webapp-static/lux/components/ApplicantSignInSignUpFlow/SignInStep/SignInForm.jsx","xhh/./webapp-static/lux/components/ApplicantSignInSignUpFlow/SignUpStep/SignUp.tsx","xhh/./webapp-static/lux/components/ApplicantSignInSignUpFlow/SignUpStep/SignUpForm.jsx","xhh/./webapp-static/lux/components/ApplicantSignInSignUpFlow/Submit.tsx","xhh/./webapp-static/lux/components/ApplicantSignInSignUpFlow/VKAppListener.jsx","xhh/./webapp-static/lux/components/MagritteRedesignComponents/Link.tsx","xhh/./webapp-static/lux/components/MagritteRedesignComponents/Text.tsx","xhh/./webapp-static/lux/hooks/useApplicantSignupFields.js","xhh/./webapp-static/lux/hooks/useCreateVrDraftResume.ts","xhh/./webapp-static/lux/hooks/useDV360Analytics.ts","xhh/./webapp-static/lux/hooks/useFingerprints.js","xhh/./webapp-static/lux/hooks/useInitialFormFields.js","xhh/./webapp-static/lux/hooks/useOTPSignupFlow.js","xhh/./webapp-static/lux/hooks/usePostponedVacancy.js","xhh/./webapp-static/lux/hooks/useVkAppIntegrationFocus.js","xhh/./webapp-static/lux/hooks/useVkAppIntegrationReady.js","xhh/./webapp-static/lux/modules/analytics/formatAnalyticErrors.js"],"sourcesContent":["// tempexp_25028_file\nimport Cookies from 'bloko/common/Cookies';\n\nconst COOKIES_NAME = 'fbclid';\n\nconst EVENT_NAME = 'CompleteRegistration';\n\nconst sendFbPixelRegistrationConversion = (isB2B = true): void => {\n    const fbclidCookies = Cookies.get(COOKIES_NAME);\n\n    if (!fbclidCookies) {\n        return;\n    }\n\n    const [fbclid, b2cPixelId, b2bPixelId, externalId] = fbclidCookies.split('.');\n\n    const pixelId = isB2B ? b2bPixelId : b2cPixelId;\n\n    const pixelSrc = `https://www.facebook.com/tr?id=${pixelId}&ev=${EVENT_NAME}&cd[external_id]=${externalId}&cd[fbclid]=${fbclid}`;\n\n    const img = document.createElement('img');\n    img.src = pixelSrc;\n    img.width = 1;\n    img.height = 1;\n    img.style.display = 'none';\n    document.body.appendChild(img);\n\n    Cookies.remove(COOKIES_NAME);\n};\n\nexport default sendFbPixelRegistrationConversion;\n","const VK_APP_ORIGIN = 'https://common-hhpage-backend.hh.ru';\nexport default VK_APP_ORIGIN;\n","import ConversionNumber from 'bloko/blocks/conversion';\nimport Select, { Option } from 'bloko/blocks/select';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\n\nconst DELETE_INACTIVE_TIME_YEARS = [3, 4, 5];\nexport const DELETE_INACTIVE_TIME_DEFAULT = 'YEARS_5';\n\nconst TrlKeys = {\n    title: 'accountDeleteInactiveTime.title',\n    in: 'accountDeleteInactiveTime.in',\n    description: 'accountDeleteInactiveTime.description',\n    years: {\n        one: 'abstract.years.one',\n        some: 'abstract.years.some',\n        many: 'abstract.years.many',\n    },\n};\n\nconst AccountDeleteInactiveSelect: TranslatedComponent = ({ trls, ...props }) => {\n    return (\n        <Select {...props}>\n            {DELETE_INACTIVE_TIME_YEARS.map((value) => {\n                return (\n                    <Option value={`YEARS_${value}`} key={value}>\n                        {formatToReactComponent(trls[TrlKeys.in], {\n                            '{0}': (\n                                <ConversionNumber\n                                    many={trls[TrlKeys.years.many]}\n                                    some={trls[TrlKeys.years.some]}\n                                    one={trls[TrlKeys.years.one]}\n                                    value={value}\n                                />\n                            ),\n                        })}\n                    </Option>\n                );\n            })}\n        </Select>\n    );\n};\n\nexport default translation(AccountDeleteInactiveSelect);\n","import { ReactNode, useState } from 'react';\n\nimport { TextStyle, TextTypography } from '@hh.ru/magritte-ui';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport Link from 'lux/components/MagritteRedesignComponents/Link';\nimport Text from 'lux/components/MagritteRedesignComponents/Text';\nimport translation from 'lux/components/translation';\nimport { useIsBelarus } from 'lux/hooks/useCountries';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst TrlKeys = {\n    title: 'accountDeleteInactiveTime.title',\n    description: 'accountDeleteInactiveTime.description',\n    descriptionManual: 'accountDeleteInactiveTime.descriptionManual',\n    change: 'accountDeleteInactiveTime.change',\n};\n\ninterface Props {\n    renderSelect: () => ReactNode;\n    spacingBefore?: ReactNode;\n    spacingAfter?: ReactNode;\n}\n\nconst Features = {\n    enableAccountDeleteInactive: 'enable_account_delete_inactive',\n};\n\nconst AccountDeleteInactive: TranslatedComponent<Props> = ({ trls, spacingBefore, spacingAfter, renderSelect }) => {\n    const [isManual, setIsManual] = useState(false);\n    const enableAccountDeleteInactive = useSelector(\n        ({ features }) => features[Features.enableAccountDeleteInactive] as boolean\n    );\n    const isBelarus = useIsBelarus();\n\n    if (!isBelarus || !enableAccountDeleteInactive) {\n        return null;\n    }\n\n    const typography = TextTypography.Paragraph2Regular;\n    return (\n        <div>\n            {spacingBefore}\n            {isManual ? (\n                <>\n                    <Text typography={TextTypography.Subtitle3Semibold}>{trls[TrlKeys.title]}</Text>\n                    <VSpacing base={2} />\n                    {renderSelect()}\n                    <VSpacing base={2} />\n                    <Text typography={typography} style={TextStyle.Secondary}>\n                        {trls[TrlKeys.descriptionManual]}\n                    </Text>\n                </>\n            ) : (\n                <>\n                    <Text typography={typography} style={TextStyle.Secondary}>\n                        {trls[TrlKeys.description]}\n                    </Text>\n                    <VSpacing base={2} />\n                    <Link typography={typography} onClick={() => setIsManual(true)}>\n                        {trls[TrlKeys.change]}\n                    </Link>\n                    <div className=\"g-hidden\">{renderSelect()}</div>\n                </>\n            )}\n            {spacingAfter}\n        </div>\n    );\n};\n\nexport default translation(AccountDeleteInactive);\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"label--MTOEvR8u2k_uqY4oMD7X\"};","import { FC, ComponentProps } from 'react';\n\nimport { Checkbox as MagritteCheckbox, Text, TextTypography } from '@hh.ru/magritte-ui';\nimport BlokoCheckbox from 'bloko/blocks/checkbox';\n\nimport useMagritte from 'lux/hooks/useMagritte';\n\nimport AdvertisementAgreementText from 'lux/components/AdvertisementAgreement/Text';\n\nimport styles from './styles.less';\n\nconst AdvertisementAgreementCheckbox: FC<ComponentProps<typeof MagritteCheckbox>> = (props) => {\n    const isMagritte = useMagritte();\n\n    if (isMagritte) {\n        return (\n            <Text typography={TextTypography.Label3Regular}>\n                <label className={styles.label}>\n                    <MagritteCheckbox {...props} />\n                    <div>\n                        <AdvertisementAgreementText />\n                    </div>\n                </label>\n            </Text>\n        );\n    }\n\n    return (\n        <BlokoCheckbox {...props}>\n            <AdvertisementAgreementText />\n        </BlokoCheckbox>\n    );\n};\n\nexport default AdvertisementAgreementCheckbox;\n","import { Link as MagritteLink, TextTypography } from '@hh.ru/magritte-ui';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport BlokoLink from 'bloko/blocks/link';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport useMagritte from 'lux/hooks/useMagritte';\n\nconst TrlKeys = {\n    text: 'advertisementAgreement.checkbox.text',\n    textBirthday: 'advertisementAgreement.checkbox.birthday.text',\n    linkOne: 'advertisementAgreement.checkbox.text.part.1',\n    linkTwo: 'advertisementAgreement.checkbox.text.part.2',\n};\n\ninterface AdvertisementAgreementTextProps {\n    isBirthday?: boolean;\n    articleId?: string;\n}\n\nconst AdvertisementAgreementText: TranslatedComponent<AdvertisementAgreementTextProps> = ({\n    trls,\n    isBirthday,\n    articleId,\n}) => {\n    if (!articleId) {\n        articleId = isBirthday ? '30902' : '30901';\n    }\n    const isMagritte = useMagritte();\n    const typography = TextTypography.Label3Regular;\n\n    if (isMagritte) {\n        return formatToReactComponent(trls[isBirthday ? TrlKeys.textBirthday : TrlKeys.text], {\n            '{0}': (\n                <MagritteLink\n                    inline\n                    typography={typography}\n                    Element={Link}\n                    to={`/article/${articleId}`}\n                    target=\"_blank\"\n                >\n                    {trls[TrlKeys.linkOne]}\n                </MagritteLink>\n            ),\n            '{1}': (\n                <MagritteLink\n                    inline\n                    typography={typography}\n                    Element={Link}\n                    to={`/article/${articleId}#clause1`}\n                    target=\"_blank\"\n                >\n                    {trls[TrlKeys.linkTwo]}\n                </MagritteLink>\n            ),\n        });\n    }\n\n    return formatToReactComponent(trls[isBirthday ? TrlKeys.textBirthday : TrlKeys.text], {\n        '{0}': (\n            <BlokoLink disableVisited Element={Link} to={`/article/${articleId}`} target=\"_blank\">\n                {trls[TrlKeys.linkOne]}\n            </BlokoLink>\n        ),\n        '{1}': (\n            <BlokoLink disableVisited Element={Link} to={`/article/${articleId}#clause1`} target=\"_blank\">\n                {trls[TrlKeys.linkTwo]}\n            </BlokoLink>\n        ),\n    });\n};\n\nexport default translation(AdvertisementAgreementText);\n","import { useIsBelarus } from 'lux/hooks/useCountries';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst Features = {\n    enableAdvertisementAgreement: 'enable_advertisement_agreement',\n};\n\nexport default (): boolean => {\n    const enableAdvertisementAgreement = useSelector(\n        ({ features }) => features[Features.enableAdvertisementAgreement] as boolean\n    );\n    const isBelarus = useIsBelarus();\n    return isBelarus && enableAdvertisementAgreement;\n};\n","import { FieldInputProps } from 'react-final-form';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Checkbox from 'bloko/blocks/checkbox';\nimport BlokoLink from 'bloko/blocks/link';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport { useIsZarplataPlatform } from 'lux/hooks/usePlatform';\n\ninterface CheckboxProps {\n    input: FieldInputProps<boolean | undefined>;\n}\n\nconst TrlKeys = {\n    text: 'advertisementSubscriptionApplicant.checkbox.text',\n    linkHh: 'advertisementSubscriptionApplicant.checkbox.text.part.1',\n    linkZp: 'advertisementSubscriptionApplicant.checkbox.link_zp',\n};\n\nconst HH_MARKETING_AGREEMENT_LINK = '/article/marketing_agreement';\nconst ZP_MARKETING_AGREEMENT_LINK = '/article/32173';\n\nconst AdvertisementSubscriptionApplicant: TranslatedComponent<CheckboxProps> = ({ trls, input }) => {\n    const isZarplata = useIsZarplataPlatform();\n\n    return (\n        <Checkbox {...input} value={String(input.value)}>\n            <Text importance={TextImportance.Secondary}>\n                {formatToReactComponent(trls[TrlKeys.text], {\n                    '{0}': (\n                        <BlokoLink\n                            disableVisited\n                            Element={Link}\n                            to={isZarplata ? ZP_MARKETING_AGREEMENT_LINK : HH_MARKETING_AGREEMENT_LINK}\n                            target=\"_blank\"\n                        >\n                            {trls[isZarplata ? TrlKeys.linkZp : TrlKeys.linkHh]}\n                        </BlokoLink>\n                    ),\n                })}\n            </Text>\n        </Checkbox>\n    );\n};\n\nexport default translation(AdvertisementSubscriptionApplicant);\n","import { useIsRussia } from 'lux/hooks/useCountries';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst Features = {\n    enableAdvertisementSubscriptionApplicant: 'enable_advertisement_subscription_applicant_checkbox',\n};\n\nexport default (): boolean => {\n    const enableAdvertisementAgreement = useSelector(\n        ({ features }) => features[Features.enableAdvertisementSubscriptionApplicant] as boolean\n    );\n    const isRussia = useIsRussia();\n    return isRussia && enableAdvertisementAgreement;\n};\n","import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport { FormError } from 'bloko/blocks/form';\nimport InputText, { InputType } from 'bloko/blocks/inputText';\nimport BlokoLink from 'bloko/blocks/link';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport blokoCapitalize from 'bloko/common/capitalize';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst Control = ({ input, meta, error, capitalize, trls, placeholder, inputRef, ...otherProps }) => {\n    const loginFormUrl = useSelector((state) => state.authUrl['login-form']);\n\n    const onBlur = (event) => {\n        Analytics.sendEvent('form', 'applicant-register-form', input.name);\n        input.onBlur(event);\n    };\n\n    const onChange = (value) => {\n        input.onChange(capitalize ? blokoCapitalize(value) : value);\n    };\n\n    const currentError = error || (meta?.submitFailed && meta?.touched && meta?.error);\n\n    const renderError = (name, error) => {\n        if (!error) {\n            return null;\n        }\n        if (name === 'login' && error.startsWith('EXISTS')) {\n            return formatToReactComponent(trls[Control.trls.loginExists], {\n                '{0}': (\n                    <BlokoLink Element={Link} to={loginFormUrl} disableVisited>\n                        {trls[Control.trls.login]}\n                    </BlokoLink>\n                ),\n            });\n        }\n        if (name === 'login' && error === 'COUNTRY_BLACKLISTED') {\n            return trls[Control.trls.loginRestrictedCountry];\n        }\n        if (error === 'EMPTY') {\n            return trls[Control.trls.empty];\n        }\n\n        return trls[Control.trls[`${name}Invalid`]];\n    };\n\n    return (\n        <Fragment>\n            <InputText\n                {...input}\n                type={InputType.Text}\n                autoCorrect=\"off\"\n                autoCapitalize=\"off\"\n                spellCheck=\"false\"\n                capitalize={capitalize}\n                invalid={!!currentError}\n                onBlur={onBlur}\n                onChange={onChange}\n                placeholder={placeholder}\n                ref={inputRef}\n                {...otherProps}\n            />\n            {!!currentError && <VSpacing base={2} />}\n            <FormError\n                show={!!currentError}\n                data-qa={`field-error-${input.name} field-error-${input.name}_${currentError}`}\n            >\n                {renderError(input.name, currentError)}\n            </FormError>\n        </Fragment>\n    );\n};\n\nControl.propTypes = {\n    /** react-final-form input **/\n    input: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired,\n        onBlur: PropTypes.func,\n        onChange: PropTypes.func,\n    }).isRequired,\n    /** react-final-form meta **/\n    meta: PropTypes.object,\n    inputRef: PropTypes.object,\n    error: PropTypes.string,\n    capitalize: PropTypes.bool,\n    placeholder: PropTypes.string.isRequired,\n    trls: PropTypes.object,\n};\n\nControl.trls = {\n    empty: 'error.signup.empty.mobile',\n    firstNameInvalid: 'error.signup.name_invalid.mobile',\n    lastNameInvalid: 'error.signup.lastname_invalid.mobile',\n    loginInvalid: 'error.signup.login.invalid',\n    loginExists: 'error.signup.login.exists',\n    loginRestrictedCountry: 'error.signup.login.restrictedCountry',\n    login: 'error.signup.login',\n    phoneInvalid: 'resumes.phoneVerification.login.invalid',\n};\n\nexport default translation(Control);\n","import Column from 'bloko/blocks/column';\nimport { FormItem } from 'bloko/blocks/form';\nimport { H2Section } from 'bloko/blocks/header';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format, formatToReactComponent } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport MultiAccountGroupingForm, {\n    MultiAccountGroupingFormBaseProps,\n} from 'lux/components/ApplicantSignInSignUpFlow/MultiAccountGroupingStep/MultiAccountGroupingForm';\n\nexport interface MultiAccountGroupingProps extends MultiAccountGroupingFormBaseProps {\n    errorPageLogin?: boolean;\n}\n\nconst TrlKeys = {\n    passwordSent: 'registration.registered.passwordSent',\n    letterComeSoon: 'registration.registered.letterComeSoon',\n    letterMultiaccountNote: 'registration.registered.letterMultiaccountNote',\n    letterHighlightedPart: 'registration.registered.letterHighlightedPart',\n};\n\nconst MultiAccountGrouping: TranslatedComponent<MultiAccountGroupingProps> = ({\n    trls,\n    errorPageLogin = false,\n    ...formProps\n}) => {\n    const { login } = useSelector(({ otp }) => otp);\n\n    return (\n        <MultiAccountGroupingForm\n            render={({ renderInput, renderError, renderSubmit }) => {\n                return (\n                    <Column l=\"6\" m=\"6\" s=\"6\" xs=\"4\" container={errorPageLogin}>\n                        <H2Section>\n                            {format(trls[TrlKeys.passwordSent], {\n                                '{0}': login as string,\n                            })}\n                        </H2Section>\n                        <VSpacing base={3} />\n                        <p>\n                            {formatToReactComponent(trls[TrlKeys.letterMultiaccountNote], {\n                                '{0}': (\n                                    <Text Element=\"span\" strong>\n                                        {trls[TrlKeys.letterHighlightedPart]}\n                                    </Text>\n                                ),\n                            })}\n                        </p>\n                        <p>{trls[TrlKeys.letterComeSoon]}</p>\n                        <VSpacing base={6} />\n                        <FormItem>{renderInput()}</FormItem>\n                        {renderError()}\n                        <VSpacing base={8} />\n                        {renderSubmit({ isStretched: !errorPageLogin })}\n                    </Column>\n                );\n            }}\n            {...formProps}\n        />\n    );\n};\n\nexport default translation(MultiAccountGrouping);\n","import { useState, useCallback, useEffect, ReactNode } from 'react';\nimport { Form as FinalForm, Field as FinalField } from 'react-final-form';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport Button, { ButtonKind, ButtonType } from 'bloko/blocks/button';\nimport { FormError } from 'bloko/blocks/form';\nimport InputPassword from 'bloko/blocks/inputText/inputPassword';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport Form from 'lux/components/Form';\nimport translation from 'lux/components/translation';\nimport fetcher from 'lux/modules/fetcher';\n\nconst CHECK_PASSWORD_URL = '/multiaccount_grouping/check_employer_password';\n\ndeclare global {\n    interface FetcherPostApi {\n        [CHECK_PASSWORD_URL]: {\n            queryParams: void;\n            body: {\n                password: string;\n            };\n            response: void;\n        };\n    }\n}\n\ninterface RenderSubmitProps {\n    isStretched?: boolean;\n}\n\ninterface MultiAccountGroupingFormProps {\n    next: (password: string) => void;\n    render: (args: {\n        renderInput: () => ReactNode;\n        renderError: () => ReactNode;\n        renderSubmit: (args?: RenderSubmitProps) => ReactNode;\n    }) => ReactNode;\n}\n\nexport type MultiAccountGroupingFormBaseProps = Omit<MultiAccountGroupingFormProps, 'render'>;\n\nconst TrlKeys = {\n    passwordFromLetter: 'login.passwordFromLetter',\n    continue: 'multiaccount.grouping.continue',\n    wrongPassword: 'multiaccount.grouping.checkPassword.wrong',\n};\n\nconst MultiAccountGroupingForm: TranslatedComponent<MultiAccountGroupingFormProps> = ({ trls, render, next }) => {\n    const [isSending, setIsSending] = useState(false);\n    const [wrongPassword, setWrongPassword] = useState(false);\n\n    useEffect(() => {\n        Analytics.sendHHEvent('screen_shown', {\n            hhtmSource: 'multiaccount_enter_password',\n        });\n    }, []);\n\n    const onSubmit = useCallback(\n        async (values: { password: string }) => {\n            setIsSending(true);\n            setWrongPassword(false);\n            Analytics.sendHHEventButtonClick('continue');\n\n            try {\n                await fetcher.postFormData(CHECK_PASSWORD_URL, {\n                    ...values,\n                });\n            } catch (error) {\n                setWrongPassword(true);\n                return;\n            } finally {\n                setIsSending(false);\n            }\n\n            next(values.password);\n        },\n        [next]\n    );\n\n    const renderInput = () => {\n        return (\n            <FinalField\n                name=\"password\"\n                render={({ input, meta }) => (\n                    <InputPassword\n                        {...input}\n                        data-qa=\"password-input\"\n                        invalid={meta.invalid && meta.submitFailed}\n                        autoFocus\n                        autoCorrect=\"off\"\n                        autoCapitalize=\"off\"\n                        placeholder={trls[TrlKeys.passwordFromLetter]}\n                        onToggle={(isPasswordVisible) => {\n                            Analytics.sendHHEventButtonClick('login_password_view_toggle', {\n                                isPasswordVisible,\n                            });\n                        }}\n                    />\n                )}\n            />\n        );\n    };\n\n    const renderError = () => {\n        return (\n            <FormError show={wrongPassword} data-qa=\"password-error\">\n                {trls[TrlKeys.wrongPassword]}\n            </FormError>\n        );\n    };\n\n    const renderSubmit = ({ isStretched }: RenderSubmitProps = {}) => {\n        return (\n            <Button\n                kind={ButtonKind.Primary}\n                type={ButtonType.Submit}\n                disabled={isSending}\n                data-qa={'password-submit'}\n                stretched={isStretched}\n            >\n                {trls[TrlKeys.continue]}\n            </Button>\n        );\n    };\n\n    return (\n        <FinalForm\n            onSubmit={onSubmit}\n            render={({ handleSubmit }) => (\n                <Form method=\"post\" onSubmit={handleSubmit}>\n                    {render({ renderInput, renderError, renderSubmit })}\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default translation(MultiAccountGroupingForm);\n","import { useEffect, useRef, useState } from 'react';\nimport { Field as FinalField, Form as FinalForm } from 'react-final-form';\nimport { useDispatch } from 'react-redux';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport { useCaptcha } from '@hh.ru/hhcaptcha';\nimport { makeSetStoreField } from '@hh.ru/redux-create-reducer';\nimport { ButtonScale } from 'bloko/blocks/button';\n\nimport Control from 'lux/components/ApplicantSignInSignUpFlow/Control';\nimport Submit from 'lux/components/ApplicantSignInSignUpFlow/Submit';\nimport VKAppListener from 'lux/components/ApplicantSignInSignUpFlow/VKAppListener';\nimport Form from 'lux/components/Form';\nimport Hhcaptcha from 'lux/components/Hhcaptcha';\nimport Recaptcha from 'lux/components/Recaptcha';\nimport translation from 'lux/components/translation';\nimport useApplicantSignupFields from 'lux/hooks/useApplicantSignupFields';\nimport useAutofocus from 'lux/hooks/useAutofocus';\nimport useInitialFields from 'lux/hooks/useInitialFormFields';\nimport usePostponedVacancy from 'lux/hooks/usePostponedVacancy';\nimport useVkAppIntegrationFocus from 'lux/hooks/useVkAppIntegrationFocus';\nimport { SIGNUP_FORM } from 'lux/hooks/useVkAppIntegrationReady';\nimport formatAnalyticErrors from 'lux/modules/analytics/formatAnalyticErrors';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nconst otpAction = makeSetStoreField('otp');\nconst formFields = ['login'];\n\nexport const getFieldProps = ({ name, conditions }, { value, error } = {}) => ({\n    name,\n    maxLength: conditions.parts[0].maxLength,\n    value,\n    error,\n});\n\nexport const loginBy = { EMAIL: 'email', SMS: 'phone' };\n\nconst requiredValidator = (value) => (value?.trim?.() ? undefined : 'EMPTY');\n\nconst submitAnalytics = ({ errors, authType = null, vacancyId, isSignupPage }) => {\n    Analytics.sendHHEvent('form_submit', {\n        formName: 'applicant_authorization',\n        authType: loginBy[authType] || 'unknown',\n        errors: formatAnalyticErrors('login', errors),\n        type: 'by_code',\n        vacancyId,\n        isSignupPage,\n    });\n};\n\nconst SignInForm = ({\n    backurl,\n    next,\n    render,\n    trls,\n    callbackSubmit,\n    isSignupPage,\n    isAutofocusEnabled = true,\n    dataQaModifier,\n}) => {\n    const [isFetching, setFetching] = useState(false);\n    const [fieldsSignup, setFieldsSignup] = useState({});\n    const formElement = useRef(null);\n    const initialFields = useInitialFields(formElement, formFields);\n    const dispatch = useDispatch();\n    const currentVacancyId = useSelector((state) => state.vacancyView.vacancyId);\n    const { postponedVacancy, postponedVacancyInFavorites } = usePostponedVacancy();\n    const vacancyId = currentVacancyId || (postponedVacancyInFavorites ? null : postponedVacancy?.vacancyId);\n    const favoriteVacancyId = postponedVacancyInFavorites ? postponedVacancy?.vacancyId : null;\n    const enteredLogonValue = useSelector(({ authUrl }) => authUrl['login-field-value-entered']);\n    const lastLogonValue = useSelector(({ authUrl }) => authUrl['login-field-value'] || '');\n    const metaRole = useSelector(({ metaRole }) => metaRole);\n    const { prefilledLogin: urlLogin } = useSelector(({ router }) => router.location.query);\n    const analyticsVacancyId = vacancyId ?? favoriteVacancyId;\n\n    const autofocusRef = useAutofocus();\n    const focusHandle = useVkAppIntegrationFocus(SIGNUP_FORM);\n    const fields = useApplicantSignupFields();\n    const captcha = useCaptcha();\n\n    const login = isSignupPage ? urlLogin || null : enteredLogonValue || lastLogonValue;\n\n    useEffect(() => {\n        formElement.current &&\n            Analytics.sendHHEventElementShown(formElement.current, {\n                name: 'applicant_authorization',\n                type: 'by_code',\n                isSignupPage,\n                vacancyId: analyticsVacancyId,\n            });\n    }, [isSignupPage, analyticsVacancyId]);\n\n    if (fields === null) {\n        return null;\n    }\n\n    const submitForm = async () => {\n        setFetching(true);\n        let data;\n        try {\n            const formData = new FormData(formElement.current);\n            captcha.addCaptchaParams(formData);\n            const response = await fetcher.post('/account/otp_generate', formData);\n            data = response.data;\n        } catch (error) {\n            dispatch(showDefaultError(error));\n            setFetching(false);\n            const err = error.response ? error.response : showDefaultError(error);\n            callbackSubmit?.(error);\n            submitAnalytics({ errors: err, isSignupPage, vacancyId: analyticsVacancyId });\n            return;\n        }\n\n        const errorKey = data.success ? null : data.key;\n        const errorKind = data.recaptcha?.isBot ? 'RECAPTCHA_IS_BOT' : errorKey;\n\n        setFetching(false);\n        callbackSubmit?.(!!errorKey && errorKey !== 'CODE_SEND_BLOCKED');\n        submitAnalytics({\n            errors: errorKind,\n            authType: data.otp?.authType,\n            isSignupPage,\n            vacancyId: analyticsVacancyId,\n        });\n\n        captcha.updateCaptcha(data);\n\n        if (data.otp) {\n            dispatch(otpAction(data.otp));\n        }\n\n        if (data.redirectURL) {\n            window.location.assign(data.redirectURL);\n        }\n\n        if (data.key === '2FA_REQUIRED') {\n            return;\n        }\n\n        if (data.success || data.key === 'CODE_SEND_BLOCKED') {\n            next();\n        } else {\n            setFieldsSignup({ ...fieldsSignup, login: { ...fieldsSignup.login, error: data.key } });\n        }\n    };\n\n    const renderLogin = ({ validate, placeholder } = {}) => (\n        <FinalField\n            component={Control}\n            onFocus={focusHandle}\n            placeholder={placeholder ?? trls[SignInForm.trls.login]}\n            data-qa=\"account-signup-email\"\n            inputMode=\"email\"\n            validate={validate || requiredValidator}\n            inputRef={(isAutofocusEnabled && autofocusRef) || undefined}\n            {...getFieldProps(fields.login, fieldsSignup.login)}\n        />\n    );\n\n    const renderCaptcha = () => (\n        <>\n            <Recaptcha className=\"account-login-recaptcha\" />\n            <Hhcaptcha />\n        </>\n    );\n\n    const renderSubmitButton = (trl, additionalProps = {}) => (\n        <Submit text={trl} isFetching={isFetching} scale={ButtonScale.Large} {...additionalProps} />\n    );\n\n    return (\n        <FinalForm\n            onSubmit={submitForm}\n            initialValues={{\n                login: initialFields.login || login,\n                vacancyId,\n                favoriteVacancyId,\n            }}\n            render={({ handleSubmit, form }) => (\n                <VKAppListener form={form} fields={formFields}>\n                    <Form\n                        data-qa={classnames('account-signup', { [dataQaModifier]: dataQaModifier })}\n                        onSubmit={handleSubmit}\n                        ref={formElement}\n                        method=\"post\"\n                        action=\"/account/otp_generate\"\n                    >\n                        <input type=\"hidden\" name=\"backurl\" value={backurl} />\n                        <input type=\"hidden\" name=\"isSignupPage\" value={isSignupPage} />\n                        {metaRole && <input type=\"hidden\" name=\"role\" value={metaRole} />}\n                        {vacancyId && <input type=\"hidden\" name=\"vacancyId\" value={vacancyId} />}\n                        {favoriteVacancyId && (\n                            <input type=\"hidden\" name=\"favoriteVacancyId\" value={favoriteVacancyId} />\n                        )}\n                        {render({\n                            renderLogin,\n                            renderSubmitButton,\n                            renderCaptcha,\n                            isFetching,\n                        })}\n                    </Form>\n                </VKAppListener>\n            )}\n        />\n    );\n};\n\nSignInForm.trls = {\n    login: 'login.placeholder',\n};\n\nSignInForm.propTypes = {\n    backurl: PropTypes.string,\n    next: PropTypes.func,\n    render: PropTypes.func.isRequired,\n    trls: PropTypes.object,\n    callbackSubmit: PropTypes.func,\n    isSignupPage: PropTypes.bool,\n    isAutofocusEnabled: PropTypes.bool,\n    dataQaModifier: PropTypes.string,\n};\n\nSignInForm.defaultProps = {\n    callbackSubmit: () => {},\n};\n\nexport default translation(SignInForm);\n","import Column from 'bloko/blocks/column';\nimport { H2 } from 'bloko/blocks/header';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport useShowAdvertisementAgreement from 'lux/components/AdvertisementAgreement/useShowAdvertisementAgreement';\nimport useShowAdvertisementSubscriptionApplicant from 'lux/components/AdvertisementSubscription/useShowAdvertisementSubscriptionApplicant';\nimport translation from 'lux/components/translation';\n\nimport SignUpForm, { SignUpSignFormBaseProps } from 'lux/components/ApplicantSignInSignUpFlow/SignUpStep/SignUpForm';\n\nconst TrlKeys = {\n    header: 'otp.confirm.header.signup',\n};\n\nexport interface SignUpProps extends SignUpSignFormBaseProps {\n    errorPageLogin: boolean;\n}\n\nconst SignUp: TranslatedComponent<SignUpProps> = ({ trls, errorPageLogin, ...formProps }) => {\n    const showAdvertisementAgreement = useShowAdvertisementAgreement();\n    const showAdvertisementSubscriptionApplicant = useShowAdvertisementSubscriptionApplicant();\n\n    return (\n        <SignUpForm\n            render={({\n                renderFirstNameField,\n                renderLastNameField,\n                renderAccountDeleteInactive,\n                renderSubmit,\n                renderAdvertisementAgreement,\n                renderAdvertisementSubscriptionApplicant,\n            }) => {\n                return (\n                    <>\n                        <Column l=\"4\" m=\"4\" s=\"4\" xs=\"4\" container>\n                            <H2>{trls[TrlKeys.header]}</H2>\n                            <VSpacing base={4} />\n                            {renderFirstNameField()}\n                            <VSpacing base={2} />\n                            {renderLastNameField()}\n                            <VSpacing base={4} />\n                            {renderAccountDeleteInactive()}\n                            {showAdvertisementSubscriptionApplicant && (\n                                <>\n                                    {renderAdvertisementSubscriptionApplicant()}\n                                    <VSpacing base={6} />\n                                </>\n                            )}\n                            {renderSubmit({ isLarge: !errorPageLogin })}\n                        </Column>\n                        {showAdvertisementAgreement && (\n                            <div>\n                                <Column l=\"5\" m=\"5\" s=\"5\" xs=\"4\" container>\n                                    <VSpacing base={5} />\n                                    {renderAdvertisementAgreement()}\n                                </Column>\n                            </div>\n                        )}\n                    </>\n                );\n            }}\n            {...formProps}\n        />\n    );\n};\n\nexport default translation(SignUp);\n","import { useState, useRef, useEffect } from 'react';\nimport { Field as FinalField, Form as FinalForm } from 'react-final-form';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport applicantRegistrationSuccessExternal from '@hh.ru/analytics-js-events/build/xhh/applicant/registration/applicant_registration_success';\nimport { ButtonScale } from 'bloko/blocks/button';\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\nimport VSpacing from 'bloko/blocks/vSpacing';\n\nimport sendFbPixelRegistrationConversion from 'HH/SendFbPixelRegistrationConversion';\nimport AccountDeleteInactive from 'lux/components/AccountDeleteInactive';\nimport AccountDeleteInactiveSelect, { DELETE_INACTIVE_TIME_DEFAULT } from 'lux/components/AccountDeleteInactive/Select';\nimport AdvertisementAgreementCheckbox from 'lux/components/AdvertisementAgreement/Checkbox';\nimport AdvertisementSubscriptionApplicant from 'lux/components/AdvertisementSubscription/AdvertisementSubscriptionApplicant';\nimport Control from 'lux/components/ApplicantSignInSignUpFlow/Control';\nimport { getFieldProps, loginBy } from 'lux/components/ApplicantSignInSignUpFlow/SignInStep/SignInForm';\nimport Submit from 'lux/components/ApplicantSignInSignUpFlow/Submit';\nimport VKAppListener from 'lux/components/ApplicantSignInSignUpFlow/VKAppListener';\nimport Form from 'lux/components/Form';\nimport translation from 'lux/components/translation';\nimport useApplicantSignupFields from 'lux/hooks/useApplicantSignupFields';\nimport useAutofocus from 'lux/hooks/useAutofocus';\nimport useCreateVrDraftResume from 'lux/hooks/useCreateVrDraftResume';\nimport { useDV360Analytics } from 'lux/hooks/useDV360Analytics';\nimport useFingerprints from 'lux/hooks/useFingerprints';\nimport useSuccessCreateUser, { createUser } from 'lux/hooks/useOTPSignupFlow';\nimport usePostponedVacancy from 'lux/hooks/usePostponedVacancy';\nimport useVkAppIntegrationFocus from 'lux/hooks/useVkAppIntegrationFocus';\nimport { SIGNUP_FORM } from 'lux/hooks/useVkAppIntegrationReady';\nimport formatAnalyticErrors from 'lux/modules/analytics/formatAnalyticErrors';\nimport { useSelector } from 'lux/modules/useSelector';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nconst mapErrors = (errors) =>\n    errors.reduce((result, { key, description, field, error }) => {\n        result[key || field] = {\n            error: description || error,\n        };\n        return result;\n    }, {});\n\nconst SignUpForm = ({ trls, render, code, password, isSignupPage, isSignupMain, backurl }) => {\n    const { login, firstName, lastName, authType } = useSelector(({ otp }) => otp);\n    const dispatch = useDispatch();\n    const fields = useApplicantSignupFields();\n    const [fieldsSignup, setFieldsSignup] = useState({});\n    const formElement = useRef();\n    const [isFetching, setFetching] = useState(false);\n    const successCreateUser = useSuccessCreateUser(backurl);\n    const currentVacancyId = useSelector((state) => state.vacancyView.vacancyId);\n    const { postponedVacancy, postponedVacancyInFavorites } = usePostponedVacancy();\n    const postponedVacancyId = postponedVacancy?.vacancyId;\n    const vacancyId = currentVacancyId || (postponedVacancyInFavorites ? null : postponedVacancyId);\n    const focusHandle = useVkAppIntegrationFocus(SIGNUP_FORM);\n    const autofocusRef = useAutofocus();\n    const vrResponseFormSubmitted = useRef(false);\n    const vrResponseHash = useSelector(({ vrSignupLogin }) => vrSignupLogin.vrResponseHash);\n    const vrFingerPrints = useSelector(({ vrSignupLogin }) => vrSignupLogin.fingerprints);\n    const createVrDraftResume = useCreateVrDraftResume();\n    const fingerprints = useFingerprints('applicant');\n    const sendDV360Analytics = useDV360Analytics();\n    const afterSignupBackurl = useSelector(({ router }) => {\n        if (backurl) {\n            return backurl;\n        }\n        const queryBackurl = router.location.query.backurl;\n        return queryBackurl && decodeURIComponent(queryBackurl);\n    });\n    const postponed = useSelector(({ router }) => router.location.search.includes('postponed'));\n    const analyticsVacancyId = vacancyId ?? postponedVacancyId;\n\n    useEffect(() => {\n        Analytics.sendHHEvent('element_shown', {\n            elementName: `enter_full_name`,\n            vacancyId: analyticsVacancyId,\n            authType: loginBy[authType] || 'unknown',\n            isSignupPage,\n        });\n    }, [analyticsVacancyId, login, isSignupPage, authType]);\n\n    const hideErrors = () => {\n        setFieldsSignup(\n            mapErrors([\n                { key: 'firstName', error: null },\n                { key: 'lastName', error: null },\n            ])\n        );\n    };\n\n    const sendAnalytics = (error) => {\n        Analytics.sendHHEvent('form_submit', {\n            formName: 'enter_full_name',\n            vacancyId: analyticsVacancyId,\n            authType: loginBy[authType] || 'unknown',\n            errors: formatAnalyticErrors('full_name', error?.response?.data?.errors, ['key', 'description']),\n            isSignupPage,\n        });\n        applicantRegistrationSuccessExternal({ label: 'site' });\n    };\n\n    const submitForm = async (values) => {\n        setFetching(true);\n        const props = {\n            ...values,\n            ...(vrResponseHash ? vrFingerPrints : fingerprints),\n            firstName: values.firstName || '',\n            lastName: values.lastName || '',\n            isSignupPage,\n            isSignupMain,\n            vacancyId,\n            postponed,\n            backurl: afterSignupBackurl,\n        };\n\n        let response;\n\n        try {\n            response = await createUser(props);\n        } catch (error) {\n            setFetching(false);\n            if (Array.isArray(error?.response?.data?.errors)) {\n                setFieldsSignup(mapErrors(error.response.data.errors));\n                sendAnalytics(error);\n                return;\n            }\n\n            dispatch(showDefaultError(error));\n            return;\n        }\n\n        sendAnalytics(null);\n        sendDV360Analytics('APPLICANT_REGISTERED');\n        // tempexp_25028_nextline\n        sendFbPixelRegistrationConversion(false);\n\n        hideErrors();\n        setFetching(false);\n\n        if (vrResponseHash) {\n            await createVrDraftResume({ vrResponseHash, onFail: (error) => dispatch(showDefaultError(error)) });\n            return;\n        }\n\n        successCreateUser(response);\n    };\n    const vrFormSubmit = useRef(() =>\n        submitForm({\n            vrResponseHash,\n            login,\n            code,\n        })\n    );\n\n    useEffect(() => {\n        if (vrResponseHash && !vrResponseFormSubmitted.current) {\n            vrResponseFormSubmitted.current = true;\n            vrFormSubmit.current();\n        }\n    }, [vrResponseHash]);\n\n    if (vrResponseHash) {\n        return <Loading scale={LoadingScale.Small} />;\n    }\n\n    const renderFirstNameField = () => {\n        return (\n            <FinalField\n                component={Control}\n                onFocus={focusHandle}\n                placeholder={trls[SignUpForm.trls.firstName]}\n                data-qa=\"account-signup-firstname\"\n                capitalize\n                inputRef={autofocusRef}\n                {...getFieldProps(fields.firstName, fieldsSignup.firstName)}\n            />\n        );\n    };\n\n    const renderLastNameField = () => {\n        return (\n            <FinalField\n                component={Control}\n                onFocus={focusHandle}\n                placeholder={trls[SignUpForm.trls.lastName]}\n                data-qa=\"account-signup-lastname\"\n                capitalize\n                {...getFieldProps(fields.lastName, fieldsSignup.lastName)}\n            />\n        );\n    };\n\n    const renderAccountDeleteInactive = () => {\n        return (\n            <AccountDeleteInactive\n                renderSelect={() => (\n                    <FinalField\n                        name=\"deleteInactiveTime\"\n                        type=\"select\"\n                        initialValue={DELETE_INACTIVE_TIME_DEFAULT}\n                        render={({ input }) => {\n                            return <AccountDeleteInactiveSelect {...input} />;\n                        }}\n                    />\n                )}\n                spacingAfter={<VSpacing base={4} />}\n            />\n        );\n    };\n\n    const renderSubmit = ({ isLarge } = {}) => {\n        return (\n            <Submit\n                text={trls[SignUpForm.trls.submit]}\n                isFetching={isFetching}\n                dataQa=\"account-signup-submit-applicant-info\"\n                scale={isLarge ? ButtonScale.Large : undefined}\n            />\n        );\n    };\n\n    const renderAdvertisementAgreement = () => {\n        return (\n            <FinalField\n                name=\"agreementAdv\"\n                type=\"checkbox\"\n                initialValue={false}\n                render={({ input }) => {\n                    return <AdvertisementAgreementCheckbox {...input} />;\n                }}\n            />\n        );\n    };\n\n    const renderAdvertisementSubscriptionApplicant = () => {\n        return (\n            <FinalField\n                name=\"agreementAdv\"\n                type=\"checkbox\"\n                initialValue={false}\n                render={AdvertisementSubscriptionApplicant}\n            />\n        );\n    };\n\n    return (\n        <FinalForm\n            onSubmit={submitForm}\n            initialValues={{\n                firstName,\n                lastName,\n                login,\n                code,\n                password,\n            }}\n            render={({ handleSubmit, form }) => (\n                <VKAppListener form={form}>\n                    <Form\n                        action=\"/account/signup\"\n                        method=\"POST\"\n                        data-qa=\"account-signup\"\n                        onSubmit={(event) => {\n                            event.preventDefault();\n                            handleSubmit(event);\n                        }}\n                        ref={formElement}\n                    >\n                        {render({\n                            renderFirstNameField,\n                            renderLastNameField,\n                            renderAccountDeleteInactive,\n                            renderSubmit,\n                            renderAdvertisementAgreement,\n                            renderAdvertisementSubscriptionApplicant,\n                        })}\n                    </Form>\n                </VKAppListener>\n            )}\n        />\n    );\n};\n\nSignUpForm.trls = {\n    header: 'otp.confirm.header.signup',\n    firstName: 'newApplicant.firstName',\n    lastName: 'newApplicant.lastName',\n    submit: 'signupForm.create.submit',\n};\n\nSignUpForm.propTypes = {\n    trls: PropTypes.object,\n    render: PropTypes.func,\n    code: PropTypes.string,\n    password: PropTypes.string,\n    backurl: PropTypes.string,\n    isSignupPage: PropTypes.bool,\n    isSignupMain: PropTypes.bool,\n    errorPageLogin: PropTypes.bool,\n};\n\nexport default translation(SignUpForm);\n","import { ButtonScale } from 'bloko/blocks/button';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport FormSubmit from 'lux/components/Forms/Submit';\nimport translation from 'lux/components/translation';\n\nexport interface SubmitButtonProps {\n    isFetching: boolean;\n    text?: string;\n    dataQa?: string;\n    scale?: ButtonScale;\n}\n\nconst TrlKeys = {\n    submit: 'login.register',\n};\n\nconst Submit: TranslatedComponent<SubmitButtonProps> = ({\n    trls,\n    isFetching,\n    text = trls[TrlKeys.submit],\n    dataQa = 'account-signup-submit',\n    ...props\n}) => {\n    return (\n        <FormSubmit data-qa={dataQa} isFetching={isFetching} stretched {...props}>\n            {text}\n        </FormSubmit>\n    );\n};\n\nexport default translation(Submit);\n","import PropTypes from 'prop-types';\n\nimport useVkAppIntegrationReady, { SIGNUP_FORM } from 'lux/hooks/useVkAppIntegrationReady';\n\nconst VKAppListener = ({ form, children, fields = ['firstName', 'lastName'] }) => {\n    useVkAppIntegrationReady(SIGNUP_FORM, fields, form);\n\n    return children;\n};\n\nVKAppListener.propTypes = {\n    form: PropTypes.object,\n    fields: PropTypes.arrayOf(PropTypes.string),\n    children: PropTypes.node,\n};\n\nexport default VKAppListener;\n","import { ComponentProps, FC, PropsWithChildren } from 'react';\n\nimport { Link as MagritteLink, LinkProps } from '@hh.ru/magritte-ui';\nimport { Link as ReduxLink } from '@hh.ru/redux-spa-middleware';\nimport Button from 'bloko/blocks/button';\nimport BlokoLink from 'bloko/blocks/link';\n\nimport useRedesign from 'lux/hooks/useMagritte';\n\ntype BlokoLinkProps = ComponentProps<typeof BlokoLink>;\ntype MagritteLinkProps = Partial<LinkProps> &\n    Partial<Pick<ComponentProps<typeof ReduxLink>, 'onClick' | 'target' | 'to'>>;\n\nconst getBlokoParams = (params: MagritteLinkProps): BlokoLinkProps => {\n    const blokoParams = {\n        Element: params.Element,\n        onClick: params.onClick,\n        target: params.target,\n        to: params.to,\n        'data-qa': params['data-qa'],\n        disableVisited: true,\n    };\n\n    if (params.Element === 'button') {\n        blokoParams.Element = Button as unknown as 'button';\n    }\n\n    return blokoParams;\n};\n\nconst Link: FC<MagritteLinkProps & { blokoComponentProps?: BlokoLinkProps } & PropsWithChildren> = ({\n    blokoComponentProps,\n    children,\n    ...props\n}) => {\n    const isRedesign = useRedesign();\n\n    if (!isRedesign) {\n        return (\n            <BlokoLink {...getBlokoParams(props)} {...blokoComponentProps}>\n                {children}\n            </BlokoLink>\n        );\n    }\n\n    return <MagritteLink {...(props as Partial<LinkProps>)}>{children}</MagritteLink>;\n};\n\nexport default Link;\n","import { FC, ComponentProps, PropsWithChildren } from 'react';\n\nimport {\n    Text as MagritteText,\n    TextProps,\n    TextStyle as MagritteTextStyle,\n    TextTypography as MagritteTextTypography,\n} from '@hh.ru/magritte-ui';\nimport BlokoText, { TextImportance as BlokoTextImportance, TextSize as BlokoTextSize } from 'bloko/blocks/text';\n\nimport useRedesign from 'lux/hooks/useMagritte';\n\ntype BlokoTextProps = ComponentProps<typeof BlokoText>;\n\nconst getBlokoParams = (params: TextProps): BlokoTextProps => {\n    const blokoParams: Partial<BlokoTextProps> = {};\n\n    if (params.style === MagritteTextStyle.Primary) {\n        blokoParams.importance = BlokoTextImportance.Primary;\n    }\n\n    if (params.style === MagritteTextStyle.Secondary) {\n        blokoParams.importance = BlokoTextImportance.Secondary;\n    }\n\n    if (params.typography === MagritteTextTypography.Label4Regular) {\n        blokoParams.size = BlokoTextSize.Small;\n    }\n\n    if (\n        params.typography === MagritteTextTypography.Label3Regular ||\n        params.typography === MagritteTextTypography.Paragraph2Regular\n    ) {\n        blokoParams.size = BlokoTextSize.Medium;\n    }\n\n    return blokoParams;\n};\n\nconst Text: FC<TextProps & PropsWithChildren & { blokoComponentProps?: BlokoTextProps }> = ({\n    children,\n    blokoComponentProps,\n    ...props\n}) => {\n    const isRedesign = useRedesign();\n\n    if (isRedesign) {\n        return <MagritteText {...props}>{children}</MagritteText>;\n    }\n\n    return (\n        <BlokoText {...getBlokoParams(props)} {...blokoComponentProps}>\n            {children}\n        </BlokoText>\n    );\n};\n\nexport default Text;\n","import { useSelector } from 'lux/modules/useSelector';\n\nconst useApplicantSignupFields = () => {\n    const { fields } = useSelector((state) => state.applicantSignup);\n\n    if (!fields?.length) {\n        return null;\n    }\n\n    return fields.reduce((result, item) => {\n        result[item.name] = item;\n        return result;\n    }, {});\n};\n\nexport default useApplicantSignupFields;\n","import fetcher from 'lux/modules/fetcher';\n\ninterface DraftResumeParams {\n    vrResponseHash: string;\n    onFail: (error: unknown) => void;\n}\n\ninterface DraftResumeResult {\n    resumeHash: string;\n}\n\ndeclare global {\n    interface FetcherPostApi {\n        ['/shards/resume/draft_resume']: {\n            queryParams: void;\n            body: { vrResponseHash: string };\n            response: DraftResumeResult;\n        };\n    }\n}\n\nexport default () => {\n    return async ({ vrResponseHash, onFail }: DraftResumeParams): Promise<void> => {\n        try {\n            const {\n                data: { resumeHash },\n            } = await fetcher.post('/shards/resume/draft_resume', { vrResponseHash });\n\n            window.location.assign(`/applicant/resumes/short?resume=${resumeHash}&hhtmFrom=vr_signup_login`);\n        } catch (error) {\n            onFail(error);\n        }\n    };\n};\n","import { useCallback } from 'react';\n\nimport Analytics from '@hh.ru/analytics-js';\n\nimport { CounterType } from 'lux/models/counters';\nimport { TopLevelSite } from 'lux/models/topLevelSite';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport { useTopLevelSite } from 'lux/hooks/useSites';\n\nconst DV360_EVENTS_MAP = {\n    VACANCY_SHOWN: {\n        [TopLevelSite.AZ]: 'vacan00',\n        [TopLevelSite.KZ]: 'vacan0',\n        [TopLevelSite.UZ]: 'vacan000',\n    },\n    RESUME_CREATED: {\n        [TopLevelSite.AZ]: 'summa00',\n        [TopLevelSite.KZ]: 'summa0',\n        [TopLevelSite.UZ]: 'sumuz0',\n    },\n    EMPLOYER_REGISTERED: {\n        [TopLevelSite.AZ]: 'clien00',\n        [TopLevelSite.KZ]: 'clien0',\n        [TopLevelSite.UZ]: 'clien000',\n    },\n    APPLICANT_REGISTERED: {\n        [TopLevelSite.AZ]: 'appli00',\n        [TopLevelSite.KZ]: 'appli0',\n        [TopLevelSite.UZ]: 'appli000',\n    },\n} as const;\n\ntype UseDV360Analytics = () => (eventName: keyof typeof DV360_EVENTS_MAP) => void;\n\nexport const useDV360Analytics: UseDV360Analytics = () => {\n    const topLevelSite = useTopLevelSite();\n    const counters = useSelector(({ counters }) => counters);\n\n    return useCallback(\n        (event) => {\n            if ([TopLevelSite.AZ, TopLevelSite.KZ, TopLevelSite.UZ].includes(topLevelSite)) {\n                const goal =\n                    DV360_EVENTS_MAP[event][topLevelSite as TopLevelSite.AZ | TopLevelSite.UZ | TopLevelSite.KZ];\n\n                if (goal) {\n                    counters.googleUniversalAnalytics?.forEach((item) => {\n                        if (item.type === CounterType.DV360) {\n                            Analytics.sendDv360Conversion(String(item.id), goal);\n                        }\n                    });\n                }\n            }\n        },\n        [topLevelSite, counters]\n    );\n};\n","import { useEffect, useRef } from 'react';\n\nimport { fingerprintPromise, securePortalFingerprintPromise } from 'HH/FingerprintPromises';\n\nimport useIsClient from 'lux/hooks/useIsClient';\n\nconst useFingerprints = (userType) => {\n    const isClient = useIsClient();\n    const fingerprints = useRef({});\n    useEffect(() => {\n        if (!isClient) {\n            return;\n        }\n\n        fingerprintPromise\n            .then((fingerprint) => {\n                fingerprints.current.fingerprintIteration2 = fingerprint;\n            })\n            .catch(console.error);\n\n        if (userType === 'employer') {\n            import('fingerprint2-1.5.1')\n                .then((FingerprintOld) => {\n                    window.requestIdleCallback(() => {\n                        new FingerprintOld.default({\n                            excludeScreenResolution: true,\n                            excludeHasLiedResolution: true,\n                        }).get((fingerprintOldHash) => {\n                            fingerprints.current.fingerprint = fingerprintOldHash;\n                        });\n                    });\n                })\n                .catch(console.error);\n        }\n\n        securePortalFingerprintPromise\n            .then((fingerprint) => {\n                fingerprints.current.fingerprintSp = fingerprint;\n            })\n            .catch(console.error);\n    }, [isClient, userType]);\n    return fingerprints.current;\n};\n\nexport default useFingerprints;\n","import { useState, useEffect } from 'react';\n\n// Позволяет задать значения полей формы, которые были добавлены пользователем до инициализации js\nexport default (formElement, fields) => {\n    const [initialFormData, setInitialFormData] = useState(Object.fromEntries(fields.map((field) => [field, ''])));\n\n    useEffect(() => {\n        if (!formElement.current) {\n            return;\n        }\n        const formData = new FormData(formElement.current);\n        setInitialFormData(\n            fields.reduce((result, item) => {\n                result[item] = formData.get ? formData.get(item) : '';\n                return result;\n            }, {})\n        );\n    }, [fields, formElement]);\n\n    return initialFormData;\n};\n","import urlParser from 'bloko/common/urlParser';\n\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\n\nexport const createUser = (values) => {\n    return fetcher.postFormData('/account/signup', values);\n};\n\nexport default (backurl) => {\n    const authURLBackurl = useSelector((state) => state.authUrl.backurl);\n    const url = urlParser(backurl ?? authURLBackurl);\n\n    return (signup) => {\n        if (signup?.data?.verificationResult?.success) {\n            window.location.assign(signup?.data?.backurl || `${url.pathname}${url.search}`);\n        }\n    };\n};\n","import { useSelector } from 'lux/modules/useSelector';\n\nexport default () => {\n    const postponedActions = useSelector(({ postponedActions }) => postponedActions);\n\n    return {\n        hasPostponedVacancy: !!postponedActions.vacancy,\n        postponedVacancyInFavorites: 'add-to-favorites-sign' in postponedActions,\n        postponedVacancy: postponedActions.vacancy,\n        hasPostponedEndorsement: 'endorsement' in postponedActions,\n        hasPostponedAutoSearchAdd: 'autosearch-add' in postponedActions,\n        hasPostponedCompleteResume: 'complete-resume' in postponedActions,\n        hasPostponedProfOrientationSign: 'proforientation-sign' in postponedActions,\n        hasPostponedVacancySavedSearchOpen: 'vacancy-saved-search-open' in postponedActions,\n    };\n};\n","import { useState } from 'react';\n\nimport PostMessage from 'Modules/PostMessage';\nimport VK_APP_ORIGIN from 'Modules/constants/auth';\nimport { useSelector } from 'lux/modules/useSelector';\n\n/**\n * useVkAppIntegrationFocus\n * Хук для интеграции с мини-приложением в VK\n * Формирует и отправляет postMessage сообщение о фокусе на поле формы, при первом к нему обращении\n * @param {String} formName – имя формы, для которой активируем postMessage сообщения\n */\n\nexport default (formName) => {\n    const isIframeView = useSelector((state) => state.router.location.query.iframe_view === 'true');\n    const [focusedFields, setFocusedFields] = useState([]);\n\n    return ({ target: { name } }) => {\n        if (!isIframeView) {\n            return;\n        }\n\n        if (!focusedFields.includes(name)) {\n            PostMessage.trigger({\n                target: typeof window !== 'undefined' && window.parent,\n                origin: VK_APP_ORIGIN,\n                message: { name: `${formName}.focus.${name}` },\n            });\n\n            setFocusedFields([...focusedFields, name]);\n        }\n    };\n};\n","import { useEffect, useRef } from 'react';\n\nimport PostMessage from 'Modules/PostMessage';\nimport VK_APP_ORIGIN from 'Modules/constants/auth';\nimport { useSelector } from 'lux/modules/useSelector';\n\n/**\n * useVkAppIntegrationReady\n * Хук для интеграции с мини-приложением в VK\n * Подписывает поля формы на postMessage сообщения\n * Формирует и отправляет postMessage сообщение о готовности формы\n *\n * @param {String} formName – имя формы, для которой активируем postMessage сообщения\n * @param {Array} formFields – имена полей формы, для подписки на postMessage сообщения\n * @param {Element} form – react-элемент - форма, поля которой подписываем и изменяем при вызове handler'а\n *\n * Имена полей формы должны соответствовать значениям ключей в объекте data\n * format of data for signup form: { firstName: 'John', lastName: 'Smith', login: 'john.smith@example.com' }\n * format of data for login form: { username: 'john.smith@example.com' }\n */\n\nexport const LOGIN_FORM = 'login';\nexport const SIGNUP_FORM = 'signup';\n\nexport default (formName, formFields, form) => {\n    const isIframeView = useSelector((state) => state.router.location.query.iframe_view === 'true');\n    const firstRenderRef = useRef(true);\n\n    useEffect(() => {\n        if (!isIframeView) {\n            return;\n        }\n\n        if (firstRenderRef.current) {\n            PostMessage.on({\n                origin: VK_APP_ORIGIN,\n                handlers: {\n                    'pass.data.to.fields': (data) => {\n                        formFields\n                            .filter((name) => typeof data[name] !== 'undefined')\n                            .map((name) => form.change(name, data[name]));\n                    },\n                },\n            });\n\n            PostMessage.trigger({\n                target: window.parent,\n                origin: VK_APP_ORIGIN,\n                message: { name: `${formName}.form.ready` },\n            });\n\n            firstRenderRef.current = false;\n        }\n    }, [form, formFields, formName, isIframeView]);\n};\n","const formatAnalyticErrors = (field, errors, [fieldKey, descriptionKey] = []) => {\n    let formattedErrors = [];\n    if (typeof errors === 'string') {\n        formattedErrors.push({ field, description: errors });\n    } else if (Array.isArray(errors) && errors.length) {\n        formattedErrors = errors.map((error) => ({ field: error[fieldKey], description: error[descriptionKey] }));\n    } else if (errors) {\n        formattedErrors.push({ field, description: errors });\n    }\n    return formattedErrors.length ? JSON.stringify(formattedErrors) : null;\n};\n\nexport default formatAnalyticErrors;\n"],"names":["COOKIES_NAME","EVENT_NAME","isB2B","fbclidCookies","Cookies","fbclid","b2cPixelId","b2bPixelId","externalId","split","pixelId","pixelSrc","img","document","createElement","src","width","height","style","display","body","appendChild","DELETE_INACTIVE_TIME_YEARS","DELETE_INACTIVE_TIME_DEFAULT","TrlKeys","one","some","many","AccountDeleteInactiveSelect","trls","props","map","value","Option","formatToReactComponent","translation","Features","AccountDeleteInactive","spacingBefore","spacingAfter","renderSelect","isManual","setIsManual","useState","enableAccountDeleteInactive","useSelector","features","useIsBelarus","typography","TextTypography","base","TextStyle","onClick","className","AdvertisementAgreementCheckbox","useMagritte","Text","styles","AdvertisementAgreementText","isBirthday","articleId","isMagritte","inline","Element","Link","to","target","disableVisited","enableAdvertisementAgreement","AdvertisementSubscriptionApplicant","input","isZarplata","useIsZarplataPlatform","String","importance","TextImportance","useIsRussia","Control","meta","error","capitalize","placeholder","inputRef","otherProps","loginFormUrl","state","authUrl","currentError","submitFailed","touched","Fragment","type","InputType","autoCorrect","autoCapitalize","spellCheck","invalid","onBlur","event","Analytics","name","onChange","blokoCapitalize","ref","FormError","show","startsWith","loginExists","login","loginRestrictedCountry","empty","renderError","propTypes","PropTypes","isRequired","firstNameInvalid","lastNameInvalid","loginInvalid","phoneInvalid","MultiAccountGrouping","errorPageLogin","formProps","otp","render","renderInput","renderSubmit","l","m","s","xs","container","H2Section","format","strong","FormItem","isStretched","MultiAccountGroupingForm","next","isSending","setIsSending","wrongPassword","setWrongPassword","useEffect","hhtmSource","onSubmit","useCallback","async","fetcher","values","password","autoFocus","onToggle","isPasswordVisible","kind","ButtonKind","ButtonType","disabled","stretched","handleSubmit","method","otpAction","makeSetStoreField","formFields","getFieldProps","conditions","maxLength","parts","loginBy","EMAIL","SMS","requiredValidator","trim","undefined","submitAnalytics","errors","authType","vacancyId","isSignupPage","formName","formatAnalyticErrors","SignInForm","backurl","callbackSubmit","isAutofocusEnabled","dataQaModifier","isFetching","setFetching","fieldsSignup","setFieldsSignup","formElement","useRef","initialFields","useInitialFields","dispatch","useDispatch","currentVacancyId","vacancyView","postponedVacancy","postponedVacancyInFavorites","usePostponedVacancy","favoriteVacancyId","enteredLogonValue","lastLogonValue","metaRole","prefilledLogin","urlLogin","router","location","query","analyticsVacancyId","autofocusRef","useAutofocus","focusHandle","useVkAppIntegrationFocus","SIGNUP_FORM","fields","useApplicantSignupFields","captcha","useCaptcha","current","renderLogin","validate","component","onFocus","inputMode","renderCaptcha","renderSubmitButton","trl","additionalProps","text","scale","ButtonScale","data","formData","FormData","addCaptchaParams","showDefaultError","err","response","errorKey","success","key","errorKind","recaptcha","isBot","updateCaptcha","redirectURL","window","assign","initialValues","form","classnames","action","defaultProps","SignUp","showAdvertisementAgreement","useShowAdvertisementAgreement","showAdvertisementSubscriptionApplicant","useShowAdvertisementSubscriptionApplicant","renderFirstNameField","renderLastNameField","renderAccountDeleteInactive","renderAdvertisementAgreement","renderAdvertisementSubscriptionApplicant","H2","isLarge","mapErrors","reduce","result","description","field","SignUpForm","code","isSignupMain","firstName","lastName","successCreateUser","useSuccessCreateUser","postponedVacancyId","vrResponseFormSubmitted","vrResponseHash","vrSignupLogin","vrFingerPrints","fingerprints","createVrDraftResume","useCreateVrDraftResume","useFingerprints","sendDV360Analytics","useDV360Analytics","afterSignupBackurl","queryBackurl","decodeURIComponent","postponed","search","includes","elementName","sendAnalytics","applicantRegistrationSuccessExternal","label","submitForm","createUser","Array","isArray","sendFbPixelRegistrationConversion","onFail","vrFormSubmit","LoadingScale","initialValue","submit","dataQa","preventDefault","header","Submit","VKAppListener","children","useVkAppIntegrationReady","blokoComponentProps","useRedesign","params","blokoParams","Button","getBlokoParams","MagritteTextStyle","BlokoTextImportance","MagritteTextTypography","size","BlokoTextSize","applicantSignup","length","item","resumeHash","DV360_EVENTS_MAP","VACANCY_SHOWN","TopLevelSite","RESUME_CREATED","EMPLOYER_REGISTERED","APPLICANT_REGISTERED","topLevelSite","useTopLevelSite","counters","goal","googleUniversalAnalytics","forEach","CounterType","id","userType","isClient","useIsClient","fingerprintPromise","fingerprint","fingerprintIteration2","catch","console","then","FingerprintOld","requestIdleCallback","default","excludeScreenResolution","excludeHasLiedResolution","get","fingerprintOldHash","securePortalFingerprintPromise","fingerprintSp","initialFormData","setInitialFormData","Object","fromEntries","authURLBackurl","url","urlParser","signup","verificationResult","pathname","postponedActions","hasPostponedVacancy","vacancy","hasPostponedEndorsement","hasPostponedAutoSearchAdd","hasPostponedCompleteResume","hasPostponedProfOrientationSign","hasPostponedVacancySavedSearchOpen","isIframeView","iframe_view","focusedFields","setFocusedFields","PostMessage","parent","origin","VK_APP_ORIGIN","message","LOGIN_FORM","firstRenderRef","handlers","filter","change","fieldKey","descriptionKey","formattedErrors","push","JSON","stringify"],"sourceRoot":""}