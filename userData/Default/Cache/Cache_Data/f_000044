{"version":3,"file":"95186.05b948c7186ec47925bb.js","mappings":"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","sources":["xhh/./webapp-static/js/Utils/Dates.js","xhh/./webapp-static/lux/components/Forms/Submit/index.tsx","xhh/./webapp-static/lux/components/Hhcaptcha/index.tsx","xhh/./webapp-static/lux/components/OTP/TimeoutCounter.tsx","xhh/./webapp-static/lux/components/OTP/CodeError.tsx","xhh/./webapp-static/lux/components/OTP/CodeSender.tsx","xhh/./webapp-static/lux/components/Recaptcha/index.jsx","xhh/./webapp-static/lux/components/Verification/Verification.tsx","xhh/./webapp-static/lux/components/Verification/VerificationForm.tsx","xhh/./webapp-static/lux/hooks/useAutofocus.ts","xhh/./webapp-static/lux/hooks/useIsClient.ts","xhh/./webapp-static/lux/hooks/useTimer.ts"],"sourcesContent":["import addDays from 'date-fns/addDays';\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport isBefore from 'date-fns/isBefore';\nimport max from 'date-fns/max';\nimport startOfMonth from 'date-fns/startOfMonth';\n\nimport Debug from 'HHC/Debug';\nimport formatDate from 'Modules/formatDate';\n\n/**\n * Получить отформатированные секунды для таймера, с количеством часов или без\n *\n * @param {Number} seconds\n *\n * @returns {String}\n */\nexport const formatSeconds = (seconds) => {\n    const date = new Date(0, 0, 0, 0, 0, seconds);\n    const format = date.getHours() > 0 ? 'HH:mm:ss' : 'mm:ss';\n    return formatDate(date, format);\n};\n\nconst getSeconds = (date) => Math.floor(date / 1000);\nexport const getCurrentSeconds = () => getSeconds(Date.now());\n\nexport const IntervalMessages = (humanDatesRules) => {\n    const humanDatesList = Object.keys(humanDatesRules).sort((a, b) => Math.sign(b - a));\n\n    const get = (deltaTime) => {\n        const deltaSeconds = getSeconds(deltaTime);\n        const messageIndex = humanDatesList.findIndex((i) => i < deltaSeconds);\n\n        try {\n            return humanDatesRules[humanDatesList[messageIndex]].translation;\n        } catch (error) {\n            Debug.log('error out', 'messageIndex is wrong', {\n                error,\n                humanDatesList,\n                messageIndex,\n                humanDatesRules,\n                timeLeft: deltaTime,\n            });\n        }\n\n        return null;\n    };\n\n    return { get };\n};\n\nexport const calculateDisabledDates = (selectedDate, lastAvailableDate = new Date()) => {\n    if (isBefore(selectedDate, startOfMonth(lastAvailableDate))) {\n        return [];\n    }\n\n    const start = max([startOfMonth(selectedDate), addDays(lastAvailableDate, 1)]);\n    const end = endOfMonth(selectedDate);\n\n    if (!isBefore(start, end)) {\n        return [];\n    }\n\n    return eachDayOfInterval({ start, end }).map((disabledDate) => formatDate(disabledDate, 'y-MM-dd'));\n};\n","import { FC, PropsWithChildren, ReactElement } from 'react';\n\nimport {\n    Button as MagritteButton,\n    ButtonMode as MagritteButtonMode,\n    ButtonType as MagritteButtonType,\n    ButtonStyle as MagritteButtonStyle,\n    ButtonSize,\n} from '@hh.ru/magritte-ui';\nimport Button, { ButtonType, ButtonKind, ButtonProps } from 'bloko/blocks/button';\nimport Loading, { LoadingScale, LoadingColor } from 'bloko/blocks/loading';\n\nimport useIsClient from 'lux/hooks/useIsClient';\nimport useRedesign from 'lux/hooks/useMagritte';\n\ninterface Props {\n    isFetching: boolean;\n}\n\nconst Index: FC<Props & Partial<ButtonProps> & PropsWithChildren> = ({ isFetching, children, ...props }) => {\n    const isClient = useIsClient();\n    const isRedesign = useRedesign();\n\n    if (isRedesign) {\n        return (\n            <MagritteButton\n                {...props}\n                mode={MagritteButtonMode.Primary}\n                Element={props.Element as 'button' | undefined}\n                icon={props.icon as ReactElement}\n                type={MagritteButtonType.Submit}\n                disabled={!isClient || isFetching}\n                style={MagritteButtonStyle.Accent}\n                loading={isFetching}\n                size={ButtonSize.Large}\n            >\n                {children}\n            </MagritteButton>\n        );\n    }\n\n    return (\n        <Button\n            {...props}\n            type={ButtonType.Submit}\n            disabled={!isClient || isFetching}\n            kind={ButtonKind.Primary}\n            loading={isFetching && <Loading initial={LoadingColor.White} scale={LoadingScale.Small} />}\n        >\n            {children}\n        </Button>\n    );\n};\n\nexport default Index;\n","import { useMemo, ComponentProps } from 'react';\n\nimport { Hhcaptcha as HHcaptcha } from '@hh.ru/hhcaptcha';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport useRedesign from 'lux/hooks/useMagritte';\nimport fetcher from 'lux/modules/fetcher';\n\nconst TrlKeys = {\n    error: 'hhсaptcha.error',\n    placeholder: 'hhсaptcha.placeholder',\n    description: 'hhсaptcha.info',\n    renewText: 'hhсaptcha.renew.text',\n    lang: {\n        RU: 'hhсaptcha.lang.RU',\n        EN: 'hhсaptcha.lang.EN',\n    },\n};\n\ntype HhCaptchaProps = Pick<ComponentProps<typeof HHcaptcha>, 'size'>;\n\nconst Hhcaptcha: TranslatedComponent<HhCaptchaProps> = ({ trls, size }) => {\n    const isMagritte = useRedesign();\n    const captchaTrl = useMemo(\n        () => ({\n            error: trls[TrlKeys.error],\n            renewText: trls[TrlKeys.renewText],\n            description: trls[TrlKeys.description],\n            placeholder: trls[TrlKeys.placeholder],\n            lang: {\n                RU: trls[TrlKeys.lang.RU],\n                EN: trls[TrlKeys.lang.EN],\n            },\n        }),\n        [trls]\n    );\n\n    return <HHcaptcha trls={captchaTrl} fetcher={fetcher} isMagritte={isMagritte} size={size} />;\n};\n\nexport default translation(Hhcaptcha);\n","import { useEffect, useState } from 'react';\n\nconst ONE_SECOND = 1000;\n\nconst getSecondsRemain = (till: number): number => {\n    const nowSeconds = Math.floor(Date.now() / ONE_SECOND);\n    if (till <= nowSeconds) {\n        return 0;\n    }\n    return till - nowSeconds;\n};\n\nconst useTimeoutTimer = (till: number) => {\n    const [value, setValue] = useState(() => getSecondsRemain(till));\n\n    useEffect(() => {\n        let timeOutHandler: NodeJS.Timeout;\n        const updateValue = () => {\n            setValue(getSecondsRemain(till));\n            timeOutHandler = setTimeout(updateValue, ONE_SECOND);\n        };\n        updateValue();\n        return () => clearTimeout(timeOutHandler);\n    }, [till]);\n\n    return value;\n};\n\nconst TimeoutCounter: React.FC<\n    {\n        till: number;\n    } & React.PropsWithChildren\n> = ({ till }) => {\n    const secondsRemain = useTimeoutTimer(till);\n\n    if (secondsRemain < 1) {\n        return null;\n    }\n    return <>{secondsRemain}</>;\n};\n\nexport default TimeoutCounter;\n","import { FormError } from 'bloko/blocks/form';\nimport { LangTrls, TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport { Verification } from 'lux/models/applicant/auth';\n\nimport TimeoutCounter from 'lux/components/OTP/TimeoutCounter';\n\nconst CONFIRM_CODE_BLOCKED = 'CONFIRM_CODE_BLOCKED';\nconst CONFIRM_CODE_BLOCKED_PHONE = 'CONFIRM_CODE_BLOCKED_PHONE';\n\nconst TrlKeys = {\n    default: 'account.connect.merge_by_code.email.error.unknown',\n    CODE_NOT_FOUND: 'account.connect.merge_by_code.email.error.CODE_NOT_FOUND',\n    [CONFIRM_CODE_BLOCKED]: 'account.connect.merge_by_code.email.error.CONFIRM_CODE_BLOCKED',\n    [CONFIRM_CODE_BLOCKED_PHONE]: 'account.connect.merge_by_code.email.error.CONFIRM_CODE_BLOCKED.phone',\n    WRONG_CODE: 'account.connect.merge_by_code.email.error.WRONG_CODE',\n    CODE_EXPIRED: 'account.connect.merge_by_code.email.error.CODE_EXPIRED',\n};\n\nconst getErrorText = ({ key, nextConfirmTime }: Verification, trls: LangTrls, authType: string) => {\n    if (key === CONFIRM_CODE_BLOCKED) {\n        const errorText =\n            authType.toLowerCase() === 'email'\n                ? trls[TrlKeys[CONFIRM_CODE_BLOCKED]]\n                : trls[TrlKeys[CONFIRM_CODE_BLOCKED_PHONE]];\n        return formatToReactComponent(errorText, {\n            '{0}': <TimeoutCounter till={nextConfirmTime['@timestamp'] || nextConfirmTime.timestamp} />,\n        });\n    }\n    return trls[TrlKeys[key as keyof typeof TrlKeys]] || trls[TrlKeys.default];\n};\n\nconst CodeError: TranslatedComponent<{ verification: Verification | null; authType?: string }> = ({\n    verification,\n    authType = 'email',\n    trls,\n}) => {\n    if (!verification) {\n        return null;\n    }\n\n    const errorKey = verification.key;\n    return (\n        <FormError data-qa={`oauth-merge-by-code__code-error-${errorKey.toLowerCase()}`} show>\n            {getErrorText(verification, trls, authType)}\n        </FormError>\n    );\n};\n\nexport default translation(CodeError);\n","import { Fragment, useCallback, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AxiosResponse } from 'axios';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport { useCaptcha } from '@hh.ru/hhcaptcha';\nimport { Link as MagritteLink, Text } from '@hh.ru/magritte-ui';\nimport { FormSeparator } from 'bloko/blocks/form';\nimport BlokoLink, { LinkAppearance } from 'bloko/blocks/link';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format } from 'bloko/common/trl';\n\nimport { formatSeconds } from 'Utils/Dates';\nimport Hhcaptcha from 'lux/components/Hhcaptcha';\nimport Recaptcha from 'lux/components/Recaptcha';\nimport translation from 'lux/components/translation';\nimport useMagritte from 'lux/hooks/useMagritte';\nimport useTimer from 'lux/hooks/useTimer';\nimport { OtpRequest } from 'lux/models/applicant/auth';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nconst TrlKeys = {\n    send: 'account.connect.merge_by_code.send',\n    wait: 'account.connect.merge_by_code.wait',\n};\n\n// из всех описанных урлов FetcherPostApi оставляем только те которые по запросу/ответу удовлетворяют интерфейсу OtpRequest\nexport type AvailableOtpUrls = keyof {\n    [K in keyof FetcherPostApi as FetcherPostApi[K] extends OtpRequest ? K : never]: FetcherPostApi[K];\n};\n\nconst CodeSender: TranslatedComponent<{\n    login?: string;\n    isSignupPage?: boolean;\n    url: AvailableOtpUrls;\n    otpType: string;\n    operationType?: string;\n    recaptchaClassName?: string;\n    disableCaptcha?: boolean;\n}> = ({ login, trls, isSignupPage, url, otpType, operationType, recaptchaClassName = '', disableCaptcha }) => {\n    const [recaptchaValue, setRecaptchaValue] = useState<string | null>(null);\n    const { secondsUntilNextSend } = useSelector(({ otp }) => otp);\n    const recaptcha = useSelector(({ recaptcha }) => recaptcha);\n    const hhcaptcha = useSelector(({ hhcaptcha }) => hhcaptcha);\n    const [sendTimer, setSendTimer] = useTimer(secondsUntilNextSend);\n    const dispatch = useDispatch();\n    const elementRef = useRef<HTMLDivElement>(null);\n    const captcha = useCaptcha();\n    const vacancyId = useSelector(({ postponedActions }) => postponedActions?.vacancy?.vacancyId);\n    const isMagritte = useMagritte();\n\n    const sendCode = useCallback(async () => {\n        const captchaInput = elementRef.current?.querySelector('.g-recaptcha-response') as HTMLInputElement | undefined;\n        const params: OtpRequest['body'] = {\n            login,\n            otpType,\n            operationType,\n        };\n        let response: AxiosResponse<OtpRequest['response'], unknown> | null = null;\n\n        captcha.addCaptchaParams(params);\n\n        if (captchaInput?.value && recaptchaValue !== captchaInput.value) {\n            params['g-recaptcha-response'] = captchaInput.value;\n            captchaInput?.value && setRecaptchaValue(captchaInput.value);\n        }\n\n        Analytics.sendHHEventButtonClick(\n            'resend_code',\n            {\n                isSignupPage,\n                vacancyId,\n            },\n            { login }\n        );\n\n        try {\n            response = await fetcher.postFormData(url, params);\n        } catch (err) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (!err?.response?.data?.recaptcha || !err?.response?.data?.hhcaptcha) {\n                dispatch(showDefaultError(err));\n                return;\n            }\n        }\n\n        if (response) {\n            response.data && captcha.updateCaptcha(response.data);\n            setSendTimer(response.data?.otp?.secondsUntilNextSend || 0);\n        } else {\n            dispatch(showDefaultError());\n        }\n    }, [login, otpType, operationType, captcha, recaptchaValue, isSignupPage, vacancyId, url, dispatch, setSendTimer]);\n\n    const linkProps = {\n        onClick: sendCode,\n        'data-qa': 'oauth-merge-by-code__code-resend',\n        children: trls[TrlKeys.send],\n    };\n\n    const link = isMagritte ? (\n        <MagritteLink {...linkProps} />\n    ) : (\n        <BlokoLink appearance={LinkAppearance.Pseudo} {...linkProps} />\n    );\n\n    const renderTime = () => {\n        const timer = <p suppressHydrationWarning>{format(trls[TrlKeys.wait], { '{0}': formatSeconds(sendTimer) })}</p>;\n        if (isMagritte) {\n            return <Text>{timer}</Text>;\n        }\n        return timer;\n    };\n\n    return (\n        <div ref={elementRef}>\n            {!disableCaptcha && (\n                <>\n                    <Recaptcha WrapperField={Fragment} className={recaptchaClassName} />\n                    <Hhcaptcha />\n                    {(recaptcha?.isBot || hhcaptcha?.isBot) && <FormSeparator />}\n                </>\n            )}\n            {sendTimer > 0 ? renderTime() : link}\n        </div>\n    );\n};\nexport default translation(CodeSender);\n","import { useRef, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FormError, FormSeparator } from 'bloko/blocks/form';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslationLangContext } from 'bloko/common/hooks/useTranslations';\n\nimport Debug from 'HHC/Debug';\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nexport const ERROR_RECAPTCHA_VERIFICATION = 'failed';\n\nconst CHECK_RECAPTCHA_TIMEOUT_MS = 300;\n\nconst renderRecaptcha = (element, wrapper, siteKey, widgetId) => {\n    requestAnimationFrame(() => {\n        try {\n            if (widgetId.current !== null) {\n                window.grecaptcha.reset(widgetId.current);\n                return;\n            }\n            widgetId.current = window.grecaptcha.render(element, {\n                sitekey: siteKey,\n            });\n            wrapper.classList.remove('g-hidden');\n        } catch (error) {\n            Debug.log('error out', error, { isRecaptcha: true });\n        }\n    });\n};\n\nlet scriptAppended = false;\n\nconst loadScript = (lang) => {\n    if (scriptAppended) {\n        return;\n    }\n\n    const script = document.createElement('script');\n    script.src = `https://recaptcha.net/recaptcha/api.js?render=explicit&hl=${lang}&_=${Date.now()}`;\n    document.body.appendChild(script);\n    scriptAppended = true;\n};\n\nconst Recaptcha = ({ isBot, siteKey, error, className, trls, WrapperField }) => {\n    const wrapper = useRef(null);\n    const element = useRef(null);\n    const widgetId = useRef(null);\n    const lang = useContext(TranslationLangContext);\n\n    useEffect(() => {\n        if (!isBot) {\n            return undefined;\n        }\n\n        loadScript(lang);\n\n        let timerId;\n\n        const checkToRender = () => {\n            clearTimeout(timerId);\n            if (window.grecaptcha?.render) {\n                renderRecaptcha(element.current, wrapper.current, siteKey, widgetId);\n            } else {\n                timerId = setTimeout(checkToRender, CHECK_RECAPTCHA_TIMEOUT_MS);\n            }\n        };\n\n        checkToRender();\n\n        return () => {\n            clearTimeout(timerId);\n        };\n    }, [isBot, lang, error, siteKey]);\n\n    const content = <div ref={element} className={className} />;\n\n    return (\n        <>\n            <div ref={wrapper} className={!isBot ? 'g-hidden' : ''}>\n                <input type=\"hidden\" name=\"isBot\" value={isBot} />\n                {WrapperField ? (\n                    <WrapperField>{content}</WrapperField>\n                ) : (\n                    <>\n                        <VSpacing base={2} />\n                        {content}\n                    </>\n                )}\n            </div>\n            {error && <FormSeparator />}\n            <FormError show={error}>{trls[Recaptcha.trls.error]}</FormError>\n        </>\n    );\n};\n\nRecaptcha.propTypes = {\n    isBot: PropTypes.bool,\n    siteKey: PropTypes.string,\n    className: PropTypes.string,\n    error: PropTypes.bool,\n    trls: PropTypes.object,\n    WrapperField: PropTypes.elementType,\n};\n\nRecaptcha.trls = {\n    error: 'error.signup.captcha.invalid',\n};\n\nconst RecaptchaWithTRL = translation(Recaptcha);\n\nconst RecaptchaWrapper = (props) => {\n    const recaptcha = useSelector(({ recaptcha }) => recaptcha);\n    const isFirstRender = useRef(false);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        setError(recaptcha?.isBot && isFirstRender.current);\n        isFirstRender.current = !!recaptcha?.isBot;\n    }, [recaptcha]);\n\n    return <RecaptchaWithTRL error={error} {...recaptcha} {...props} />;\n};\n\nexport default RecaptchaWrapper;\n","import Column from 'bloko/blocks/column';\nimport { H2 } from 'bloko/blocks/header';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport useBreakpoint, { Breakpoint } from 'bloko/common/hooks/useBreakpoint';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\n\nimport VerificationForm, { VerificationFormBaseProps } from 'lux/components/Verification/VerificationForm';\n\nconst TrlKeys = {\n    header: 'otp.confirm.header',\n    subHeader: 'otp.confirm.sub.header',\n    firstName: 'newApplicant.firstName',\n    lastName: 'newApplicant.lastName',\n    send: 'account.connect.merge_by_code.send',\n    codePlaceholder: 'account.connect.merge_by_code.codePlaceholder',\n    confirmCode: 'account.connect.merge_by_code.confirm',\n    submitSignup: 'signupForm.create.submit',\n};\n\nexport interface VerificationProps extends VerificationFormBaseProps {\n    onCancel?: () => void;\n    cancelText?: string;\n    codePlaceholder?: string;\n    errorPageLogin?: boolean;\n    loginFormatted?: string;\n}\n\nconst Verification: TranslatedComponent<VerificationProps> = ({\n    trls,\n    errorPageLogin,\n    codePlaceholder,\n    onCancel,\n    cancelText,\n    loginFormatted,\n    ...formProps\n}) => {\n    const isXs = useBreakpoint() === Breakpoint.XS;\n    const { isSignupPage, login } = formProps;\n\n    return (\n        <VerificationForm\n            render={({ renderInput, renderCodeError, renderCodeSender, renderSubmit, renderCancelButton }) => {\n                return (\n                    <Column l={'6'} m={'6'} s={'6'} xs={'4'} container>\n                        <H2>\n                            <div className=\"verification-header\">\n                                {format(trls[TrlKeys.header], {\n                                    '{0}': (loginFormatted as string) || (login as string),\n                                })}\n                            </div>\n                        </H2>\n                        <VSpacing base={3} />\n                        <p>{trls[TrlKeys.subHeader]}</p>\n                        <VSpacing base={6} />\n                        <div className=\"verification-content\">\n                            <div className=\"verification-input-wrapper\">\n                                {renderInput({\n                                    placeholder: codePlaceholder,\n                                    isAutofocus: isSignupPage,\n                                })}\n                            </div>\n                        </div>\n                        <div>\n                            {isXs && renderCodeError()}\n                            <VSpacing base={3} />\n                            <Text importance={TextImportance.Tertiary}>{renderCodeSender()}</Text>\n                        </div>\n                        {!isXs && <div className=\"verification-error-wrapper\">{renderCodeError()}</div>}\n                        <VSpacing base={0} xs={5} />\n                        <div className=\"verification-submit\">{renderSubmit({ isStretched: !errorPageLogin })}</div>\n                        {onCancel && (\n                            <>\n                                <VSpacing base={3} />\n                                <div className=\"verification-submit\">\n                                    {renderCancelButton({\n                                        isStretched: !errorPageLogin,\n                                        onClick: onCancel,\n                                        trl: cancelText as string,\n                                    })}\n                                </div>\n                            </>\n                        )}\n                    </Column>\n                );\n            }}\n            {...formProps}\n        />\n    );\n};\n\nexport default translation(Verification);\n","import { Dispatch, FormEventHandler, ReactNode, RefObject, SetStateAction, useEffect, useRef, useState } from 'react';\n\nimport Button, { ButtonKind, ButtonAppearance, ButtonType } from 'bloko/blocks/button';\nimport InputText, { InputType } from 'bloko/blocks/inputText';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport Form from 'lux/components/Form';\nimport CodeError from 'lux/components/OTP/CodeError';\nimport CodeSender, { AvailableOtpUrls } from 'lux/components/OTP/CodeSender';\nimport translation from 'lux/components/translation';\nimport useAutofocus from 'lux/hooks/useAutofocus';\nimport { Verification as VerificationType } from 'lux/models/applicant/auth';\n\nconst MIN_CODE_LENGTH = 4;\n\nconst TrlKeys = {\n    header: 'otp.confirm.header',\n    subHeader: 'otp.confirm.sub.header',\n    firstName: 'newApplicant.firstName',\n    lastName: 'newApplicant.lastName',\n    send: 'account.connect.merge_by_code.send',\n    codePlaceholder: 'account.connect.merge_by_code.codePlaceholder',\n    confirmCode: 'account.connect.merge_by_code.confirm',\n    submitSignup: 'signupForm.create.submit',\n};\n\ninterface RenderInputArgs {\n    placeholder?: string;\n    isAutofocus?: boolean;\n}\n\ninterface RenderSubmitArgs {\n    isStretched?: boolean;\n}\n\ninterface RenderCancelButtonArgs {\n    isStretched?: boolean;\n    onClick: () => void;\n    trl: string;\n}\n\ninterface VerificationFormProps {\n    isSignupPage?: boolean;\n    login?: string;\n    authType?: string;\n    operationType?: string;\n    onShownAnalytics?: (ref: RefObject<HTMLFormElement>) => void;\n    onSubmit: (\n        setSending: Dispatch<SetStateAction<boolean>>,\n        setVerification: Dispatch<SetStateAction<VerificationType | null>>,\n        code: string\n    ) => void;\n    url?: AvailableOtpUrls;\n    render: (args: {\n        renderInput: (args?: RenderInputArgs) => ReactNode;\n        renderCodeError: () => ReactNode;\n        renderCodeSender: () => ReactNode;\n        renderSubmit: (args?: RenderSubmitArgs) => ReactNode;\n        renderCancelButton: (args: RenderCancelButtonArgs) => ReactNode;\n    }) => ReactNode;\n}\n\nexport type VerificationFormBaseProps = Omit<VerificationFormProps, 'render'>;\n\nconst Verification: TranslatedComponent<VerificationFormProps> = ({\n    trls,\n    render,\n    login,\n    authType,\n    isSignupPage,\n    onShownAnalytics,\n    operationType,\n    onSubmit,\n    url = '/account/otp_generate' as const,\n}) => {\n    const [code, setCode] = useState('');\n    const [isSending, setIsSending] = useState(false);\n    const [verification, setVerification] = useState<VerificationType | null>(null);\n    const elementRef = useRef<HTMLFormElement>(null);\n    const autofocusRef = useAutofocus();\n\n    useEffect(() => {\n        onShownAnalytics?.(elementRef);\n    }, [elementRef, onShownAnalytics]);\n\n    const confirmCode: FormEventHandler<HTMLFormElement> = (event) => {\n        event?.preventDefault();\n        onSubmit(setIsSending, setVerification, code);\n    };\n\n    const updateCode = (value: string) => {\n        setVerification(null);\n        setCode(value);\n    };\n\n    const renderInput = ({ placeholder, isAutofocus }: RenderInputArgs = {}) => {\n        return (\n            <InputText\n                type={InputType.Number}\n                placeholder={placeholder || trls[TrlKeys.codePlaceholder]}\n                data-qa=\"otp-code-input\"\n                name=\"otp-code-input\"\n                onChange={updateCode}\n                invalid={!!verification}\n                autoFocus\n                ref={isAutofocus ? autofocusRef : undefined}\n            />\n        );\n    };\n\n    const renderCodeError = () => {\n        return <CodeError verification={verification} authType={authType} />;\n    };\n\n    const renderCodeSender = () => {\n        return (\n            <CodeSender\n                login={login}\n                isSignupPage={isSignupPage}\n                url={url}\n                operationType={operationType}\n                otpType={authType === 'EMAIL' ? 'email' : 'phone'}\n                recaptchaClassName=\"account-login-recaptcha\"\n            />\n        );\n    };\n\n    const renderSubmit = ({ isStretched }: RenderSubmitArgs = {}) => {\n        return (\n            <Button\n                kind={ButtonKind.Primary}\n                type={ButtonType.Submit}\n                disabled={code.length < MIN_CODE_LENGTH || isSending}\n                data-qa=\"otp-code-submit\"\n                stretched={isStretched}\n            >\n                {trls[TrlKeys.confirmCode]}\n            </Button>\n        );\n    };\n\n    const renderCancelButton = ({ isStretched, onClick, trl }: RenderCancelButtonArgs) => {\n        return (\n            <Button\n                kind={ButtonKind.Primary}\n                appearance={ButtonAppearance.Outlined}\n                type={ButtonType.Button}\n                onClick={onClick}\n                data-qa={'otp-code-cancel'}\n                stretched={isStretched}\n            >\n                {trl}\n            </Button>\n        );\n    };\n\n    return (\n        <Form data-qa={'otp-code-form'} onSubmit={confirmCode} ref={elementRef}>\n            {render({ renderInput, renderCodeError, renderCodeSender, renderSubmit, renderCancelButton })}\n        </Form>\n    );\n};\n\nexport default translation(Verification);\n","import React, { useEffect, useRef } from 'react';\n\nconst useAutofocus = (): React.MutableRefObject<HTMLInputElement | null> => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        if (inputRef.current) {\n            if (inputRef.current.type !== 'number') {\n                inputRef.current.selectionStart = inputRef.current.value.length;\n            }\n            inputRef.current.focus();\n        }\n    }, []);\n    return inputRef;\n};\n\nexport const useAutofocusRenderOnce = (): ((value: string) => {\n    ref?: React.MutableRefObject<HTMLInputElement | null>;\n}) => {\n    const refSetted = useRef<boolean>();\n    const inputRefToFocus = useAutofocus();\n    return (value: string) => {\n        if (!value && !inputRefToFocus.current && !refSetted.current) {\n            refSetted.current = true;\n            return { ref: inputRefToFocus };\n        }\n        return {};\n    };\n};\n\nexport default useAutofocus;\n","import { useState, useLayoutEffect } from 'react';\n\nexport default function useIsClient(): boolean {\n    const [isClient, setIsClient] = useState(false);\n    useLayoutEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    return isClient;\n}\n","import { useState, useEffect, useRef } from 'react';\n\nimport { getCurrentSeconds } from 'Utils/Dates';\n// Хук для таймера обратного отсчета, возвращает оставшееся количество секунд и коллбэк для его изменения\n\nexport default (seconds = 0): [number, (value: number) => void] => {\n    const [timeLeft, setTime] = useState(Math.max(seconds, 0));\n    const timer = useRef(0);\n    useEffect(() => {\n        const startTime = getCurrentSeconds();\n        const tick = () => {\n            const secondsPassed = getCurrentSeconds() - startTime;\n            const secondsLeft = timeLeft - secondsPassed;\n            if (secondsLeft < 0 || Number.isNaN(secondsLeft)) {\n                setTime(0);\n                clearTimeout(timer.current);\n            } else {\n                setTime(secondsLeft);\n            }\n        };\n        timer.current = window.setTimeout(tick, 1000);\n        return () => clearTimeout(timer.current);\n    }, [timeLeft]);\n    return [timeLeft, setTime];\n};\n"],"names":["formatSeconds","seconds","date","Date","format","getHours","formatDate","getSeconds","Math","floor","getCurrentSeconds","now","IntervalMessages","humanDatesRules","humanDatesList","Object","keys","sort","a","b","sign","get","deltaTime","deltaSeconds","messageIndex","findIndex","i","translation","error","Debug","timeLeft","calculateDisabledDates","selectedDate","lastAvailableDate","isBefore","startOfMonth","start","max","addDays","end","endOfMonth","eachDayOfInterval","map","disabledDate","Index","isFetching","children","props","isClient","useIsClient","useRedesign","mode","MagritteButtonMode","Element","icon","type","MagritteButtonType","disabled","style","MagritteButtonStyle","loading","size","ButtonSize","ButtonType","kind","ButtonKind","initial","LoadingColor","scale","LoadingScale","TrlKeys","RU","EN","Hhcaptcha","trls","isMagritte","captchaTrl","useMemo","renewText","description","placeholder","lang","fetcher","getSecondsRemain","till","nowSeconds","secondsRemain","value","setValue","useState","useEffect","timeOutHandler","updateValue","setTimeout","clearTimeout","useTimeoutTimer","CONFIRM_CODE_BLOCKED","CONFIRM_CODE_BLOCKED_PHONE","default","CODE_NOT_FOUND","WRONG_CODE","CODE_EXPIRED","getErrorText","authType","key","nextConfirmTime","errorText","toLowerCase","formatToReactComponent","timestamp","CodeError","verification","errorKey","FormError","show","CodeSender","login","isSignupPage","url","otpType","operationType","recaptchaClassName","disableCaptcha","recaptchaValue","setRecaptchaValue","secondsUntilNextSend","useSelector","otp","recaptcha","hhcaptcha","sendTimer","setSendTimer","useTimer","dispatch","useDispatch","elementRef","useRef","captcha","useCaptcha","vacancyId","postponedActions","vacancy","useMagritte","linkProps","onClick","useCallback","async","captchaInput","current","querySelector","params","response","addCaptchaParams","Analytics","err","data","showDefaultError","updateCaptcha","link","appearance","LinkAppearance","ref","WrapperField","Fragment","className","isBot","FormSeparator","timer","suppressHydrationWarning","renderTime","scriptAppended","Recaptcha","siteKey","wrapper","element","widgetId","useContext","TranslationLangContext","timerId","script","document","createElement","src","body","appendChild","loadScript","checkToRender","window","grecaptcha","render","requestAnimationFrame","reset","sitekey","classList","remove","isRecaptcha","renderRecaptcha","content","name","base","propTypes","PropTypes","RecaptchaWithTRL","RecaptchaWrapper","isFirstRender","setError","Verification","errorPageLogin","codePlaceholder","onCancel","cancelText","loginFormatted","formProps","isXs","useBreakpoint","Breakpoint","renderInput","renderCodeError","renderCodeSender","renderSubmit","renderCancelButton","l","m","s","xs","container","H2","isAutofocus","importance","TextImportance","isStretched","trl","onShownAnalytics","onSubmit","code","setCode","isSending","setIsSending","setVerification","autofocusRef","useAutofocus","updateCode","event","preventDefault","InputType","onChange","invalid","autoFocus","undefined","length","stretched","ButtonAppearance","inputRef","selectionStart","focus","useAutofocusRenderOnce","refSetted","inputRefToFocus","setIsClient","useLayoutEffect","setTime","startTime","secondsPassed","secondsLeft","Number","isNaN"],"sourceRoot":""}