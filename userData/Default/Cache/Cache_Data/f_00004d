{"version":3,"file":"VacancyFavorite.917a4f91203a029f3e0b.js","mappings":";;;gLAaA,SAAgBA,EAASC,KACrBC,OAAOC,qBAAoB,KACvBC,EAAAA,QAAAA,KAAuB,CACnBJ,QAAAA,EACAK,YACI,MAAM,IAAEC,EAAG,GAAEC,EAAE,aAAEC,EAAY,YAAEC,GAAgBR,EAC/C,IAAIS,EAAU,CAACH,GACXD,IACAI,EAAUJ,GAEdK,EAAAA,QAAAA,OAAeX,EAASU,EAASF,EAAcC,W;;;iGCjB/D,MAoCA,EApC0B,CAWtBG,KAAKC,GACD,IAAIC,GAAU,EACd,MAAMd,EAAUa,EAAQb,QAClBe,EAAe,KACbD,IAGAd,EAAQgB,aAAehB,EAAQiB,cAAgBjB,EAAQkB,iBAAiBC,QACxEL,GAAU,EACVD,EAAQR,YACRH,OAAOkB,oBAAoB,SAAUL,GACrCb,OAAOkB,oBAAoB,oBAAqBL,GAChDf,EAAQqB,QAAQC,gBAAkB,SAElCR,GAAU,IAG8B,SAA5CD,EAAQb,QAAQqB,QAAQC,kBACxBpB,OAAOqB,iBAAiB,SAAUR,GAClCb,OAAOqB,iBAAiB,oBAAqBR,GAC7CF,EAAQb,QAAQqB,QAAQC,gBAAkB,QAE9CP,O;;;wxBC/BR,IAAIS,EAKAA,EAAsBC,iDAAAA,OAAAA,QAuB1B,MAAMC,UAAeC,EAAAA,UACjB3B,QAA8B,KAC9B,oBAAsB,CAClBQ,aAAc,8BAGlBoB,oBACIC,KAAK7B,QAAU6B,KAAKC,MAAMC,QAAU,KAAQC,IAAAA,YAAqBH,MAC7DA,KAAK7B,UACL6B,KAAK7B,QAAQuB,iBAAiB,kBAAmBM,KAAKI,cAAcC,KAAKL,OACzEA,KAAKM,eAIbC,qBACQP,KAAK7B,SACL6B,KAAKM,cAIbE,uBAAuB,MACP,QAAZ,EAAAR,KAAK7B,eAAO,OAAZ,EAAcoB,oBAAoB,kBAAmBS,KAAKI,eAG9DK,sBAAsBC,GAClB,OAAIA,EAAUC,qBAGPD,EAAUE,SAAWZ,KAAKC,MAAMW,QAAUF,EAAUG,WAAab,KAAKC,MAAMY,UAGvFP,cAAc,MACV,MAAM,GAAE5B,EAAE,aAAEC,EAAY,YAAEC,EAAW,cAAEkC,GAAkBd,KAAKC,MAK9D,IAAIc,EAJAf,KAAK7B,UACL6B,KAAK7B,QAAQ6C,MAAMC,OAAU,GAAEjB,KAAK7B,QAAQ+C,iBAC5ClB,KAAK7B,QAAQgD,UAAY,IAGzBvC,IACAmC,EAAsB,EAAH,KACZnC,GAAW,IACdwC,KAAM,QACNC,SAAU3C,EACV4C,MAAO5C,EACP6C,sBAAuBT,EACvBU,kBAAmB5C,EAAY4C,mBAAqB,MAG5D,MAAMC,EAAe,CACjB/C,GAAAA,EACAC,aAAAA,EACAC,YAAamC,GAGE,QAAnB,EAAApB,SAAmB,OAAnB,EAAsBK,KAAK7B,QAASsD,GAGxCrB,cAAgB,KACRJ,KAAK7B,UACL6B,KAAK7B,QAAQ6C,MAAMC,OAAS,SAIpCS,SACI,OAAO1B,KAAKC,MAAM0B,WAAY,oBAhEhC9B,EAAM,6CAoEZ,SAAe+B,EAAAA,EAAAA,UAASC,IAAuB,CAC3ChB,SAAUgB,EAAMC,OAAOC,SAASlB,SAChCD,OAAQiB,EAAMC,OAAOC,SAASnB,OAC9BD,mBAAoBkB,EAAMlB,mBAC1BG,cAAee,EAAMf,iBAJzB,CAKIjB,G,8lBCrGJ,MAAMmC,EAAgD,IAAyC,IAAxC,GAAEtD,EAAE,IAAEuD,EAAG,GAAEC,EAAE,GAAEC,GAAoB,EAAbvD,GAAW,YACpF,MAAMwD,EAAcF,GAAMC,EACpBE,GAA4BC,EAAAA,EAAAA,8BAA4BC,EAAAA,EAAAA,OAE9D,OAAKH,GAAeC,GACT,SAAC,EAAM,CAAW3D,GAAIA,EAAIwB,QAASmC,GAAtBJ,IAIpB,SAAC,EAAM,CAEHvD,GAAIA,EACJC,aAAa,GACbC,YAAW,GACPsD,GAAAA,EACAC,GAAAA,EACAF,IAAAA,GACGrD,GACL,UAEF,gBACIF,GAAIuD,EACJO,UAAY,cAAa9D,+CAAgDA,2CAA4CA,IACrH,iBAAgBA,EAChB,mBAAiB,oBACjB,oBAAkB,uBAfjBuD,IAVXD,EAA6C,oEA+BnD,W;;;0GCrCe,SAASS,IACpB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GAKzC,OAJAC,EAAAA,EAAAA,kBAAgB,KACZF,GAAY,KACb,IAEID,I;;;sjBCHX,MAAMI,EAAyB,KAC3B,MAAMC,GAAeC,EAAAA,EAAAA,IAAY,QAAC,QAAEnE,GAAS,SAAKA,EAAS,mBAC3D,OAAKkE,MAAAA,GAAAA,EAAczD,QAKf,SAAC,IAAM,CAAC2D,GAAI,IAAKC,EAAG,IAAKC,EAAG,IAAI,UAC5B,gBAAKX,UAAW,mBAAoB,iBAAgBO,EAAa,GAAGrE,GAAG,SAClEqE,GAAgBA,EAAaK,KAAKC,IAAW,SAACrB,EAAA,E,qWAAiB,IAAqBqB,GAAfA,EAAO3E,UAN9E,MAHToE,EAAsB,wEAe5B,U,qkBCHA,MAAMQ,EAAsB,IAAc,IAAb,KAAEC,GAAM,EACjC,MAAMC,GAAYR,EAAAA,EAAAA,IAAanB,IAAK,aAA4B,QAA5B,EAAKA,EAAM4B,yBAAiB,aAAvB,EAAyBD,aAC5DE,GAASV,EAAAA,EAAAA,IAAanB,IAAK,aAA4B,QAA5B,EAAKA,EAAM4B,yBAAiB,aAAvB,EAAyBC,UACzDC,EAAQJ,EAAKD,EAAoBC,KAAKI,OAEtCC,EADaC,GAAAA,KACSC,EAAAA,WAAAA,GAE5B,OACI,UAACC,EAAA,GAAU,CAACJ,MAAOA,EAAOK,OAAQC,EAAAA,GAAeC,QAASpB,EAAuB,WAC7E,UAAC,IAAM,CAACG,GAAG,IAAIkB,EAAE,IAAIjB,EAAE,IAAIC,EAAE,KAAI,WAC7B,SAAC,EAAAiB,GAAE,UAAET,KACL,SAAC,IAAQ,CAACU,KAAM,QAEpB,SAAC,IAAM,CAACpB,GAAG,IAAIkB,EAAE,IAAIjB,EAAE,IAAIC,EAAE,KAAI,UAC7B,UAAC,IAAG,CAACmB,QAAM,YACNd,MAAAA,OAAS,EAATA,EAAWJ,KAAKmB,IACb,SAACC,EAAA,EAAiB,CAEdD,QAASA,EACTE,cAAeC,EAAAA,EAAAA,cACfd,KAAMA,GAHDW,EAAQI,aAMpBjB,IACG,SAAC,IAAG,CAACkB,KAAG,YACJ,SAACC,EAAA,EAAU,KAAKnB,QAGtBF,MAAAA,GAAAA,EAAWlE,UACT,iCACI,uBAAIiE,EAAKD,EAAoBC,KAAKuB,eAClC,uBAAIvB,EAAKD,EAAoBC,KAAKwB,yBA/BxDzB,EAAmB,8EAwCzBA,EAAoB0B,UAAY,CAC5BzB,KAAM0B,IAAAA,QAGV3B,EAAoBC,KAAO,CACvBI,MAAO,0BACPmB,WAAY,gCACZC,UAAW,6CAGf,SAAeG,EAAAA,EAAAA,GAAY5B","sources":["xhh/./webapp-static/js/HH/LoadBannerOnVisibleModule.js","xhh/./webapp-static/js/Utils/VisibilityWatcher.js","xhh/./webapp-static/lux/components/Banner/index.tsx","xhh/./webapp-static/lux/components/Banner/AdsExternalBanner.tsx","xhh/./webapp-static/lux/hooks/useIsClient.ts","xhh/./webapp-static/lux/pages/VacancyFavorite/components/Sidebar.jsx","xhh/./webapp-static/lux/pages/VacancyFavorite/VacancyFavorite.route.jsx"],"sourcesContent":["import Banners from 'HHC/Banners';\nimport visibilityWatcher from 'Utils/VisibilityWatcher';\n/**\n * Подгружает баннер в ноду компонента, при видимости этой ноды.\n *\n * @param {String|Number}   id              ID баннера\n * @param {Array}           ids             ID баннеров, имеет приоритет перед id\n * @param {String}          [templateName]  Имя шаблона для баннера, если имя шаблона не указано, то баннер будет\n *                                          добавлен в текущую ноду без применения шаблонов\n *\n * @name HH/LoadBannerOnVisibleModule\n * @constructor\n */\nexport default (element, params) => {\n    window.requestIdleCallback(() => {\n        visibilityWatcher.init({\n            element,\n            onVisible() {\n                const { ids, id, templateName, adfoxParams } = params;\n                let banners = [id];\n                if (ids) {\n                    banners = ids;\n                }\n                Banners.create(element, banners, templateName, adfoxParams);\n            },\n        });\n    });\n};\n","/**\n * Утилита следит за видимостью элемента на странице, и запускает калбеки при изменении состояния. <br>\n *\n * @type {Object}\n * @exports Utils/VisibilityWatcher\n */\nconst visibilityWatcher = {\n    /**\n     * Инициализирует вотчер на элементе.\n     *\n     * @param {Object}   options\n     * @param {Element}  options.element   DOM элемент за которым наблюдаем\n     * @param {Function} options.onVisible Функция, которая будет вызвана, когда элемент отобразится\n     *\n     * @member\n     * @method\n     */\n    init(options) {\n        let visible = false;\n        const element = options.element;\n        const checkVisible = () => {\n            if (visible) {\n                return;\n            }\n            if (element.offsetWidth || element.offsetHeight || element.getClientRects().length) {\n                visible = true;\n                options.onVisible();\n                window.removeEventListener('resize', checkVisible);\n                window.removeEventListener('element-displayed', checkVisible);\n                element.dataset.listenersSetted = 'false';\n            } else {\n                visible = false;\n            }\n        };\n        if (options.element.dataset.listenersSetted !== 'true') {\n            window.addEventListener('resize', checkVisible);\n            window.addEventListener('element-displayed', checkVisible);\n            options.element.dataset.listenersSetted = 'true';\n        }\n        checkVisible();\n    },\n};\nexport default visibilityWatcher;\n","import { Component, ReactNode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect, DefaultRootState } from 'react-redux';\n\nimport LoadBannerOnVisibleSignature from 'HH/LoadBannerOnVisibleModule.d';\nimport { YandexAdfoxBannerProps } from 'lux/models/banners/YandexAdfoxBanner.types';\nimport { UserTargeting } from 'lux/models/userTargeting';\n\nlet loadBannerOnVisible: typeof LoadBannerOnVisibleSignature | undefined;\n\nif (!process.env.LUX_SERVER) {\n    /* eslint @typescript-eslint/no-var-requires: \"off\" */\n    /* eslint @typescript-eslint/no-unsafe-member-access: \"off\" */\n    loadBannerOnVisible = require('HH/LoadBannerOnVisibleModule').default as typeof LoadBannerOnVisibleSignature;\n}\n\ninterface BannerProps {\n    /** Индификатор баннера */\n    id: string;\n    /** Название шаблона для баннера */\n    templateName?: string;\n    /** Нода в которую кладется баннер */\n    children?: ReactNode;\n    /** Флаг отмены отправки запросов в баннерную систему */\n    cancelFetchBanners?: boolean;\n    /** Строка текущих get параметров URL */\n    search?: string;\n    /** Строка текущего URL без параметров */\n    pathname?: string;\n    /** Параметры для Yandex adfox баннеров */\n    adfoxParams?: Omit<YandexAdfoxBannerProps, 'id'>;\n    /** Строит пустой див вместо баннера **/\n    isEmpty?: boolean;\n    userTargeting?: UserTargeting;\n}\n\nclass Banner extends Component<BannerProps> {\n    element: HTMLElement | null = null;\n    static defaultProps = {\n        templateName: 'HHC-Banners-Place-Template',\n    };\n\n    componentDidMount() {\n        this.element = this.props.isEmpty ? null : (ReactDOM.findDOMNode(this) as HTMLElement);\n        if (this.element) {\n            this.element.addEventListener('HH-Banners-Init', this.setAutoHeight.bind(this));\n            this.initBanners();\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.element) {\n            this.initBanners();\n        }\n    }\n\n    componentWillUnmount() {\n        this.element?.removeEventListener('HH-Banners-Init', this.setAutoHeight);\n    }\n\n    shouldComponentUpdate(nextProps: BannerProps) {\n        if (nextProps.cancelFetchBanners) {\n            return false;\n        }\n        return nextProps.search !== this.props.search || nextProps.pathname !== this.props.pathname;\n    }\n\n    initBanners() {\n        const { id, templateName, adfoxParams, userTargeting } = this.props;\n        if (this.element) {\n            this.element.style.height = `${this.element.clientHeight}px`;\n            this.element.innerHTML = '';\n        }\n        let adfoxParamsProperty;\n        if (adfoxParams) {\n            adfoxParamsProperty = {\n                ...adfoxParams,\n                type: 'adfox',\n                bannerId: id,\n                place: id,\n                bannerCommonTargeting: userTargeting,\n                bannerAdTargeting: adfoxParams.bannerAdTargeting || {},\n            };\n        }\n        const bannerParams = {\n            id,\n            templateName,\n            adfoxParams: adfoxParamsProperty,\n        };\n\n        loadBannerOnVisible?.(this.element, bannerParams);\n    }\n\n    setAutoHeight = (): void => {\n        if (this.element) {\n            this.element.style.height = 'auto';\n        }\n    };\n\n    render() {\n        return this.props.children || <div />;\n    }\n}\n\nexport default connect((state: DefaultRootState) => ({\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    cancelFetchBanners: state.cancelFetchBanners,\n    userTargeting: state.userTargeting,\n}))(Banner);\n","import type { FC } from 'react';\n\nimport { isExternalBannersRestricted } from 'HHC/Banners';\nimport { useIsBelarus } from 'lux/hooks/useCountries';\nimport { AdsExternalBannerProps } from 'lux/models/banners/AdsExternalBanner.types';\n\nimport Banner from 'lux/components/Banner';\n\nconst AdsExternalBanner: FC<AdsExternalBannerProps> = ({ id, cId, pp, p2, ...adfoxParams }) => {\n    const enableAdfox = pp && p2;\n    const shouldHideExternalBanners = isExternalBannersRestricted(useIsBelarus());\n\n    if (!enableAdfox || shouldHideExternalBanners) {\n        return <Banner key={cId} id={id} isEmpty={shouldHideExternalBanners} />;\n    }\n\n    return (\n        <Banner\n            key={cId}\n            id={id}\n            templateName=\"\"\n            adfoxParams={{\n                pp,\n                p2,\n                cId,\n                ...adfoxParams,\n            }}\n        >\n            <div\n                id={cId}\n                className={`HHC-Banner-${id} HH-Banner-Adfox banner-place banner-place_${id} banner-place-adfox banner-place-adfox_${id}`}\n                data-banner-id={id}\n                data-empty-class=\"banner-place_hide\"\n                data-loaded-class=\"banner-place_show\"\n            />\n        </Banner>\n    );\n};\n\nexport default AdsExternalBanner;\n","import { useState, useLayoutEffect } from 'react';\n\nexport default function useIsClient(): boolean {\n    const [isClient, setIsClient] = useState(false);\n    useLayoutEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    return isClient;\n}\n","import Column from 'bloko/blocks/column';\n\nimport AdsExternalBanner from 'lux/components/Banner/AdsExternalBanner';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst VacancyFavoriteSidebar = () => {\n    const rightBanners = useSelector(({ banners }) => banners[`right-column`]);\n    if (!rightBanners?.length) {\n        return null;\n    }\n\n    return (\n        <Column xs={'4'} m={'4'} l={'5'}>\n            <div className={'center-banner-xs'} data-banner-id={rightBanners[0].id}>\n                {rightBanners && rightBanners.map((banner) => <AdsExternalBanner key={banner.id} {...banner} />)}\n            </div>\n        </Column>\n    );\n};\n\nexport default VacancyFavoriteSidebar;\n","import PropTypes from 'prop-types';\n\nimport Column from 'bloko/blocks/column';\nimport Gap from 'bloko/blocks/gap';\nimport { H1 } from 'bloko/blocks/header';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport useBreakpoint, { Breakpoint } from 'bloko/common/hooks/useBreakpoint';\n\nimport PageLayout, { SideBarLayout } from 'lux/components/PageLayout';\nimport Pagination from 'lux/components/Pagination';\nimport VacancySearchItem from 'lux/components/VacancySearchItem';\nimport Source from 'lux/components/VacancySearchItem/Source';\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport VacancyFavoriteSidebar from 'lux/pages/VacancyFavorite/components/Sidebar';\n\nconst VacancyFavoritePage = ({ trls }) => {\n    const vacancies = useSelector((state) => state.favoriteVacancies?.vacancies);\n    const paging = useSelector((state) => state.favoriteVacancies?.paging);\n    const title = trls[VacancyFavoritePage.trls.title];\n    const breakpoint = useBreakpoint();\n    const isXs = breakpoint === Breakpoint.XS;\n\n    return (\n        <PageLayout title={title} layout={SideBarLayout} sidebar={VacancyFavoriteSidebar}>\n            <Column xs=\"4\" s=\"8\" m=\"8\" l=\"11\">\n                <H1>{title}</H1>\n                <VSpacing base={6} />\n            </Column>\n            <Column xs=\"4\" s=\"8\" m=\"8\" l=\"11\">\n                <Gap bottom>\n                    {vacancies?.map((vacancy) => (\n                        <VacancySearchItem\n                            key={vacancy.vacancyId}\n                            vacancy={vacancy}\n                            vacancySource={Source.VacancySearch}\n                            isXs={isXs}\n                        />\n                    ))}\n                    {paging && (\n                        <Gap top>\n                            <Pagination {...paging} />\n                        </Gap>\n                    )}\n                    {!vacancies?.length && (\n                        <>\n                            <p>{trls[VacancyFavoritePage.trls.emptyTitle]}</p>\n                            <p>{trls[VacancyFavoritePage.trls.emptyText]}</p>\n                        </>\n                    )}\n                </Gap>\n            </Column>\n        </PageLayout>\n    );\n};\n\nVacancyFavoritePage.propTypes = {\n    trls: PropTypes.object,\n};\n\nVacancyFavoritePage.trls = {\n    title: 'favoriteVacancyes.title',\n    emptyTitle: 'vacancySearchResults.noResult',\n    emptyText: 'vacancySearchResults.noResult.description',\n};\n\nexport default translation(VacancyFavoritePage);\n"],"names":["element","params","window","requestIdleCallback","visibilityWatcher","onVisible","ids","id","templateName","adfoxParams","banners","Banners","init","options","visible","checkVisible","offsetWidth","offsetHeight","getClientRects","length","removeEventListener","dataset","listenersSetted","addEventListener","loadBannerOnVisible","require","Banner","Component","componentDidMount","this","props","isEmpty","ReactDOM","setAutoHeight","bind","initBanners","componentDidUpdate","componentWillUnmount","shouldComponentUpdate","nextProps","cancelFetchBanners","search","pathname","userTargeting","adfoxParamsProperty","style","height","clientHeight","innerHTML","type","bannerId","place","bannerCommonTargeting","bannerAdTargeting","bannerParams","render","children","connect","state","router","location","AdsExternalBanner","cId","pp","p2","enableAdfox","shouldHideExternalBanners","isExternalBannersRestricted","useIsBelarus","className","useIsClient","isClient","setIsClient","useState","useLayoutEffect","VacancyFavoriteSidebar","rightBanners","useSelector","xs","m","l","map","banner","VacancyFavoritePage","trls","vacancies","favoriteVacancies","paging","title","isXs","useBreakpoint","Breakpoint","PageLayout","layout","SideBarLayout","sidebar","s","H1","base","bottom","vacancy","VacancySearchItem","vacancySource","Source","vacancyId","top","Pagination","emptyTitle","emptyText","propTypes","PropTypes","translation"],"sourceRoot":""}