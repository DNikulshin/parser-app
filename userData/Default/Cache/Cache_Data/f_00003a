{"version":3,"file":"69080.a32cf4d4378464bde2d1.js","mappings":";;;iJAWA,MAAMA,EAAe,CACjBC,YAAa,QAGXC,GAAwBC,EAAAA,EAAAA,eAA0CH,GAE3DI,EAA2B,KAAkCC,EAAAA,EAAAA,YAAWH,GAErF,K;;;2VCLA,MAAMI,EAAyB,IAA4B,IAA3B,MAAEC,EAAK,YAAEC,GAAa,EAClD,MAAOC,EAASC,IAAiBC,EAAAA,EAAAA,IAAe,GAChD,OAAKJ,EAGAC,GASD,4BACI,SAAC,IAAQ,CAACI,KAAM,KAChB,SAAC,IAAI,CAACC,WAAYC,EAAAA,eAAAA,OAAuBC,QAASL,EAAc,SAAG,WAAUH,OAC7E,iBAAKS,UAAWC,GAAAA,CAAW,CAAE,YAAaR,IAAW,WACjD,SAAC,IAAQ,CAACG,KAAM,KAChB,SAAC,IAAM,CACHM,MAAOC,EAAAA,YAAAA,MACPC,KAAMC,EAAAA,WAAAA,QACNR,WAAYS,EAAAA,iBAAAA,SACZP,QAAS,KACAQ,UAAUC,UAAUC,UAAUjB,IACrC,SACL,UAGD,SAAC,IAAQ,CAACI,KAAM,KAChB,gBAAKI,UAAU,sBAAsB,UAAQ,sBAAqB,SAC7DR,WAxBT,iCACI,SAAC,IAAQ,CAACI,KAAM,KAChB,yBAAO,WAAUL,SANlB,MAHTD,EAAsB,uDAsC5B,W;;;wPClCA,MAAMoB,EAAkC,QAAC,iBACrCC,EAAgB,KAChBC,EAAOC,EAAAA,aAAAA,MAAkB,OACzBC,EAAM,iBACNC,EAAgB,oBAChBC,EAAmB,4BACnBC,GACH,SACG,SAAC,EAAAC,KAAI,CACDC,GAAIR,EAAiBS,IACrBC,OAAO,SACPC,IAAI,mBACJ,UAAU,GAAER,IAASH,EAAiBY,QAAU,GAAG,UAEnD,SAAC,IAAQ,CACLC,OAAQ,IAAMb,EAAiBc,YAC/BC,UAAWC,EAAAA,aAAAA,IACXC,MAAOC,EAAAA,SAAAA,QACPC,KAAgCC,SAASC,KAAY,SAEpDjB,GAAoBC,GACjB,iBACIhB,UAAWC,GAAAA,CACPgB,EACM,+CACA,kCAId,SAAC,EAAAgB,QAAO,CAACC,KAAMC,EAAAA,YAAAA,gBAA6B/B,KAAMgC,EAAAA,YAAAA,MAAmBlC,MAAOU,SA7BtFF,EAA+B,yEAmCrC,U,0PC5CA,MACa2B,EAA4BC,IAA2B,aAChEA,MAAAA,GAAa,QAAP,EAANA,EAAQC,aAAK,WAAP,EAAN,EAAeC,QAAQC,GAFM,uBAEQA,EAAUlB,OAAmC,IAYhFmB,EAAqC,IAA2C,IAA1C,MAAEH,EAAK,cAAEI,GAA4B,EAAVC,GAAQ,YAC3E,MAGMC,EAAa,sDADCF,EAAgB,QAAU,oBAF7BG,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,aAIxCC,EAAO,CACT1B,KAAMgB,EAAMhB,KACZH,IAAM,GAAEmB,EAAMnB,MAAMyB,IACpBpB,YAAac,EAAMd,aAEvB,OAAO,SAAC,E,qWAAoB,EAACd,iBAAkBsC,GAAUL,KAVvDF,EAAkC,8FAaxC,W;;;0MC5BA,MAAMQ,EAAU,CACZC,QAAS,+BACTC,SAAU,iCAGRC,EAA6C,IAAuB,IAAtB,QAAEC,EAAO,KAAEC,GAAM,EACjE,OAAKD,GAID,8BACKE,OAAOC,KAAKH,GAASI,KAAKC,IACvB,MAAMC,EAAON,EAAQK,GAAa,SAClC,OAAO,uBAAuB,GAAEJ,EAAKL,EAAQS,MAAgBC,EAAQ,IAAGA,IAAS,MAAlED,QANhB,MAFTN,EAA0C,mEAahD,SAAeQ,EAAAA,EAAAA,GAAYR,GCCrBS,EAAyB,IAOzB,YAP0B,QAC5BR,EAAO,KACP1C,EAAOC,EAAAA,aAAAA,OAAmB,OAC1BC,EAAM,iBACNiD,EAAgB,cAChBpB,EAAa,4BACb1B,GACH,EACG,MAAM+B,GAAWF,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WAC9C,IAAKM,EAAQF,WAAaE,EAAQH,QAC9B,OAAO,KAEX,MACMN,EAAa,sDADCF,EAAgB,QAAU,mBACkDK,IAE1FgB,EAAiBlD,EACjB0C,OAAOC,KAAKH,GACPI,KAAKC,GACM,GAAE7C,KAAU6C,MAEvBM,KAAK,KACV,GAEA7C,EAAO,IAAEkC,MAAAA,GAAiB,QAAV,EAAPA,EAASF,gBAAQ,WAAV,EAAP,EAAoB,WAAWE,MAAAA,GAAgB,QAAT,EAAPA,EAASH,eAAO,WAAT,EAAP,EAAmB,UAAW,KAAKN,IAEjF,OACI,SAAC,EAAA3B,KAAI,CAACC,GAAIC,EAAKC,OAAO,SAASC,IAAI,mBAAmB,UAASR,EAAU,GAAEA,KAAUkD,IAAmB,GAAG,UACvG,SAAC,IAAQ,CACLxC,OAAQ,KAAM,SAAC,EAAc,CAAC8B,QAASA,IACvC5B,UAAWC,EAAAA,aAAAA,IACXC,MAAOC,EAAAA,SAAAA,QACPC,KAAgCC,SAASC,KAAY,SAEpD+B,GACG,iBACI/D,UAAWC,GAAAA,CACPgB,EACM,8CACA,iCAId,SAAC,EAAAgB,QAAO,CAACC,KAAMC,EAAAA,YAAAA,QAAqBjC,MAAOU,EAAMR,KAAMgC,EAAAA,YAAAA,aA1CrE0B,EAAsB,uDAgD5B,W;;;6KC1EA,QAAwB,8BAAxB,EAAwE,0CAAxE,EAAgI,qCAAhI,EAA6L,iDAA7L,EAA2P,oCAA3P,EAAiT,0CAAjT,EAAyW,qCAAzW,EAAia,2CAAja,EAA0d,qCAA1d,EAAkhB,2CAAlhB,EAA8kB,yCAA9kB,EAAmoB,mCAAnoB,EAAorB,qCAAprB,EAA4uB,2CAA5uB,EAAuyB,wC,opBCQhyB,IAAKI,EAcAC,GAFX,SAZWD,GAAAA,EAAU,cAAVA,EAAU,wBAAVA,EAAU,gBAAVA,EAAU,0BAAVA,EAAU,gBAAVA,EAAU,0BAAVA,EAAU,YAAVA,EAAU,gBAAVA,EAAU,0BAAVA,EAAU,oBAAVA,EAAU,sBAYrB,CAZWA,IAAAA,EAAU,KA2BrB,SAbWC,GAAAA,EAAS,8BAATA,EAAS,kBAATA,EAAS,sBAATA,EAAS,UAATA,EAAS,oCAATA,EAAS,gBAATA,EAAS,kBAATA,EAAS,cAATA,EAAS,4BAATA,EAAS,qBAATA,EAAS,mBAATA,EAAS,0CAapB,CAbWA,IAAAA,EAAS,KAerB,MAAMjB,EAAU,CACZ,CAACiB,EAAUC,eAAgB,GAC3B,CAACD,EAAUE,SAAU,gBACrB,CAACF,EAAUG,WAAY,kBACvB,CAACH,EAAUI,KAAM,YACjB,CAACJ,EAAUK,kBAAmB,yBAC9B,CAACL,EAAUM,QAAS,eACpB,CAACN,EAAUO,OAAQ,cACnB,CAACP,EAAUQ,SAAU,iBACrB,CAACR,EAAUS,cAAe,qBAC1B,CAACT,EAAUU,UAAW,iBACtB,CAACV,EAAUW,SAAU,qBACrB,CAACX,EAAUY,oBAAqB,6BAG9BC,EAAqB,CACvB,CAACb,EAAUC,eAAgBF,EAAWe,MACtC,CAACd,EAAUE,SAAUH,EAAWe,MAChC,CAACd,EAAUG,WAAYJ,EAAWe,MAClC,CAACd,EAAUI,KAAML,EAAWgB,YAC5B,CAACf,EAAUK,kBAAmBN,EAAWiB,WACzC,CAAChB,EAAUM,QAASP,EAAWe,MAC/B,CAACd,EAAUO,OAAQR,EAAWkB,OAC9B,CAACjB,EAAUQ,SAAUT,EAAWmB,KAChC,CAAClB,EAAUS,cAAeV,EAAWmB,KACrC,CAAClB,EAAUU,UAAWX,EAAWgB,YACjC,CAACf,EAAUW,SAAUZ,EAAWiB,WAChC,CAAChB,EAAUY,oBAAqBb,EAAWoB,aAczCC,EAAyC,IAAsE,IAArE,KAAEhC,EAAI,MAAEiC,EAAK,KAAEjE,EAAI,WAAEkE,EAAU,QAAEC,EAAO,OAAE5E,GAAsB,EAAX6E,GAAS,YAC1G,MAAMC,EAAaJ,GAASR,EAAmBzD,GAC/C,OACI,sBACIvB,UAAWC,GAAAA,CAAW4F,EAAc,CAChC,CAACA,KAA2BJ,EAC5B,CAACI,GAAoBD,IAAe1B,EAAWe,MAC/C,CAACY,GAAyBD,IAAe1B,EAAWiB,WACpD,CAACU,GAAqBD,IAAe1B,EAAW4B,OAChD,CAACD,GAA0BD,IAAe1B,EAAW6B,YACrD,CAACF,GAAqBD,IAAe1B,EAAWkB,OAChD,CAACS,GAA0BD,IAAe1B,EAAWgB,YACrD,CAACW,GAAmBD,IAAe1B,EAAWmB,KAC9C,CAACQ,GAAqBD,IAAe1B,EAAW8B,OAChD,CAACH,GAA0BD,IAAe1B,EAAWoB,YACrD,CAACO,GAAuBD,IAAe1B,EAAW+B,SAClD,CAACJ,GAAwBD,IAAe1B,EAAWgC,YAEvD,UAASpF,GACL6E,GAAS,cAEZF,IACG,iBACIzF,UAAWC,GAAAA,CAAW4F,EAAoB,CACtC,CAACA,GAA+BD,IAAe1B,EAAWiB,eAIrEO,GAAWnC,EAAKL,EAAQ3B,SA5B/BgE,EAAsC,2CAiC5C,SAAe1B,EAAAA,EAAAA,GAAY0B,I;;;8FChHpB,IAAKY,E,yBAGX,SAHWA,GAAAA,EAAoB,kBAApBA,EAAoB,oBAG/B,CAHWA,IAAAA,EAAoB,KAKzB,MAAMC,EAA0B,CACnCC,QAASF,EAAqBG,QAC9BC,SAAUJ,EAAqBK,W;;;iJCNnC,QAA0B,gC,eCO1B,MAAMC,EAAc,KAEZ,iCACI,SAAC,IAAQ,CAAC7G,KAAM,KAChB,iBAAMI,UAAW6F,EAAe,SAAEa,EAAAA,MAClC,SAAC,IAAQ,CAAC9G,KAAM,OALtB6G,EAAW,+CAUjB,W;;;8xCCHA,MAAME,GAAmCC,EAAAA,EAAAA,mBAAkB,uCAErDC,EAAW,CACbC,WAAY,CACRC,WAAY,kCACZC,MAAO,2CAEXC,OAAQ,CACJF,WAAY,kCACZC,MAAO,4CAIT9D,EACK,CACH+D,OAAQ,wDACRH,WAAY,6DAHd5D,EAKW,CACT+D,OAAQ,8DACRH,WAAY,mEAPd5D,EASc,2DATdA,EAUU,uDAVVA,EAWK,iDAOLgE,EAAuE,IAAyB,IAAxB,UAAEC,EAAS,KAAE5D,GAAM,EAC7F,MAAM6D,GAAWC,EAAAA,EAAAA,eACXC,GAAsCxE,EAAAA,EAAAA,IAAaC,GAAUA,EAAMuE,sCAEzE,IAAIA,MAAAA,OAAmC,EAAnCA,EAAqCH,aAAcA,EACnD,OAAO,KAGX,MAoBMI,EAA+D,WAApDD,EAAoCE,YAC/CC,EAAWF,EAAWrE,EAAc+D,OAAS/D,EAAc4D,WAC3DY,EAAiBH,EAAWrE,EAAoB+D,OAAS/D,EAAoB4D,WAC7Ea,EAAWJ,EAAWV,EAASI,OAASJ,EAASC,WAEvD,OACI,UAAC,IAAK,CAACrH,QAAS6H,MAAAA,OAAmC,EAAnCA,EAAqCM,KAAMC,QA1B/C,KACZT,GAASU,EAAAA,EAAAA,GAAgBC,EAAAA,IACzBX,EACIT,EAAiC,EAAD,KACzBW,GAAmC,IACtCU,WAAW,EACXJ,MAAM,OAoB+DK,gBAAc,aACvF,SAAC,EAAAC,YAAW,WACR,SAAC,EAAAC,WAAU,CAAC,UAAQ,2CAA0C,SAAE5E,EAAKkE,QAEzE,SAAC,EAAAW,aAAY,WACT,gBAAKpI,UAAU,wBAAwB,UAAQ,0CAAyC,UACpF,wBACKqI,EAAAA,EAAAA,wBAAuB9E,EAAKmE,GAAiB,CAC1C,OACI,SAAC,IAAS,CAACY,gBAAc,EAACC,QAASrH,EAAAA,KAAMC,GAAIwG,EAASZ,WAAY1F,OAAO,SAAQ,SAC5EkC,EAAKL,KAGd,OACI,SAAC,IAAS,CAACoF,gBAAc,EAACC,QAASrH,EAAAA,KAAMC,GAAIwG,EAASX,MAAO3F,OAAO,SAAQ,SACvEkC,EAAKL,cAO9B,SAAC,EAAAsF,YAAW,WACR,SAAC,IAAM,CACHpI,KAAMC,EAAAA,WAAAA,QACN,UAAQ,6CACRN,QA1CA,KACZqH,EACIT,EAAiC,EAAD,KACzBW,GAAmC,IACtCU,WAAW,EACXJ,MAAM,OAqCe,SAEhBrE,EAAKL,WA9DpBgE,EAAoE,gIAqE1E,SAAerD,EAAAA,EAAAA,GAAYqD,I;;;imCCvG3B,MAAMuB,GAA0B7B,EAAAA,EAAAA,mBAAkB,qBAE5C1D,EACK,8BADLA,EAEO,gCAFPA,EAGM,+BAHNA,EAIO,8BAJPA,EAKK,4BAOLwF,EAA2E,IAAyB,IAAxB,UAAEvB,EAAS,KAAE5D,GAAM,EACjG,MAAM6D,GAAWC,EAAAA,EAAAA,eACXsB,GAAoB7F,EAAAA,EAAAA,IAAaC,GAAUA,EAAM4F,oBAEvD,IAAIA,MAAAA,OAAiB,EAAjBA,EAAmBxB,aAAcA,EACjC,OAAO,KAGX,MAAMyB,EAAU,IAAMxB,EAASqB,EAAwB,EAAD,KAAME,GAAiB,IAAEX,WAAW,EAAOJ,MAAM,MAGjGiB,EAAYF,EAAkBE,UAEpC,OACI,UAAC,IAAK,CAACpJ,QAASkJ,MAAAA,OAAiB,EAAjBA,EAAmBf,KAAMC,QAASe,EAASX,gBAAc,aACrE,SAAC,EAAAC,YAAW,WACR,SAAC,EAAAC,WAAU,CAAC,UAAQ,2BAA0B,SAAE5E,EAAKL,QAEzD,SAAC,EAAAkF,aAAY,WACT,iBAAKpI,UAAU,qDAAqD,UAAQ,0BAAyB,WACjG,yBACKuD,EAAKL,GACL2F,GAAc,GAAEA,SAErB,uBAAItF,EAAKL,WAGjB,UAAC,EAAAsF,YAAW,YACR,SAAC,IAAM,CACHpI,KAAMC,EAAAA,WAAAA,QACNH,MAAOC,EAAAA,YAAAA,MACP,UAAQ,6BACRJ,QAvBA,IAAMqH,EAASqB,EAAwB,EAAD,KAAME,GAAiB,IAAEX,WAAW,EAAMJ,MAAM,MAuBrE,SAEhBrE,EAAKL,MAEV,SAAC,EAAA4F,WAAU,WACP,SAAC,IAAI,CAACjJ,WAAYC,EAAAA,eAAAA,OAAuB,UAAQ,2BAA2BC,QAAS6I,EAAQ,SACxFrF,EAAKL,cAtCxBwF,EAAwE,4FA8C9E,SAAe7E,EAAAA,EAAAA,GAAY6E,I;;;wYCvE3B,QAAumE,qCAAvmE,EAA0pE,qC,eCe1pE,MAAMxF,EACK,kCADLA,EAEa,qCAFbA,EAGe,uCAHfA,EAIU,+CAJVA,EAKc,gDALdA,EAMY,sCASZ6F,EAID,IAA6G,IAA1GC,cAAc,YAAEC,EAAW,QAAEC,EAAO,kBAAEC,GAAmB,kBAAEC,EAAiB,gBAAEC,EAAe,KAAE9F,GAAM,EACzG,MAAO+F,EAAgBC,IAAqBC,EAAAA,EAAAA,WAAS,IAC9CC,EAAyBC,IAA4BF,EAAAA,EAAAA,WAAS,GAerE,OACI,+BACI,SAAC,EAAApB,aAAY,WACT,iBAAKpI,UAAW6F,EAAmB,WAC/B,SAAC,IAAQ,CAACjG,KAAM,KAChB,gBAAKI,UAAW6F,KAChB,SAAC,IAAQ,CAACjG,KAAM,KAChB,SAAC,IAAI,CAACgB,KAAM+I,EAAAA,SAAAA,WAAqBC,QAAM,WAClCrG,EAAKL,MAEV,SAAC,IAAQ,CAACtD,KAAM,KAChB,SAAC,IAAI,CAACgB,KAAM+I,EAAAA,SAAAA,MAAe,SACtBV,EAAc,GACTY,EAAAA,EAAAA,QAAOtG,EAAKL,GAAwB,CAChC,MAAO+F,IAEX1F,EAAKL,MAEf,SAAC,IAAQ,CAACtD,KAAM,IACfwJ,IAAsBD,IACnB,SAAC,EAAAW,SAAQ,UACJR,EAjCrBG,GACI,SAAC,IAAI,CAAC7I,KAAM+I,EAAAA,SAAAA,MAAgBI,WAAYC,EAAAA,eAAAA,UAA0BC,QAAM,WACnE1G,EAAKL,MAGV,SAAC,IAAe,CACZgH,eAAgBR,EAChBL,gBAAiBA,EACjBH,QAASiB,OAAOjB,GAChBkB,uBAAqB,KA2BL,SAAC,IAAM,CAAChK,KAAMC,EAAAA,WAAAA,QAAoBgK,WAAS,EAACtK,QAAS,IAAMwJ,GAAkB,GAAM,SAC9EhG,EAAKL,OAKT,SAAZgG,IACG,SAAC,IAAM,CACH9I,KAAMC,EAAAA,WAAAA,QACNR,WAAYS,EAAAA,iBAAAA,SACZ+J,WAAS,EACT9B,QAASrH,EAAAA,KACTC,GAAK,wCAAuC+H,IAC5C7H,OAAO,SAAQ,SAEdkC,EAAKL,aA5D5B6F,EAIJ,uFAiEF,SAAelF,EAAAA,EAAAA,GAAYkF,G,+JCnG3B,SAA6B,oCAA7B,GAAyE,8BAAzE,GAAoH,oCAApH,GAAiK,+BAAjK,GAA6M,oCAA7M,GAAgQ,sCCW1PuB,GAA4E,IAA0B,cAAzB,OAAEC,EAAM,SAAEC,GAAU,EACnG,MAAMC,EAAwB,QAAnB,EAAGF,EAAOG,iBAAS,OAAK,QAAL,EAAhB,EAAmB,UAAE,WAAL,EAAhB,EAAuBC,QAC/BC,EAAsB,QAAhB,EAAGL,EAAOK,cAAM,aAAb,EAAgB,GAAGC,OAClC,OACI,iBAAK7K,UAAW6F,GAAkB,UAC7B4E,GACG,SAACK,EAAA,EAAM,CAAC9K,UAAW6F,GAAckF,QAAQ,OAAOC,KAAMP,EAAOQ,IAAI,MAEjE,gBAAKjL,UAAWC,GAAAA,CAAW4F,GAAcA,IAAmB,UACxD,gBACI7F,UAAWC,GAAAA,CAAW4F,GAAe,CACjC,CAACA,IAAoB+E,IAAWM,GAAAA,GAAAA,KAChC,CAACrF,IAAsB+E,IAAWM,GAAAA,GAAAA,cAKlD,SAAC,IAAQ,CAACtL,KAAM,KAChB,yBAAM4K,QAlBZF,GAAyE,+EAuB/E,UAAezG,EAAAA,EAAAA,GAAYyG,IClC3B,GAAyF,gCCmBnFpH,GACO,iCAYPiI,GAA+D,IAO/D,IAPgE,eAClEC,EAAc,QACdC,EAAO,QACPxD,EAAO,kBACPyD,EAAiB,UACjBnE,EAAS,KACT5D,GACH,EAUG,OACI,iCACI,UAAC,EAAA2E,YAAW,YACR,SAAC,EAAAqD,UAAS,UAAEhI,EAAKL,OACjB,SAAC,IAAQ,CAACtD,KAAM,QAEpB,SAAC,EAAAwI,aAAY,UACRiD,EAAQ3H,KAAI,CAAC6G,EAAQiB,KAAU,cAC5B,MAAMC,EAAkB,QAAd,EAAGlB,EAAOkB,YAAI,OAAK,QAAL,EAAX,EAAc,UAAE,WAAL,EAAX,EAAkBC,MACzBC,EAAsB,QAAhB,EAAGpB,EAAOoB,cAAM,aAAb,EAAgB,GAC/B,OACI,UAAC,EAAAC,SAAQ,YACL,SAAC,IAAQ,CAAChM,KAAM4L,EAAQ,EAAI,EAAI,KAChC,SAAC,IAAK,CACFK,KAAK,SACLC,eAAgBvB,EAAOwB,KAAOX,EAAeW,GAC7ChM,QAAS,IAzBdwK,CAAAA,IACnBe,EAAkBf,GAClByB,IAAAA,uBAAiC,2BAA4B,CACzDC,WAAY1B,EAAO2B,YAAYC,KAC/BhF,UAAAA,EACAiF,aAAcf,EAAQgB,SAE1BxE,KAkBuCyE,CAAc/B,GAC7BgC,UAAQ,YAER,UAAC,GAAe,CAAChC,OAAQA,EAAO,UACf,QADe,EAC3BA,EAAOmB,aAAK,OAAK,QAAL,EAAZ,EAAe,UAAE,WAAL,EAAZ,EAAmBb,QACpB,SAAC,IAAQ,CAACjL,KAAM,KAChB,UAAC,IAAI,CAACmK,WAAYC,EAAAA,eAAAA,SAAwB,UACrCyB,EACAA,GAAQE,GAAU,MAClBA,IACG,gCACKa,IAAAA,OAAuBC,OAAOd,EAAOe,QAAS,CAC3CC,eAAgBC,EAAAA,KAEnBA,EAAAA,IACD,SAACC,EAAA,EAAQ,CAACC,MAAOnB,EAAOoB,uBAM5C,SAAC,IAAQ,CAACnN,KAAM,KAChB,gBAAKI,UAAW6F,OA3BL0E,EAAOwB,aA5BxCZ,GAA4D,iFAgElE,UAAetH,EAAAA,EAAAA,GAAYsH,ICjGpB,IAAK6B,IAIX,SAJWA,GAAAA,EAAY,kBAAZA,EAAY,4BAAZA,EAAY,YAIvB,CAJWA,KAAAA,GAAY,K,2BCCxB,SAAyB,+BCanB9J,GACO,iCAUP+J,GAA2C,IAAsD,YAArD,OAAE1C,EAAM,QAAExK,EAAO,WAAEmN,EAAU,UAAE/F,EAAS,KAAE5D,GAAM,EAC9F,IAAKgH,EACD,OAAO,KAYX,OACI,UAAC,EAAArC,YAAW,CAACiF,UAAQ,aACjB,SAAC,IAAQ,CAACvN,KAAM,KAChB,iBAAKI,UAAW6F,GAAe9F,QAbnB,KACXmN,IAGLlB,IAAAA,uBAAiC,gCAAiC,CAC9DC,WAAY1B,EAAO2B,YAAYC,KAC/BhF,UAAAA,IAEJpH,MAKwD,WAChD,UAAC,GAAe,CAACwK,OAAQA,EAAO,WAC5B,SAAC,IAAI,CAACX,QAAM,WAAErG,EAAKL,OACnB,SAAC,IAAQ,CAACtD,KAAM,IACH,QADQ,EACpB2K,EAAOmB,aAAK,OAAK,QAAL,EAAZ,EAAe,UAAE,WAAL,EAAZ,EAAmBb,UAEvBqC,IACG,SAAC,KAAI,CACDhL,KAAMkL,GAAAA,SAAAA,QACNC,QAASC,GAAAA,UAAAA,OACTlN,KAAMmN,GAAAA,SAAAA,MACNrN,MAAOsN,GAAAA,UAAAA,gBA5BzBP,GAAwC,6DAoC9C,UAAepJ,EAAAA,EAAAA,GAAYoJ,ICpDrB/J,GACO,+BADPA,GAEM,qCAWNuK,GAAqD,IAOrD,IAPsD,KACxDlK,EAAI,KACJmK,EAAI,eACJtC,EAAc,UACduC,EAAS,aACTvB,EAAY,UACZjF,GACH,EACG,MAAMyG,GAAiB9K,EAAAA,EAAAA,IAAaC,GAAUA,EAAM8K,iCAAiC1G,KAC/E2G,EAA0D,IAAxCF,EAAeG,cAAc1B,OAC/C2B,EAAcJ,EAAeK,aAAapC,KAChD,OACI,8BACK6B,GACG,SAAC,GAAiB,CACdnD,OAAQa,EACRrL,QAAS4N,EACTT,WAAYd,EAAe,EAC3BjF,UAAWA,KAGf,UAAC,EAAAe,YAAW,CAACiF,UAAQ,aACjB,SAAC,EAAAhF,WAAU,UAAE5E,EAAKuK,EAAkB5K,GAAkBA,OACtD,2BAAK,IAAE8K,EAAY,aAvBjCP,GAAkD,sEA8BxD,UAAe5J,EAAAA,EAAAA,GAAY4J,IChCrBS,GAAQ,IAA0F,IAAzF,QAAEzO,EAAO,QAAEoI,EAAO,UAAEV,EAAS,yBAAEgH,EAAwB,KAAE5K,EAAI,cAAE6K,EAAa,KAAEV,GAAM,EAC/F,MAAOW,EAAYC,IAAiB9E,EAAAA,EAAAA,WAAS,GACvCoE,GAAiB9K,EAAAA,EAAAA,IAAaC,GAAUA,EAAM8K,iCAAiC1G,KAC/E2G,EAA0D,IAAxCF,EAAeG,cAAc1B,OAC/CkC,EAAUX,EAAeK,cACxBO,EAAmBC,IAAwBjF,EAAAA,EAAAA,UAAS,MACrDkF,GAAsBd,EAAee,gBAAgBtC,OAErDuC,GAAiB9L,EAAAA,EAAAA,IAAaC,IAAK,aAAkC,QAAlC,EAAKA,EAAM8L,+BAAuB,aAA7B,EAA+B5C,cACvEZ,GAAUyD,EAAAA,EAAAA,UAAQ,KAAMC,EAAAA,EAAAA,GAAenB,IAAiB,CAACA,KACxDxC,EAAgBE,IAAqB9B,EAAAA,EAAAA,UACxC6B,EAAQ2D,MAAMzE,GAAWA,EAAO4B,OAASyC,KAAmBvD,EAAQ,KAEjE4D,EAAcC,IAAmB1F,EAAAA,EAAAA,UAASwD,GAAamC,UACvDnG,EAAcoG,IAAmB5F,EAAAA,EAAAA,UAAS,IAC3C6F,GAAmBC,EAAAA,EAAAA,QAAO,IAE1BC,EAAmB,KACjBN,IAAiBjC,GAAawC,MAC9BC,YAAW,IAAMJ,EAAiBK,QAAQC,SAASC,GAAWA,OAAW,KAG7E/H,GAAQ,GACRqH,EAAgBlC,GAAamC,UAG3BU,EAAmB,CAACC,EAAYC,EAAQ3G,IACtC6F,IAAiBjC,GAAamC,SAE1B,iCACI,SAAC,GAAW,CACRzB,KAAMA,EACNtC,eAAgBA,EAChBuC,UAAW,IAAMuB,EAAgBlC,GAAagD,cAC9C5D,aAAcf,EAAQgB,OACtBlF,UAAWA,KAEf,SAAC,EAAAiB,aAAY,UAAE0H,OACf,SAAC,EAAAG,WAAU,CAACxQ,UAAW+O,EAAkB,UACrC,gBAAKxO,UAAU,+BAA+B,2BAA0BwO,EAAkB,UACtF,SAAC0B,EAAA,EAAoB,CACjBC,KAAM3B,EACNnF,gBAAiBuE,EAAevE,uBAI5C,UAAC,EAAAb,YAAW,YACNkF,IACE,iCACI,SAAC,IAAM,CAAC3N,QAAS,IAAM8H,GAAQ,GAAO,UAAQ,sCAAqC,SAC9EtE,EAAK2K,GAAM3K,KAAK6M,WAErB,SAAC,EAAAtH,WAAU,QAGnB,SAAC,IAAM,CACHuH,KAAMN,EACNxO,KAAM+O,EAAAA,WAAAA,OACNlQ,KAAMC,EAAAA,WAAAA,QACN,UAAQ,gCACRkQ,SACI7B,GACAL,GACCX,GAAQa,EAAQ,4BAA8BnF,EAEnD2B,QAASsD,IAAc,SAAC,IAAO,CAAChB,QAASmD,EAAAA,aAAAA,MAAoBtQ,MAAOuQ,EAAAA,aAAAA,QACpEpG,UAAWqD,EAAK,SAEfnK,EAAKuK,EAAkBI,GAAM3K,KAAKmN,OAAOC,QAAUzC,GAAM3K,KAAKmN,OAAOE,WAE1E,SAAC,IAAQ,CAAChR,KAAM,EAAGiR,GAAI,UAKnC5B,IAAiBjC,GAAagD,cAE1B,SAAC,GAAgB,CACb5E,eAAgBA,EAChBC,QAASA,EACTxD,QAAS,IAAMqH,EAAgBlC,GAAamC,SAC5C7D,kBAAmBA,EACnBnE,UAAWA,IAInB8H,IAAiBjC,GAAawC,MAE1B,SAAC,EAAmB,CAChBxG,aAAcA,EACdI,kBAAmBA,EACnBC,gBAAiBuE,EAAevE,kBAIrC,KAGX,OACI,SAACyH,EAAA,EAAmB,CAChB3J,UAAWA,EACXkE,QAASA,EACTiD,cAAeA,EACfyC,WAAYrD,EAAO,IAAMwB,EAAgBlC,GAAawC,MAAQ3H,EAC9DmJ,UAAWxC,EACXyC,QAASxC,EACTN,yBAA0BA,EAC1BC,cAAeA,EACf8C,cAAexD,EACftC,eAAgBA,EAChBE,kBAAmBA,EACnB8D,gBAAiBA,EACjBC,iBAAkBA,EAClB7N,OAAQ,QAAC,WAAEsO,EAAU,OAAEC,EAAM,kBAAE3G,GAAmB,SAC9C,SAAC,IAAK,CACF3J,QAASA,EACToI,QAAS0H,EACT4B,iBAAkBzD,GAAQuB,IAAiBjC,GAAawC,KACxDvH,gBAAc,WAEb4H,EAAiBC,EAAYC,EAAQ3G,SAxHpD8E,GAAK,0DA+HXA,GAAM3K,KAAO,CACTmN,OAAQ,CACJC,QAAS,gCACTC,OAAQ,sCAEZR,OAAQ,iCAGZlC,GAAMkD,UAAY,CACd3R,QAAS4R,IAAAA,KACTxJ,QAASwJ,IAAAA,KACTlK,UAAWkK,IAAAA,OACXlD,yBAA0BkD,IAAAA,OAC1BjD,cAAeiD,IAAAA,MAAgB7N,OAAO8N,OAAOC,EAAAA,IAC7C7D,KAAM2D,IAAAA,KACN9N,KAAM8N,IAAAA,QAGV,UAAexN,EAAAA,EAAAA,GAAYqK,ICzJrBsD,IAAoC5K,EAAAA,EAAAA,mBAAkB,+BAStD6K,GAAsD,IAKtD,UALuD,UACzDtK,EAAS,yBACTgH,EAAwB,cACxBC,EAAa,KACbV,GAAO,GACV,EACG,MAAMtG,GAAWC,EAAAA,EAAAA,eACXqK,GAAiB5O,EAAAA,EAAAA,IAAaC,GAAUA,EAAM4O,8BAC9CC,GAAgB9O,EAAAA,EAAAA,IAAaC,GAAUA,EAAM8O,uBAC7CC,EAAYF,MAAAA,OAAa,EAAbA,EAAerQ,KAEjC,IAAIqQ,MAAAA,GAAsB,QAAT,EAAbA,EAAerD,eAAO,WAAT,EAAb,EAAwBpH,aAAcA,EACtC,OAAO,KAGX,MAAM4K,EAAa,WAAsB,IAArBC,EAAW,UAAH,8CAEV,OADd5K,EAASoK,IAAkC,IACvCQ,KACAJ,MAAAA,GAA+B,QAAlB,EAAbA,EAAeK,wBAAgB,OAA/B,OAAAL,KAIR,OAAIE,IAAcI,EAAAA,EAAAA,aACP,SAACC,EAAA,EAAgB,CAAC1S,QAASiS,EAAgB7J,QAASkK,IAE3DD,IAAcI,EAAAA,EAAAA,QAEV,SAAC,GAAK,CACFzS,QAASiS,EACT7J,QAASkK,EACT5K,UAAWA,EACXgH,yBAA0BA,EAC1BC,cAAeA,EACfV,KAAMA,IAIX,MArCL+D,GAAmD,yEAwCzD,a;;;sVC5DA,QAAwC,gDAAxC,EAAgH,gDAAhH,EAA0L,kDAA1L,EAA6P,wCAA7P,EAAmU,uDAAnU,EAA+Y,6CAA/Y,EAA+d,6DAA/d,EAAikB,+DAAjkB,EAAypB,kDAAzpB,EAAuuB,qDAAvuB,EAAyzB,uDAAzzB,EAAi5B,4DAAj5B,EAA8+B,4DAA9+B,EAAikC,+C,eCmBjkC,MAAMvO,EACS,oBAGFkP,EACT7D,IAMA,MAAM,YAAEtP,IAAgBG,EAAAA,EAAAA,KAClBiT,EAAepT,MAAAA,OAAW,EAAXA,EAAcsP,GACnC,OAAK8D,EAGE,CACHC,4BAA6BD,EAAaE,aAC1CC,2BAA4BH,EAAaE,aACzCF,aAAAA,GALO,IAWTI,EAA2D,IAA6C,IAA5C,SAAEjI,EAAQ,QAAE+D,EAAO,KAAEhL,EAAI,WAAEmP,GAAY,EACrG,MAAM,QAAEC,GAAYpE,EACdqE,GAAaC,EAAAA,EAAAA,GAAiBF,IAC9B,aAAEN,GAAiBD,EAAkB7D,IACrC,UAAEpH,GAAcoH,EAChBuE,GAAMC,EAAAA,EAAAA,iBAAgBC,IAA2B,CACnD7L,UAAAA,IAGJ,IAAKkL,EAED,OADAY,EAAAA,QAAAA,IAAU,YAAa,kDAChB,8BAAGzI,IAEd,MAAM,aACF0I,EAAY,OACZC,EAAM,cACNC,EAAa,WACbC,EAAU,gBACVC,EAAe,YACfC,EAAW,aACXC,EAAY,eACZC,GACApB,EAEJ,GAAIK,EACA,OACI,gBAAKI,IAAKA,EAAK9S,UAAU,2BAA2B0T,MAAO,CAAEL,WAAYC,GAAmBD,GAAa,UACrG,iBACIP,IAAKA,EACL9S,UAAW6F,EACX6N,MAAO,CAAEC,gBAAiBP,EAAiB,OAAMA,UAAmBQ,GAAY,WAEhF,gBAAK5T,UAAW6F,EAA6B,SAAE2E,KAC/C,SAAC,EAAAtJ,KAAI,CACDC,GAAIyR,EACJ,UAAQ,sCACR,aAAa,GAAErP,EAAKL,MAAsByP,EAAQkB,cAClDxS,OAAO,SACPtB,QAAS,IAAM+T,GAAAA,CAAgC,CAAE3M,UAAAA,IAAa,UAE9D,gBAAKnH,UAAWC,GAAAA,CAAW4F,GAAkC,UACzD,gBACI7F,UAAWC,GAAAA,CACP4F,EACAuN,EACMvN,EACAA,GACR,UAEF,gBACIoF,IAAI,eACJjL,UAAW6F,EACXkF,QAAQ,OACRgJ,IAAKb,GAAgBK,GAAeJ,eAUpE,MAAMa,EAAcC,QAAQT,GAE5B,OACI,iBAAKV,IAAKA,EAAK9S,UAAW6F,EAA6B,WACnD,gBAAK7F,UAAW6F,EAA6B,SAAE2E,KAC/C,SAAC,EAAAtJ,KAAI,CACDC,GAAIyR,EACJ,UAAQ,sCACR,aAAa,GAAErP,EAAKL,MAAsByP,EAAQkB,cAClD9T,QAAS,IAAM+T,GAAAA,CAAgC,CAAE3M,UAAAA,IACjD9F,OAAO,SAAQ,UAEf,gBAAKrB,UAAW6F,EAAgC6N,MAAO,CAAEL,WAAYI,GAAkBJ,GAAa,UAChG,iBAAKrT,UAAWC,GAAAA,CAAW4F,GAAuB,WAC9C,gBACI7F,UAAWC,GAAAA,CACP4F,EACAmO,EACMnO,EACAA,GACR,UAEF,gBACIoF,IAAI,eACJF,QAAQ,OACR/K,UAAW6F,EACXkO,IAAKR,GAAeJ,MAG3Ba,IAAe,gBAAK/I,IAAI,gBAAgBF,QAAQ,OAAOgJ,IAAK1B,EAAamB,0BA5F5Ff,EAAwD,2DAoG9D,SAAe5O,EAAAA,EAAAA,GAAY4O,G,kEC7IpB,IAAKyB,GAGX,SAHWA,GAAAA,EAAiB,yCAAjBA,EAAiB,sCAG5B,CAHWA,IAAAA,EAAiB,KAKtB,MAAMC,EAAiCC,IAK1C,MAAM,MAAEC,EAAK,SAAEC,EAAQ,cAAEC,GAAkBH,EACvCC,GAASC,GACJE,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,WAAUH,EAAU,CAAEI,UAAWH,M,+ICf1D,SAAuC,gDAAvC,GAA8G,gDAA9G,GAA6L,yDAA7L,GAA+Q,kDAA/Q,GAAkW,2DAAlW,GAAwb,qDCclbrR,GAAU,CACZ,CAACyR,GAAAA,EAAAA,OAAwB,yBACzB,CAACA,GAAAA,EAAAA,kBAAmC,sCACpC,CAACA,GAAAA,EAAAA,mBAAoC,wCAYnCC,GAA6D,IAQ7D,IAR8D,KAChErR,EAAI,UACJ4D,EAAS,WACT0N,EAAU,KACVtT,EAAI,4BACJN,EAA2B,aAC3B6T,EAAY,uBACZC,GACH,EACG,MAAM,2BAAEC,EAA0B,6BAAEC,IAAiCC,EAAAA,GAAAA,KAC/DxH,EAAOyH,GAAAA,KAAoBC,EAAAA,WAAAA,GAC3BC,GAAkBvS,EAAAA,EAAAA,IAAY,QAAC,OAAEwS,GAAQ,SAC3CA,EAAOC,SAASC,SAASC,WAAW,oCAElCC,GAAWC,EAAAA,GAAAA,KAEjB,OAAIN,EACO,MAIP,SAACO,GAAA,EAAa,CACVzO,UAAWA,EACX0N,WAAYA,EACZgB,YAAatU,EACbuT,aAAcA,EACdC,uBAAwBA,EACxBvT,OAAQ,IAAyB,IAAxB,OAAEsU,EAAM,QAAE/V,GAAS,EACxB,OACI,SAAC,KAAQ,CACL6H,MAAO8F,EACP5L,KAAM4T,EAAW3T,SAASC,KAAO,KACjCR,OAAQ,IAAM+B,EAAKL,GAAQ4S,IAC3BC,UAAQ,YAER,kBAAM/V,UAAW6F,GAA4B,WACzC,gBAAK7F,UAAWgV,EAA2B,UACvC,SAAC,KAAM,CACH,aAAYzR,EAAKL,GAAQ4S,IACzBjW,WAAYS,GAAAA,iBAAAA,SACZJ,MAAOe,EAA8Bd,GAAAA,YAAAA,MAAoBA,GAAAA,YAAAA,MACzD,UACI2V,IAAWnB,GAAAA,EAAAA,MAAwB,mCAAgCf,EAEvE7T,QAASA,EAAQ,UAEjB,gBAAKC,UAAW6F,GAAgC,UAC5C,SAAC,KAAI,CACD3D,KAAMkL,GAAAA,SAAAA,IACNvN,WAAYmW,GAAAA,eAAAA,SACZC,QAASH,IAAWnB,GAAAA,EAAAA,MACpBtH,QAASC,GAAAA,UAAAA,OACTpN,MAAOe,EAA8BuM,GAAAA,UAAAA,OAAmBA,GAAAA,UAAAA,eAMxE,gBAAKxN,UAAWiV,EAA6B,UACzC,SAAC,KAAM,CACH,aAAY1R,EAAKL,GAAQ4S,IACzB5V,MAAOC,GAAAA,YAAAA,MACP,UACI2V,IAAWnB,GAAAA,EAAAA,MAAwB,mCAAgCf,EAEvE7T,QAASA,EAAQ,UAEjB,gBAAKC,UAAW6F,GAAgC,SAC3CiP,GAAgBgB,IAAWnB,GAAAA,EAAAA,OACxB,SAAC,KAAI,CACDzS,KAAMkL,GAAAA,SAAAA,SACNhN,KAAMmN,GAAAA,SAAAA,WACNF,QAASC,GAAAA,UAAAA,OACTpN,MAAOsN,GAAAA,UAAAA,SAGX,SAAC,KAAI,CACDtL,KAAMkL,GAAAA,SAAAA,IACN6I,QAASH,IAAWnB,GAAAA,EAAAA,MACpBtH,QAASC,GAAAA,UAAAA,OACTpN,MAAOsN,GAAAA,UAAAA,uBAhFjDoH,GAA0D,2EA8FhE,UAAe/Q,EAAAA,EAAAA,GAAY+Q,I,4BC9G3B,MAAMsB,GAAW,IAAiF,IAAhF,UAAE/O,EAAS,WAAE0N,EAAU,KAAEtT,EAAI,KAAEgC,EAAI,QAAExD,EAAO,4BAAEkB,GAA6B,EACzF,MAAMyM,EAAOyH,GAAAA,KAAoBC,EAAAA,WAAAA,IAC3B,kBAAEe,EAAiB,wBAAEC,EAAuB,+BAAEC,IAAmCC,EAAAA,GAAAA,GAAY,CAC/FvB,uBAAwBhV,EACxBoH,UAAAA,EACA0N,WAAAA,EACAtT,KAAAA,EACAgV,kBAAkB,KAEhB,2BAAEvB,EAA0B,6BAAEC,IAAiCC,EAAAA,GAAAA,KACrE,IAAKmB,EACD,OAAO,KAGX,MAAMG,EAAgBvV,IAAgCyM,EAEtD,OACI,kBAAM1N,UAAWC,GAAAA,CAAW,CAAE,CAAC4F,KAA+BsQ,IAAqB,WAC/E,gBAAKnW,UAAWgV,EAA2B,UACvC,SAAC,KAAM,CACH,aAAYzR,EAAK2S,GAAS3S,KAAKkT,eAC/B5W,WAAYS,GAAAA,iBAAAA,SACZJ,MAAOsW,EAAgBrW,GAAAA,YAAAA,MAAoBA,GAAAA,YAAAA,MAC3C,WAASuW,EAAAA,GAAAA,WAAUP,GAAmB,GACtCpW,QAASqW,EAAwB,UAEjC,gBAAKpW,UAAW6F,GAAgC,UAC5C,SAAC,KAAI,CACD3D,KAAMkL,GAAAA,SAAAA,MACNC,QAAS8I,EAAoB7I,GAAAA,UAAAA,MAAkBA,GAAAA,UAAAA,OAC/CzN,WAAYsW,EAAoBH,GAAAA,eAAAA,OAAwBA,GAAAA,eAAAA,SACxD9V,MAAOsW,EAAgBhJ,GAAAA,UAAAA,OAAmBA,GAAAA,UAAAA,eAM1D,gBAAKxN,UAAWiV,EAA6B,UACzC,SAAC,KAAM,CACH,aAAY1R,EAAK2S,GAAS3S,KAAKkT,eAC/B5W,WAAYS,GAAAA,iBAAAA,SACZJ,MAAOC,GAAAA,YAAAA,MACP,WAASuW,EAAAA,GAAAA,WAAUP,GAAmB,GAAM,GAC5CpW,QAASqW,EAAwB,UAEjC,gBAAKpW,UAAW6F,GAAgC,UAC5C,SAAC,KAAI,CACD3D,KAAMkL,GAAAA,SAAAA,MACNC,QAAS8I,EAAoB7I,GAAAA,UAAAA,MAAkBA,GAAAA,UAAAA,OAC/CzN,WAAYsW,EAAoBH,GAAAA,eAAAA,OAAwBA,GAAAA,eAAAA,SACxD9V,MAAOsN,GAAAA,UAAAA,kBAlD7B0I,GAAQ,6DA0DdA,GAAS3S,KAAO,CACZkT,cAAe,yBAGnBP,GAAS9E,UAAY,CACjBjK,UAAWkK,IAAAA,OACXwD,WAAYxD,IAAAA,OACZ9P,KAAM8P,IAAAA,OACNtR,QAASsR,IAAAA,KACT9N,KAAM8N,IAAAA,OACNpQ,4BAA6BoQ,IAAAA,MAGjC,UAAexN,EAAAA,EAAAA,GAAYqS,IC/DrBS,GAA6C,IAM7C,IAN8C,UAChDxP,EAAS,WACT0N,EAAU,KACVtT,EAAI,sBACJqV,EAAqB,4BACrB3V,GACH,EACG,MAAM+B,GAAWF,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WACxCqS,GAAkBvS,EAAAA,EAAAA,IAAY,QAAC,OAAEwS,GAAQ,SAC3CA,EAAOC,SAASC,SAASC,WAAW,qCAElC,2BAAET,EAA0B,6BAAEC,IAAiCC,EAAAA,GAAAA,KACrE,OAAIlS,IAAa6T,EAAAA,EAAAA,UACN,MAIP,iCACI,iBACI7W,UAAWC,GAAAA,CAAW,CAClB,CAAC+U,GAA6B/T,EAC9B,CAAC4E,IAAsC5E,EACvC,CAAC4E,KAA+B5E,IACjC,WAEH,SAAC,GAAe,CACZkG,UAAWA,EACX0N,WAAYA,EACZtT,KAAMA,EACNN,4BAA6BA,KAEjC,SAAC,GAAQ,CACLlB,QAAS6W,EACTzP,UAAWA,EACX0N,WAAYA,EACZtT,KAAMA,EACNN,4BAA6BA,OAIpCA,IACG,iBAAKjB,UAAWC,GAAAA,CAAWgV,EAA8BpP,IAAqC,WAC1F,SAAC,GAAe,CACZsB,UAAWA,EACX0N,WAAYA,EACZtT,KAAMA,EACNN,4BAA6BA,EAC7B6T,cAAY,IAEfO,IACG,SAAC,GAAQ,CACLtV,QAAS6W,EACTzP,UAAWA,EACX0N,WAAYA,EACZtT,KAAMA,EACNN,4BAA6BA,WAvDnD0V,GAA0C,2DAgEhD,UAAe9S,EAAAA,EAAAA,GAAY8S,I,yKCrF3B,SAA0L,kDAA1L,GAAqQ,iDAArQ,GAAwV,2DAAxV,GAAmb,yDAAnb,GAAigB,6CAAjgB,GAAglB,2DC4B1kBG,GAAiB,IAUjB,IAVkB,UACpB3P,EAAS,WACT0N,EAAU,uBACVkC,EAAsB,KACtBxT,EAAI,cACJ6K,EAAa,SACbkG,EAAQ,wBACR0C,EAAuB,MACvB3C,EAAK,4BACLpT,GACH,EACG,MAAMyM,EAAOyH,GAAAA,KAAoBC,EAAAA,WAAAA,GAC3B6B,GAAanU,EAAAA,EAAAA,IAAaC,GAAUA,EAAMmU,yBAAwB/P,GAClEnE,GAAWF,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WACxC4K,GAAiB9K,EAAAA,EAAAA,IAAaC,GAAUA,EAAM8K,iCAAiC1G,KAC/EC,GAAWC,EAAAA,GAAAA,eACX8P,GAAqBC,EAAAA,GAAAA,MACrB,2BAAEpC,EAA0B,6BAAEC,IAAiCC,EAAAA,GAAAA,KAErE,GAAIlS,IAAa6T,EAAAA,EAAAA,SACb,OAAO,KAGX,MAAMQ,EAAcJ,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,UACnCC,EAAYP,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,QACjCE,EAAcR,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,SACnCG,EAAqBD,GAAeD,GAAaH,EAEjDM,EAAiB,CAACC,EAAM9B,KAC1B,IAAI+B,EAAWJ,EAAcK,GAAAA,SAAAA,QAAmBA,GAAAA,SAAAA,QAIhD,OAHI7W,IACA4W,EAAWC,GAAAA,SAAAA,WAGX,SAAC,KAAS,CACNvP,QAASrH,EAAAA,KACTC,GAAK,oCAAmCgG,IACxC9F,OAAO,SACPjB,KAAMyX,EACN,UAAU,yBAAwB/B,IAAS,UAE3C,iBAAK9V,UAAW6F,GAA+B,UAC1C5E,GAA0C,cAAX6U,IAC5B,iCACI,SAAC,KAAI,CACD5T,KAAMkL,GAAAA,SAAAA,UACNC,QAASC,GAAAA,UAAAA,QACTlN,KAAMmN,GAAAA,SAAAA,OACN1N,WAAYmW,GAAAA,eAAAA,SACZ9V,MAAOsN,GAAAA,UAAAA,MACPuK,UAAQ,KAEZ,SAAC,KAAQ,CAACnY,KAAM,QAGxB,iBAAMI,UAAW6F,GAA0B,SAAE+R,UAM7D,IAAII,EAEAX,EACAW,EAAgBL,EAAepU,EAAKuT,GAAevT,KAAK0U,WAAY,aAC7DT,EACPQ,EAAgBL,EAAepU,EAAKuT,GAAevT,KAAK2U,SAAU,WAC3DT,IACPO,EAAgBL,EAAepU,EAAKuT,GAAevT,KAAK4U,SAAU,YAGtE,IAAIC,EAAQjB,EACL,0CAAyChQ,IACzC,yCAAwCA,IAC3C4P,IACAqB,GAAQ3D,EAAAA,EAAAA,WAAUsC,EAAwB,CAAEsB,cAAe,gCAG/D,MAAMC,EAAoBjE,GAASC,GAAWG,EAAAA,EAAAA,WAAUH,EAAU,CAAEI,UAAW,oBAAuB,KAEtG,OAAIzT,GAA+ByW,GAE3B,iBACI1X,UAAWC,GAAAA,CAAW4F,GAA+B,CACjD,CAACA,IAAyCwR,EAC1C,CAACxR,IAAuC2R,EACxC,CAAC3R,IAAyC4R,IAC3C,UAEFO,GACD,SAAC,KAAS,CACNzP,QAASrH,EAAAA,KACTC,GAAK,oCAAmCgG,IACxC9F,OAAO,SACPjB,KAAM0X,GAAAA,SAAAA,SAAkB,SAEvBpK,EAAOnK,EAAKuT,GAAevT,KAAKgV,MAAQhV,EAAKuT,GAAevT,KAAKiV,cAO9E,gCACKd,GAAsBM,GACrBN,IACE,SAACe,GAAA,EAAmB,CAChBtR,UAAWA,EACX0N,WAAYA,EACZ6D,yBAAuB,EACvB3B,uBAAwBA,EACxB3I,cAAeA,EACfkK,kBAAmBA,EACnBtB,wBAAyBA,EACzB2B,mBAAoB,KAChBvR,GAASwR,EAAAA,GAAAA,IAAmC,KAEhDpX,OAASzB,IACL,iCACI,gBAAKC,UAAWgV,EAA2B,UACvC,SAAC,KAAM,CACHzM,QAASrH,EAAAA,KACTC,GAAIiX,EACJ/W,OAAQ0V,EAAyB,SAAW,KAC5ChX,QAASA,EACTK,KAAMa,EAA8BZ,GAAAA,WAAAA,QAAqBA,GAAAA,WAAAA,QACzDH,MAAOe,EAA8Bd,GAAAA,YAAAA,MAAoBA,GAAAA,YAAAA,MACzD4K,SACI6C,MAAAA,OAAc,EAAdA,EAAgBiL,cACZ,SAAC,KAAO,CAACxL,QAASmD,GAAAA,aAAAA,MAAoBtQ,MAAOuQ,GAAAA,aAAAA,QAGrDF,WAAY3C,MAAAA,IAAAA,EAAgBiL,YAC5B,UAAQ,iCAAgC,SAEvCtV,EAAKuT,GAAevT,KAAKuV,eAGlC,gBAAK9Y,UAAWiV,EAA6B,UACzC,SAAC,KAAM,CACH1M,QAASrH,EAAAA,KACTC,GAAIiX,EACJ/W,OAAQ0V,EAAyB,SAAW,KAC5ChX,QAASA,EACTK,KAAMa,EAA8BZ,GAAAA,WAAAA,QAAqBA,GAAAA,WAAAA,QACzDH,MAAOC,GAAAA,YAAAA,MACP4K,SACI6C,MAAAA,OAAc,EAAdA,EAAgBiL,cACZ,SAAC,KAAO,CAACxL,QAASmD,GAAAA,aAAAA,MAAoBtQ,MAAOuQ,GAAAA,aAAAA,QAGrDF,WAAY3C,MAAAA,IAAAA,EAAgBiL,YAC5B,UAAQ,mCAAkC,SAEzCtV,EAAKuT,GAAevT,KAAKuV,iBAK1CC,MAAM,yBAGd,SAACrQ,GAAA,EAAsB,CAACvB,UAAWA,KACnC,SAACD,GAAA,EAAwC,CAACC,UAAWA,KACrD,SAACsK,GAAA,EAAoB,CAACtK,UAAWA,EAAWiH,cAAeA,EAAeV,KAAMA,QApKtFoJ,GAAc,yEAyKpBA,GAAevT,KAAO,CAClBuV,SAAU,8BACVb,UAAW,gDACXC,QAAS,8CACTC,QAAS,+CACTI,KAAM,4BACNC,OAAQ,+BAGZ1B,GAAe1F,UAAY,CACvBjK,UAAWkK,IAAAA,OACXwD,WAAYxD,IAAAA,OACZ0F,uBAAwB1F,IAAAA,OACxB9N,KAAM8N,IAAAA,OACNjD,cAAeiD,IAAAA,MAAgB7N,OAAO8N,OAAOC,GAAAA,IAC7C+C,SAAUjD,IAAAA,OACV2F,wBAAyB3F,IAAAA,OACzBgD,MAAOhD,IAAAA,KACPpQ,4BAA6BoQ,IAAAA,MAGjC,UAAexN,EAAAA,EAAAA,GAAYiT,I,uKCnM3B,MAAMkC,GAAgE,IAShE,UATiE,YACnEC,EAAW,UACX9R,EAAS,QACT+R,EAAO,oBACPC,EAAmB,eACnBC,EAAc,WACdvE,EAAU,QACVhN,EAAO,qBACPwR,GACH,EACG,MAAMC,GAAaC,EAAAA,GAAAA,MAEbC,EAAe,KACjBxN,IAAAA,YAAsB,sBAAuB,CACzCyN,KAAM,OACNC,WAAYvS,IAEhB6E,IAAAA,UAAoB,YAAa,qBAC7BsN,GACAtN,IAAAA,eAAyB,YAI3B2N,EAAe,KACjB3N,IAAAA,YAAsB,uBAAwB,CAC1CyN,KAAM,OACNC,WAAYvS,KAIdyS,EAAiB,KACnBC,IAAAA,CAAsB,CAAEC,gBAAiB,6BAA8B3S,UAAAA,MAGrE,IAAE4S,EAAG,MAAEC,GAAUf,GAAe,GAChCgB,EAAShB,MAAAA,GAAmB,QAAR,EAAXA,EAAagB,cAAM,WAAR,EAAX,EAAqBA,OAEpC,OACI,gBACIja,UAAWC,GAAAA,CAAW,mBAAoB,0BAA2B,CACjE,2BAA4BkZ,IAC7B,SAEFA,GACG,SAAC,KAAoB,CACjBF,YAAaA,EACb9R,UAAWA,EACX+R,QAASA,MAAAA,OAAO,EAAPA,EAASgB,YAClBC,aAAcX,EACdY,aAAcT,EACdU,eAAgBT,EAChB/R,QAASA,EACTuR,eAAgBA,EAChBvE,WAAYA,EACZwE,qBAAsBA,KAG1B,iCACI,SAAC,KAAI,CAAC,UAAQ,qCAAoC,SAAEU,IACnDE,MAAAA,OAAM,EAANA,EAAQvW,KAAI,CAAC4W,EAAO9O,KACjB,MAAM,QAAE+O,EAAO,KAAEC,EAAI,OAAEC,EAAM,QAAEC,GAAYJ,EAC3C,OACI,4BACI,iBACIta,UAAU,yDACV,UAAQ,uCAAsC,WAE9C,kBAAMA,UAAU,+BAA8B,UAAC,IACzCua,EAAQ,IAAOC,EAAK,IAAOC,MAEjC,eACIE,KAAO,QAAOJ,IAAUC,IAAOC,IAC/Bza,UAAU,+BACV,UAAQ,4CACRD,QAASyZ,EAAa,UACzB,IACKe,EAAQ,IAAOC,EAAK,IAAOC,SAGrC,yBAAMC,MAjBAlP,OAqBlB,0BACI,cACImP,KAAO,UAASX,MAAAA,EAAAA,EAAS,KACzB,UAAQ,uCACRja,QAAS4Z,EAAa,SAErBK,MAGRd,IACG,gBAAKlZ,UAAU,4BAA4B,UAAQ,yCAAwC,UACvF,cAAG2a,KAAO,GAAEC,EAAAA,EAAAA,+BAAqCzT,IAAapH,QAAS6Z,EAAe,SACjFV,EAAQgB,sBA/FnClB,GAA6D,8EAyGnE,YC9FM9V,GACQ,0BADRA,GAEY,+BAEZ2X,GAAmE,IASnE,IAToE,YACtEC,EAAW,UACX3T,EAAS,QACT+R,EAAO,WACPrE,EAAU,qBACVwE,EAAoB,QACpBtZ,EAAO,4BACPkB,EAA2B,KAC3BsC,GACH,EACG,MAAOwX,EAAeC,IAAoBxR,EAAAA,EAAAA,aACnCyR,EAAiBC,IAAsB1R,EAAAA,EAAAA,WAAS,IAChD4P,EAAgB+B,IAAqB3R,EAAAA,EAAAA,UAA8C,OACnF4R,EAAcC,IAAmB7R,EAAAA,EAAAA,WAAS,GAC3C8R,GAAgBxY,EAAAA,EAAAA,IAAaC,GAAUA,EAAMuY,gBAC7CtY,GAAWF,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WACxCuY,GAAYzY,EAAAA,EAAAA,IAAaC,GAAUA,EAAMmU,yBAAwB/P,IACjE,2BAAE6N,EAA0B,6BAAEC,IAAiCC,EAAAA,GAAAA,KAE/D9N,GAAWC,EAAAA,GAAAA,eAEXmU,EAAcxY,IAAa6T,EAAAA,EAAAA,UA6B3B4E,GAAsBC,EAAAA,GAAAA,GAAuBvU,GAE7CwU,EAAc,KAChB5b,MAAAA,GAAAA,IACAiM,IAAAA,UAAoBhJ,EAAU,wBAAyB,QACnDwY,GACAN,GAAmB,GACdO,KAlCSG,WAAY,MAC9B,GAAIb,EAEA,YADAG,GAAoBD,GAIxB,IAAIY,EADJR,GAAgB,GAIhB,IACIQ,QAAqBC,GAAAA,QAAAA,IAAW,YAAW3U,aAAsB,CAC7DiN,OAAQ,CACJS,WAAAA,KAGV,MAAOkH,GAGL,OAFA3U,GAASU,EAAAA,GAAAA,GAAgBkU,GAAAA,SACzBX,GAAgB,GAGpB,MAAMjC,QAAuB6C,EAAAA,GAAAA,GAAkB9U,GAC/CgU,EAAkB/B,GAClB4B,EAA6B,QAAb,EAACa,SAAY,aAAZ,EAAc5Y,MAC/BiY,GAAmB,GACnBG,GAAgB,IAYPa,IAIPC,GAAgB7M,EAAAA,EAAAA,SAAO,IAE7B8M,EAAAA,EAAAA,YAAU,KACFd,IACAa,EAAczM,SAAU,KAE7B,CAAC4L,KAEJc,EAAAA,EAAAA,YAAU,KACFD,EAAczM,QACdyM,EAAczM,SAAU,GAEnBuM,EAAAA,GAAAA,GAAkB9U,GAAWkV,MAAMC,GAAanB,EAAkBmB,OAE5E,CAACnV,EAAWoU,IAEf,MAAMgB,IAAmBxB,MAAAA,GAAAA,EAAe5B,qBAqBlClC,GAAanU,EAAAA,EAAAA,IAAaC,GAAUA,EAAMmU,yBAAwB/P,GAClEkQ,EAAcJ,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,UACnCC,EAAYP,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,QACjCE,EAAcR,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,SAIzC,OAAKuD,GAF8B7Z,IADRwW,GAAeD,GAAaH,GAI5C,MAIP,SAAC,KAAI,CACDzP,KAAMqT,EACNsB,gBAAiBA,EACjB1U,QAAS,IAAMqT,GAAmB,GAClC1Z,OAnCkB,IAClBga,GACO,SAACgB,GAAA,EAAkB,CAACrV,UAAWA,KAItC,SAAC,GAAyB,CACtB0N,WAAYA,EACZwE,qBAAsBA,EACtBlS,UAAWA,EACXgS,oBAAqB4B,MAAAA,OAAa,EAAbA,EAAe5B,oBACpCF,YAAa8B,EACb7B,QAASA,EACTrR,QAAS0U,OAAkB3I,EAAY,IAAMsH,GAAmB,GAChE9B,eAAgBA,IAsBpB1X,UAAW+a,GAAAA,cAAAA,YAA0B,UAErC,4BACI,gBAAKzc,UAAWgV,EAA2B,UACvC,SAAC,KAAM,CACH5U,KAAMa,EAA8BZ,GAAAA,WAAAA,UAAuBA,GAAAA,WAAAA,QAC3DR,WAAYS,GAAAA,iBAAAA,SACZJ,MAAOe,EAA8Bd,GAAAA,YAAAA,MAAoBA,GAAAA,YAAAA,MACzD,UAAQ,iCACRJ,QAAS4b,EACT5Q,QAASqQ,IAAgB,SAAC,KAAO,CAAC/N,QAASmD,GAAAA,aAAAA,MAAoBtQ,MAAOuQ,GAAAA,aAAAA,QACtEiM,aAAW,YAEX,0BAAOnZ,EAAKL,WAGpB,gBAAKlD,UAAWiV,EAA6B,UACzC,SAAC,KAAM,CACH7U,KAAMa,EAA8BZ,GAAAA,WAAAA,UAAuBA,GAAAA,WAAAA,QAC3DR,WAAYS,GAAAA,iBAAAA,SACZJ,MAAOC,GAAAA,YAAAA,MACP,UAAQ,oCACRJ,QAAS4b,EACT5Q,QAASqQ,IAAgB,SAAC,KAAO,CAAC/N,QAASmD,GAAAA,aAAAA,MAAoBtQ,MAAOuQ,GAAAA,aAAAA,QACtEiM,aAAW,YAEX,0BAAOnZ,EAAKL,gBA/I9B2X,GAAgE,iFAuJtE,UAAehX,EAAAA,EAAAA,GAAYgX,IC1KrB8B,GAC0B,gCAmB1BC,GAAkD,IAclD,UAdmD,UACrDzV,EAAS,cACTiH,EAAa,UACbyO,EAAS,YACT/B,EAAW,qBACXzB,EAAoB,uBACpBtC,EAAsB,YACtBlB,EAAW,SACXvB,EAAQ,wBACR0C,EAAuB,QACvBkC,EAAO,MACP7E,EAAK,WACLyI,EAAU,4BACV7b,GACH,EACG,MAAMyM,EAAOyH,GAAAA,KAAoBC,EAAAA,WAAAA,GAC3B2H,GAA6Bja,EAAAA,EAAAA,IAAY,QAAC,SAAEka,GAAU,SAAKA,EAASL,OAIpEM,GAAiBna,EAAAA,EAAAA,IAAY,QAAC,OAAEwS,GAAQ,SAAKA,EAAOC,SAASC,WAAaoF,EAAAA,EAAAA,oBAC1E5X,GAAWF,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WACxCka,GAASpa,EAAAA,EAAAA,IAAY,QAAC,OAAEoa,GAAQ,SAAKA,KACrCC,EAAmCJ,MAAAA,GAAsC,QAAZ,EAA1BA,EAA4BK,MAAM,YAAI,WAAZ,EAA1B,EAAwC9F,SAAS4F,GACpFG,EAAkBra,IAAa6T,EAAAA,EAAAA,WAAsBnJ,EAErD4P,GAA4BC,EAAAA,EAAAA,cAC9B,IAAMpJ,EAA8B,CAAEG,SAAAA,EAAUD,MAAAA,EAAOE,cAAeL,EAAkBsJ,kBACxF,CAAClJ,EAAUD,IAETuC,GAAwB2G,EAAAA,EAAAA,cACzBE,IACOA,GACAtJ,EAA8B,CAAEG,SAAAA,EAAUD,MAAAA,EAAOE,cAAeL,EAAkBwJ,mBAG1F,CAACpJ,EAAUD,IAGT4C,GAAanU,EAAAA,EAAAA,IAAaC,GAAUA,EAAMmU,yBAAwB/P,GAClEkQ,EAAcJ,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,UACnCC,EAAYP,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,QACjCE,EAAcR,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,SAEnCoG,EAA6B1c,IADRwW,GAAeD,GAAaH,GAGvD,OAAI8F,EACO,MAIP,gCACKlc,IAA+B,SAAC,IAAQ,CAACrB,KAAM,EAAGiR,GAAI,KACvD,iBACI7Q,UAAWC,GAAAA,CAAW,qBAAsB,CACxC,4BAA6Bgd,IAC9B,WAEDH,IACE,SAAC,GAA+B,CAC5B3V,UAAWA,EACXiH,cAAeA,EACfyG,WAAYgI,EACZ9F,uBAAwBA,EACxBzC,SAAUA,EACVD,MAAOA,EACP3G,KAAMA,EACNsJ,wBAAyBA,EACzB/V,4BAA6BA,IAGpC+B,IAAa6T,EAAAA,EAAAA,WAAsB8G,IAChC,iBACI3d,UACIiB,EACM4E,GACAA,MAIlB,SAAC,GAAc,CACXiV,YAAaA,IAAgBuC,EAC7BlW,UAAWA,EACX+R,QAASA,EACTrE,WAAYgI,EACZxD,qBAAsBA,EACtBtZ,QAASud,EACTrc,4BAA6BA,KAE/B0c,IACE,SAAC,GAAwB,CACrBxW,UAAWA,EACX0N,WAAYgI,EACZtb,KAAMsU,EACNe,sBAAuBA,EACvB3V,4BAA6BA,WA/F/C2b,GAA+C,iFAuGrD,YC9HMgB,GAAsD,IAKtD,IALuD,SACzDpT,EAAQ,QACR+D,EAAO,cACPH,EAAa,wBACb4I,GACH,EACG,MAAM,2BAAE1E,EAA0B,2BAAEE,GAA+BJ,EAAkB7D,GAErF,GAAI+D,EACA,OAAO,SAAC,EAAc,CAAC/D,QAASA,EAAQ,SAAE/D,IAG9C,MACI,SAAU6J,EACV,eAAgByG,EAAW,QAC3B5B,EAAO,SACP2E,EAAQ,qBACRxE,EAAoB,SACpB/E,EAAQ,QACR3B,EACAmL,qBAAsB/G,EAAsB,KAC5CxV,EAAI,UACJ4F,GACAoH,EAEJ,OAAIiE,GAEI,iBAAKxS,UAAW6F,EAA4B,WACxC,yBAAM2E,KACN,SAAC,GAAkB,CACfrD,UAAWA,EACXiH,cAAeA,EACfyO,UAAWlK,EAAQ5G,GACnB+O,YAAaA,EACbzB,qBAAsBA,EACtBtC,uBAAwBA,EACxBlB,YAAatU,EACb+S,SAAUA,EACV0C,wBAAyBA,EACzBkC,QAASA,EACT7E,MAAOA,EACPyI,WAAY7I,QAAQ4J,SAK7B,8BAAGrT,KA9CRoT,GAAmD,kFAiDzD,Y,4BCxDA,MA+BA,GA/BiE,CAACrP,EAASgH,EAAUwI,KACjF,MAAMC,GAAc1O,EAAAA,EAAAA,QAA4B,OAC1C,kBAAE2O,EAAiB,QAAEC,GAAY3P,EAUvC,OARA4P,EAAAA,EAAAA,kBACI,IAAM,KAAM,MACW,QAAnB,EAAAH,EAAYtO,eAAO,OAAnB,OAAAsO,GACAA,EAAYtO,QAAU,OAE1B,KAGG6N,EAAAA,EAAAA,cACFa,IAAqC,MAC7BA,GAAYH,IAIE,QAAnB,EAAAD,EAAYtO,eAAO,OAAnB,OAAAsO,GAEAA,EAAYtO,SAAU2O,EAAAA,GAAAA,IAA0B,CAC5CD,QAAAA,EACAF,QAAAA,EACA3I,SAAAA,EACAwI,UAAAA,OAGR,CAACxI,EAAUwI,EAAWG,EAASD,K,omBCpBvC,MAAM/a,GACW,4BAGV,IAAKob,IAGX,SAHWA,GAAAA,EAAW,oBAAXA,EAAW,gBAGtB,CAHWA,KAAAA,GAAW,KAKvB,MAAMC,GAA6E,IAG/C,UAHgD,UAChFpX,EAAS,KACT5D,GAC2B,EAC3B,MACIib,aAAcC,EAAW,EAAC,kBAC1BC,EAAiB,iBACjBC,IACA7b,EAAAA,EAAAA,IACCC,GAQKA,EAAM6b,cAAgB,KAG1BC,GAAUH,MAAAA,GAA8B,QAAb,EAAjBA,EAAoBvX,UAAU,WAAb,EAAjB,EAAgC2X,mBAAoB,EAE9DC,EAAgB,CAClBC,uBAAwBH,EACxB1X,UAAAA,EACAsX,SAAAA,EACAQ,WAAYN,EAAmBL,GAAY9X,SAAW8X,GAAYY,QAGtE,OAAKL,GAKD,SAAC,EAAAM,mBAAkB,OAACC,GAAIC,MAA4CN,GAAa,cAC7E,iBAAK/e,UAAU,4BAA2B,WACtC,kBAAMA,UAAU,yBAAwB,UAAE6e,EAAQ,QAClD,iBAAM7e,UAAU,uBAAsB,SAAEuD,EAAKL,OAC7C,SAAC,KAAI,CACDhB,KAAMkL,GAAAA,SAAAA,MACNhN,KAAMmN,GAAAA,SAAAA,GACNrN,MAAOsN,GAAAA,UAAAA,MACPH,QAASC,GAAAA,UAAAA,QACTzN,WAAYmW,GAAAA,eAAAA,eAbjB,MA9BTuI,GAA0E,+EAkDhF,UAAe1a,EAAAA,EAAAA,GAAY0a,I,4BCrE3B,MAEMrb,GACO,uBAGPoc,GAAgE,IAA6B,IAA5B,KAAE/b,EAAI,cAAEgc,GAAe,EAC1F,OACI,UAAC,KAAS,CAAChX,QAASrH,EAAAA,KAAMC,GARtB,0GAQ+Bf,KAAM0X,GAAAA,SAAAA,UAAoBxP,gBAAc,YACtEiX,GAAkB,GAAE3S,GAAAA,MAAsBA,GAAAA,KAC1CrJ,EAAKL,QAJZoc,GAA6D,mEASnE,UAAezb,EAAAA,EAAAA,GAAYyb,I,ICbtBE,G,aAAY,SAAZA,GAAAA,EAAY,sCAAZA,EAAY,iBAAZA,KAAAA,GAAY,KAKjB,MAgBMtc,GACS,oBAGTuc,GAAuC,IAOvC,YAPwC,KAC1Clc,EAAI,QACJoP,EAAO,2BACP+M,EAA0B,MAC1BC,EAAK,4BACL1e,EAA2B,uBAC3B2e,GACH,EACG,MAAMC,GAAqB/c,EAAAA,EAAAA,IAAaC,GAAUA,EAAM8c,qBAClDjN,GAAaC,EAAAA,EAAAA,GAAiBF,GAEpC,KADwBA,EAAQmN,QAAUnN,EAAQmN,MAAM,kBAAoBJ,IAExE,OAAO,KAGX,MAAMK,EAA4B,QAAhB,EAAGpN,EAAQmN,aAAK,OAAM,QAAN,EAAb,EAAeE,YAAI,WAAN,EAAb,EAAqBC,QAAkB,CAACH,EAAOE,KAChE,MAAMze,EAAOye,EAAK,SApCHE,IAAAA,EAwCf,OAxCeA,EAqCG3e,EApCtBiC,OAAO8N,OAAekO,IAAclI,SAAS4I,KAqCrCJ,EAAMve,GAAQye,EAAK,SAEhBF,IACR,IAEGK,GAAiBJ,MAAAA,OAAY,EAAZA,EAAcK,qBAAqBL,MAAAA,OAAY,EAAZA,EAAcM,QACxE,IAAKF,EACD,OAAO,KAGX,MAAMG,GACF,SAACxV,GAAA,EAAM,CACHC,QAAQ,OACRC,KAAMmV,EACNlV,IAAK0H,EAAQkB,YACb7T,UACI6f,GAAsB5e,EAChB,2CACA,2BAKlB,OACI,gBAAKjB,UAAW2f,EAAQ,oCAAsC,kCAAkC,UAC5F,gBAAK3f,UAAU,+BAA8B,SACxC4f,GACG,iBAAM,UAAQ,sCAAqC,SAAEU,KAErD,SAAC,EAAApf,KAAI,CACDC,GAAIyR,EACJ,UAAQ,sCACR,aAAa,GAAErP,EAAKL,OAAsByP,EAAQkB,cAAc,SAE/DyM,SApDnBb,GAAoC,qDA4D1C,UAAe5b,EAAAA,EAAAA,GAAY4b,ICrFdc,GAAkB,SCHzBC,GAAuB,KACzB,MAAM,2BAAExL,EAA0B,6BAAEC,IAAiCC,EAAAA,GAAAA,KACrE,OACI,iCACI,iBAAMlV,UAAWiV,EAA6B,UAC1C,SAAC,KAAQ,CAACrV,KAAM,OAEpB,iBAAMI,UAAWgV,EAA2B,UACxC,SAAC,KAAQ,CAACpV,KAAM,UAR1B4gB,GAAoB,qFAc1B,Y,wECTA,MAAM7D,GAC0B,gCAU1B8D,GAAoC,IAKpC,UALqC,QACvC9N,EAAO,4BACP1R,EAA2B,YAC3Byf,EAAW,uBACXd,GACH,EACG,MAAM1C,GAASpa,EAAAA,EAAAA,IAAY,QAAC,OAAEoa,GAAQ,SAAKA,KACrCH,GAA6Bja,EAAAA,EAAAA,IAC/B,QAAC,SAAEka,GAAU,SAAKA,EAASL,OAEzB/J,GAAaC,EAAAA,EAAAA,GAAiBF,EAAS+N,GACvCvD,EAAmCJ,MAAAA,GAAsC,QAAZ,EAA1BA,EAA4BK,MAAM,YAAI,WAAZ,EAA1B,EAAwC9F,SAAS4F,GAE1F,OAAIvK,EAAQ5G,GACJoR,GAEI,iCACI,SAACwD,GAAA,EAAgB,CAACC,mBAAoBjO,EAAQkO,6BAC7ClO,EAAQkB,eAKd+L,GACH,UAAC,KAAI,CAAC,UAAQ,iCAAiCrX,QAAQ,OAAM,WACzD,SAACoY,GAAA,EAAgB,CAACC,mBAAoBjO,EAAQkO,6BAC7ClO,EAAQkB,gBAGb,UAAC,KAAS,CACNtL,QAASrH,EAAAA,KACTC,GAAIyR,EACJxS,KAAMa,EAA8B6W,GAAAA,SAAAA,UAAqBA,GAAAA,SAAAA,SACzD,UAAQ,iCAAgC,WAExC,SAAC6I,GAAA,EAAgB,CAACC,mBAAoBjO,EAAQkO,6BAC7ClO,EAAQkB,gBAId,8BAAGlB,EAAQkB,eAxChB4M,GAAiC,mEA2CvC,Y,gBCnDA,MAAMK,GAAqB,IAAgE,IAA/D,QAAExd,EAAO,iBAAEvC,EAAgB,4BAAEE,GAA6B,EAClF,IAAKqC,EACD,OAAO,KAEX,MAAMK,EAA+B,WAAjBL,EAAQ/B,KAAoB,UAAY,WAC5D,OACI,SAACuC,GAAA,EAAW,CACRR,QAAS,CACL,CAACK,GAAc,CACX,OAAQL,EAAQ,QAChB,QAASA,EAAQ,WAGzBxC,OAAO,gCACPiD,iBAAkBhD,EAClBE,4BAA6BA,KAfnC6f,GAAkB,2DAoBxB,Y,gBCdA,MAAM5d,GACS,gCAGT6d,GAA2D,IAA6B,cAA5B,KAAEtV,EAAI,QAAEyN,EAAO,KAAE3V,GAAM,EACrF,MAAMyd,EAAgG,QAAvF,EAAG9H,MAAAA,GAAsB,QAAf,EAAPA,EAAS+H,qBAAa,OAAO,QAAP,EAAtB,EAAwBC,aAAK,WAAtB,EAAP,EAA+B1e,QAAQ0e,GAAUA,EAAM,cAAezV,MAAAA,OAAI,EAAJA,EAAO,iBAAO,QAAI,IACpG,2BAAEuJ,EAA0B,6BAAEC,EAA4B,kCAAEkM,IAC9DjM,EAAAA,GAAAA,KAEJ,OACI,iCACI,kBAAMlV,UAAWiV,EAA6B,UACzChB,QAAQxI,MAAAA,OAAI,EAAJA,EAAMI,QACX,iBAAM7L,UAAWmhB,EAAkC,UAC/C,SAAC,KAAI,CACD5Y,QAAQ,OACR3H,KAAM+I,GAAAA,SAAAA,OACNI,WAAYC,GAAAA,eAAAA,SACZ,UAAQ,gCAA+B,SAEtCyB,MAAAA,OAAI,EAAJA,EAAMI,SAIlBmV,EAAU3U,OAAS,IAChB,kBAAMrM,UAAWmhB,EAAkC,WAC/C,SAACC,GAAA,EAAU,CACPvV,KAAMmV,EAAU,GAAGnV,KACnBrG,MAAOwb,EAAU,GAAGK,KAAK7b,MACzB8b,OAAK,EACLrgB,6BAA2B,IAE9B+f,EAAU3U,OAAS,IAChB,UAAC,KAAI,CAAC9D,QAAQ,OAAO3H,KAAM+I,GAAAA,SAAAA,OAAiBI,WAAYC,GAAAA,eAAAA,SAAwB,UAC3E4C,GAAAA,GACArJ,EAAKL,IACL0J,GAAAA,GACAoU,EAAU3U,OAAS,YAOxC,kBAAMrM,UAAWgV,EAA2B,UACvCf,QAAQxI,MAAAA,OAAI,EAAJA,EAAMI,QACX,iCACI,SAAC,KAAQ,CAACjM,KAAM,KAChB,SAAC,KAAI,CACD2I,QAAQ,OACR3H,KAAM+I,GAAAA,SAAAA,MACNI,WAAYC,GAAAA,eAAAA,SACZ,UAAQ,gCAA+B,SAEtCyB,MAAAA,OAAI,EAAJA,EAAMI,QAEX,SAAC,KAAQ,CAACjM,KAAM,OAGvBohB,EAAU3U,OAAS,IAChB,iCACI,SAAC5F,GAAA,EAAO,KACR,SAAC,KAAQ,CAAC7G,KAAM,KAChB,SAACwhB,GAAA,EAAU,CACPvV,KAAMmV,EAAU,GAAGnV,KACnBrG,MAAOwb,EAAU,GAAGK,KAAK7b,MACzB8b,OAAK,EACLrgB,6BAA2B,IAE9B+f,EAAU3U,OAAS,IAChB,UAAC,KAAI,CAAC9D,QAAQ,OAAO3H,KAAM+I,GAAAA,SAAAA,MAAgBI,WAAYC,GAAAA,eAAAA,SAAwB,UAC1E4C,GAAAA,GACArJ,EAAKL,IACL0J,GAAAA,GACAoU,EAAU3U,OAAS,eAtE9C0U,GAAwD,iFAgF9D,UAAeld,EAAAA,EAAAA,GAAYkd,I,eC/D3B,MAAM7d,GACO,sBAGPqe,GAA2D,IAQ3D,IAR4D,KAC9Dhe,EAAI,QACJoP,EAAO,YACP+N,EAAW,QACXpd,EAAO,QACPke,EAAO,KACP/V,EAAI,QACJyN,GACH,EACG,MAAM,2BAAElE,EAA0B,6BAAEC,EAA4B,kCAAEkM,IAC9DjM,EAAAA,GAAAA,KACJ,GAAKvC,MAAAA,IAAAA,EAASkB,YACV,OAAO,KAGX,MAAM4N,GAAwBpf,EAAAA,GAAAA,GAAyBsQ,MAAAA,OAAO,EAAPA,EAASrQ,QAC1Dof,EAAqBzN,QACvBtB,EAAQ,aAAeA,EAAQgP,sBAAwBre,GAAWme,GAGhEG,EAAiBJ,GAAWA,EAAQzV,KAAOyV,EAAQ,eAAiBA,EAAQK,WAElF,OACI,iBAAK7hB,UAAW6F,GAAAA,EAAAA,YAAmB,WAC/B,kBAAM7F,UAAWmhB,EAAkC,WAC/C,iBAAMnhB,UAAWiV,EAA6B,UAC1C,UAAC,KAAI,CAAC1M,QAAQ,OAAO3H,KAAM+I,GAAAA,SAAAA,OAAgB,UACtCsK,QAAQyM,KAAgB,gBAAK1gB,UAAU,gBAAe,SAAEuD,EAAKL,OAC9D,SAAC,GAAW,CAACyP,QAASA,EAAS+N,YAAaA,EAAazf,6BAA2B,UAG5F,iBAAMjB,UAAWgV,EAA2B,UACxC,UAAC,KAAI,CAACzM,QAAQ,OAAO3H,KAAM+I,GAAAA,SAAAA,MAAe,UACrCsK,QAAQyM,KAAgB,gBAAK1gB,UAAU,gBAAe,SAAEuD,EAAKL,OAC9D,SAAC,GAAW,CAACyP,QAASA,EAAS+N,YAAaA,EAAazf,6BAA2B,UAG5F,SAAC,KAAQ,CAACrB,KAAM,IAEf8hB,IACG,iCACI,SAAC,KAAQ,CAAC9hB,KAAM,KAChB,UAACkiB,GAAA,EAAyB,WACrBnP,EAAQ,cAAe,SAACoP,GAAA,EAAoB,CAACC,eAAa,IAE1DrP,EAAQgP,uBAAwB,SAACM,GAAA,EAAe,IAChD3e,IAAW,SAAC,GAAO,CAACA,QAASA,EAASvC,kBAAgB,EAACE,6BAA2B,IAClFwgB,IACG,SAAC/e,GAAA,EAAuB,CACpBH,MAAOkf,EACP1gB,kBAAgB,EAChBE,6BAA2B,EAC3BH,OAAO,+BAInB,SAAC,GAAgB,WAK7B,iBAAMd,UAAWgV,EAA2B,UACxC,SAACvO,GAAA,EAAO,MAGXmb,IACG,kBAAM5hB,UAAWmhB,EAAkC,WAC/C,iBAAMnhB,UAAWgV,EAA2B,UACxC,SAAC,KAAQ,CAACpV,KAAM,OAEpB,SAACsiB,GAAA,EAAoB,CACjBV,QAASA,EACT3E,UAAWlK,EAAQ5G,GACnB9K,6BAA2B,EAC3BjB,UAAW6F,GAAAA,EAAAA,gBAEf,kBAAM7F,UAAWgV,EAA2B,WACxC,SAAC,KAAQ,CAACpV,KAAM,KAChB,SAAC6G,GAAA,EAAO,WAIpB,SAAC,GAAc,CAACgF,KAAMA,EAAMyN,QAASA,QAlF3CqI,GAAwD,iFAuF9D,UAAe1d,EAAAA,EAAAA,GAAY0d,I,gBCpH3B,MAAMre,GACG,uCADHA,GAEK,yCAGLif,GAA8D,IAA4B,IAA3B,aAAEC,EAAY,KAAE7e,GAAM,EACvF,MAAM,2BAAEyR,EAA0B,6BAAEC,EAA4B,kCAAEkM,IAC9DjM,EAAAA,GAAAA,KACJ,OAAKkN,EAAa3I,MAAS2I,EAAajhB,IAKpC,iCACI,iBAAMnB,UAAWC,GAAAA,CAAWgV,EAA8BkM,GAAmC,UACzF,UAAC,KAAI,CAAC5Y,QAAQ,OAAO3H,KAAM+I,GAAAA,SAAAA,MAAe,WACtC,SAAC0Y,GAAA,EAAY,CACT5I,KAAM2I,EAAa3I,KACnBtY,GAAIihB,EAAajhB,GACjBmhB,aAAcF,EAAaE,aAC3BC,MAAI,IAEP3V,GAAAA,GACArJ,EAAK6e,EAAaI,MAAQtf,GAAgBA,UAInD,iBAAMlD,UAAWgV,EAA2B,UACxC,UAAC,KAAI,CAACzM,QAAQ,OAAO3H,KAAM+I,GAAAA,SAAAA,WAAoB,WAC3C,SAAC0Y,GAAA,EAAY,CACT5I,KAAM2I,EAAa3I,KACnBtY,GAAIihB,EAAajhB,GACjBmhB,aAAcF,EAAaE,aAC3BC,MAAI,IAEP3V,GAAAA,GACArJ,EAAK6e,EAAaI,MAAQtf,GAAgBA,YA3BhD,MAJTif,GAA2D,2FAsCjE,UAAete,EAAAA,EAAAA,GAAYse,I,gBC3C3B,MAAMM,GAAkD,IAAmC,IAAlC,QAAEC,EAAO,iBAAEC,GAAkB,EAClF,MAAM,2BAAE3N,EAA0B,6BAAEC,IAAiCC,EAAAA,GAAAA,KACrE,OAAKwN,MAAAA,GAAAA,EAASE,MAASF,MAAAA,GAAAA,EAASG,KAI5B,iBAAK7iB,UAAU,iBAAgB,WAC3B,kBAAMA,UAAWiV,EAA6B,WAC1C,SAAC,IAAQ,CAACrV,KAAM,KAChB,UAAC,IAAiB,CAACA,KAAM,EAAE,UACtB8iB,EAAQE,OACL,SAAC,KAAI,CAAChiB,KAAM+I,GAAAA,SAAAA,OAAiB,UAAQ,+CAA8C,UAC/E,SAACmZ,GAAA,EAAgB,CAACC,MAAOJ,EAAiB,SAAED,EAAQE,SAG3DF,EAAQG,MACL,SAAC,KAAI,CAACjiB,KAAM+I,GAAAA,SAAAA,OAAiB,UAAQ,4CAA2C,UAC5E,SAACmZ,GAAA,EAAgB,CAACC,MAAOJ,EAAiB,SAAED,EAAQG,eAMpE,kBAAM7iB,UAAWgV,EAA2B,WACxC,SAAC,IAAQ,CAACpV,KAAM,KAChB,UAAC,IAAiB,CAACA,KAAM,EAAE,UACtB8iB,EAAQE,OACL,SAAC,KAAI,CAAChiB,KAAM+I,GAAAA,SAAAA,MAAgB,UAAQ,+CAA8C,UAC9E,SAACmZ,GAAA,EAAgB,CAACC,MAAOJ,EAAiB,SAAED,EAAQE,SAG3DF,EAAQG,MACL,SAAC,KAAI,CAACjiB,KAAM+I,GAAAA,SAAAA,MAAgB,UAAQ,4CAA2C,UAC3E,SAACmZ,GAAA,EAAgB,CAACC,MAAOJ,EAAiB,SAAED,EAAQG,iBA9BjE,MAHTJ,GAA+C,yFA0CrD,Y,4BC/CA,MAAMvf,GAAU,CACZ8f,WAAY,2BACZ,CAACC,GAAAA,GAAAA,cAAgC,kCACjC,CAACA,GAAAA,GAAAA,cAAgC,kCACjC,CAACA,GAAAA,GAAAA,cAAgC,kCACjC,CAACA,GAAAA,GAAAA,WAA6B,gCAO5BC,GAA4D,IAA8B,IAA7B,eAAEC,EAAc,KAAE5f,GAAM,EACvF,MAAM,2BAAEyR,EAA0B,6BAAEC,EAA4B,kCAAEkM,IAC9DjM,EAAAA,GAAAA,KACJ,OAAKiO,GAKD,iCACI,iBAAMnjB,UAAWC,GAAAA,CAAWgV,EAA8BkM,GAAmC,UACzF,SAAC,KAAI,CACD5Y,QAAQ,OACR3H,KAAM+I,GAAAA,SAAAA,OACNI,WAAYC,GAAAA,eAAAA,SACZ,UAAQ,wCAAuC,SAE9CmZ,IAAmBF,GAAAA,GAAAA,aACd1f,EAAKL,GAAQigB,KACbtZ,EAAAA,GAAAA,QAAOtG,EAAKL,GAAQ8f,YAAa,CAAE,MAAOzf,EAAKL,GAAQigB,WAIrE,iBAAMnjB,UAAWgV,EAA2B,UACxC,SAAC,KAAI,CACDzM,QAAQ,OACR3H,KAAM+I,GAAAA,SAAAA,MACNI,WAAYC,GAAAA,eAAAA,SACZ,UAAQ,wCAAuC,SAE9CmZ,IAAmBF,GAAAA,GAAAA,aACd1f,EAAKL,GAAQigB,KACbtZ,EAAAA,GAAAA,QAAOtG,EAAKL,GAAQ8f,YAAa,CAAE,MAAOzf,EAAKL,GAAQigB,aA3BlE,MAJTD,GAAyD,uFAsC/D,UAAerf,EAAAA,EAAAA,GAAYqf,ICtDrBhgB,GACM,4CAONkgB,GAAsD,IAAgC,IAA/B,KAAE7f,EAAI,iBAAE8f,GAAkB,EACnF,OAAKA,GAID,iCACI,SAAC,IAAQ,CAACzjB,KAAM,EAAGiR,GAAI,KACvB,gBAAK7Q,UAAW6F,GAAAA,EAAAA,eAAuB,UAAQ,6BAA4B,SACtEtC,EAAKL,SANP,MAFTkgB,GAAmD,mGAczD,UAAevf,EAAAA,EAAAA,GAAYuf,I,4BCT3B,MAEaE,GAAmB,IAMX,IANY,QAC7B/U,EAAO,4BACPtN,GAIH,EACG,MACI,gBAAiBsiB,EAAY,UAC7Bpc,EAAS,oBACTqc,EAAmB,KACnBjiB,EAAI,wBACJkiB,EAAuB,qBACvB3F,GACAvP,EAEE0I,GAAanU,EAAAA,EAAAA,IAAaC,GAAUA,EAAMmU,uBAAuB/P,KACjEkQ,EAAcJ,MAAAA,OAAU,EAAVA,EAAYK,SAASC,EAAAA,EAAAA,UACnCmM,EAA2BF,EApBnB,IAoB+D,gBAATjiB,IAA2B8V,EACzFsM,EAAuB1P,QAAQwP,GAA2B3F,GAC1D8F,EAA4BL,IAAiBM,GAAAA,EAAAA,QAG/CrF,aAAcC,EAAW,EAAC,kBAC1BC,EAAiB,iBACjBC,IACA7b,EAAAA,EAAAA,IAAaC,GAAUA,EAAM6b,cAAgB,KAEjD,GAAI3d,EAA6B,OAC7B,MACM6iB,EAA+B,CACjC9E,wBAFYN,MAAAA,GAA8B,QAAb,EAAjBA,EAAoBvX,UAAU,WAAb,EAAjB,EAAgC2X,mBAAoB,EAGhE3X,UAAAA,EACAsX,SAAAA,EACAQ,WAAYN,EAAmBL,GAAY9X,SAAW8X,GAAYY,QAGhE6E,EAA8B9P,QAAQ6P,EAA6B9E,wBAOzE,MAAO,CACH0E,yBAAAA,EACAC,qBAAAA,EACAC,0BAAAA,EACAI,gBATAN,GACAC,GACAC,GACAG,EAOAA,4BAAAA,EACAD,6BAAAA,GAKR,MAAO,CACHJ,yBAAAA,EACAC,qBAAAA,EACAC,0BAAAA,EACAI,gBALoBN,GAA4BC,GAAwBC,ICjE1E1gB,GACgB,yBAOhB+gB,GAAyD,IAAuB,UAAtB,QAAE1V,EAAO,KAAEhL,GAAM,EAC7E,MAAM,yBACFmgB,EAAwB,qBACxBC,EAAoB,0BACpBC,EAAyB,4BACzBG,EAA2B,6BAC3BD,EAA4B,gBAC5BE,GACAV,GAAiB,CACjB/U,QAAAA,EACAtN,6BAA6B,IAGjC,OAAK+iB,GAKD,iCACI,SAAC,IAAQ,CAACpkB,KAAM,EAAGiR,GAAI,KACvB,iBAAK7Q,UAAW6F,GAAAA,EAAAA,OAAc,UACzBke,IACG,SAACxe,GAAA,GAAK,CACFhE,KAAM4C,GAAAA,GAAAA,iBACNrD,OAAS,iBAAgBqD,GAAAA,GAAAA,mBACzBqB,MAAOtB,GAAAA,GAAAA,WACPwB,SAAS2C,EAAAA,GAAAA,wBAAuB9E,EAAKL,IAA2B,CAC5D,MAA2D,QAAtD,EAAE4gB,MAAAA,OAA4B,EAA5BA,EAA8B9E,8BAAsB,QAAI,OAI1E2E,IACG,SAACpe,GAAA,GAAK,CACFhE,KAAM4C,GAAAA,GAAAA,SACNrD,OAAS,iBAAgBqD,GAAAA,GAAAA,WACzBqB,MAAOtB,GAAAA,GAAAA,aAGdwf,IACG,SAACne,GAAA,GAAK,CACFhE,KAAM4C,GAAAA,GAAAA,QACNrD,OAAS,iBAAgBqD,GAAAA,GAAAA,UACzBqB,MAAOtB,GAAAA,GAAAA,aAGd0f,IACG,SAACre,GAAA,GAAK,CACFhE,KAAM4C,GAAAA,GAAAA,mBACNrD,OAAS,iBAAgBqD,GAAAA,GAAAA,qBACzBqB,MAAOtB,GAAAA,GAAAA,mBAnChB,MAdT+f,GAAsD,+EAyD5D,UAAepgB,EAAAA,EAAAA,GAAYogB,I,oIC9C3B,MAIMC,GAAuBC,GACzB3gB,OAAOC,KAAK0gB,GAAalE,QAAO,CAACmE,EAAmBC,KAChD,MAAMC,EAAgBH,EAAYE,GAC3B,GAAEA,KAPgBE,EAOoBJ,EAAYE,GAN7DG,mBAAmBD,GAAKE,QAAQ,YAAaC,GAAO,IAAGA,EAAEC,WAAW,GAAGC,SAAS,IAAIC,oBAO1E,GARmBN,IAAAA,EAUzB,MAAQ,GAAEH,IAAoBA,GAAqBE,EAAgB,IAAM,KAAKA,MAC/E,IAkCDQ,GAA4D,IAQ5D,IAR6D,QAC/DvW,EAAO,cACPH,EAAa,cACbiK,EAAa,aACb0M,EAAY,SACZva,EAAQ,4BACRvJ,EAA2B,UAC3BjB,GACH,EACG,MAAQ,SAAU0gB,EAAW,SAAEpM,EAAU,SAAUD,EAAK,MAAE2Q,EAAK,UAAE7d,EAAS,kBAAE8W,GAAsB1P,EAC5F0W,GAAcniB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMkiB,cAC3CjiB,GAAWF,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WAExCkiB,GAAQpiB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMmiB,QACrCC,GAAkBriB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMoiB,kBAE/CC,EAAYF,GAASC,EAErB/jB,EAvCqB,KAAoF,IAAnF,aAAE2jB,EAAY,MAAE1Q,EAAK,SAAEC,EAAQ,YAAEoM,EAAW,YAAE2E,EAAW,kBAAEpH,GAAmB,EAC1G,MAAMqH,EAAcpB,GAAoB,CACpCqB,MAAOR,IAGX,IAAI3jB,EAEJ,QAAQ,GACJ,KAAK6S,QAAQI,GAASC,GAClBlT,GAAMqT,EAAAA,EAAAA,WAAUH,EAAoB,CAAEI,UAAW,oBACjD,MACJ,KAAKT,QAAQyM,GACTtf,EAAMsf,EACN,MACJ,QACItf,EAAO,GAAEikB,IAAcC,EAAe,IAAGA,IAAgB,KAGjE,OAAOE,EAAAA,GAAAA,IAAoCpkB,EAAK6c,IAqBpCwH,CAAW,CACnBV,aAAAA,EACA1Q,MAAAA,EACAC,SAAAA,EACAoM,YAAAA,EACAzC,kBAAAA,EACAoH,YAAaL,EAAMU,WAIjB,aAAErT,GAAiBD,EAAkB7D,GA+B3C,OACI,iBAAMvO,UAAU,gCAA+B,UAC3C,SAAC,KAAS,CACNuI,QAASrH,EAAAA,KACTC,GAAIC,EACJukB,sBAAuB,CAAEtN,cAAAA,GACzBhX,OAAO,SACP+jB,UAAWA,EACXrlB,QArCe,KACnBwO,EAAQ0P,mBAAqB1P,EAAQ+F,WAChCsR,EAAAA,GAAAA,IAA2B,CAC5BrQ,SAAUsQ,GAAAA,GAAAA,oBACVvR,SAAU/F,EAAQ+F,WAItBlG,IAAkBmD,GAAAA,EAAAA,kBAClBuU,IAAAA,CAA+B,CAC3BhM,gBAAiB,uBACjB3S,UAAW8d,EAAY9d,UACvB4e,gBAAiB5e,IAIrBiH,IAAkBmD,GAAAA,EAAAA,0BAClByU,IAAAA,CAAyC,CACrCC,mBACIjjB,IAAa6T,EAAAA,EAAAA,UAAqB1Q,GAAAA,EAAAA,QAA+BA,GAAAA,EAAAA,SACrEgB,UAAW8d,EAAY9d,WAAa,EACpC+e,iBAAkB/e,IAK1B8M,QAAQ5B,IAAiB8T,IAAAA,CAAyB,CAAEhf,UAAWoH,EAAQpH,aAWnC,UAE5B,iBACInH,UAAWC,GAAAA,CAAWD,EAAW,wBAAyB,CACtD,oBAAqBiB,EACrB,iCAAkCA,IAEtC,UAAQ,mBAAkB,SAEzBuJ,SA5Efsa,GAAyD,uEAmF/D,Y,ykBC5IA,MAAMsB,GAAoC,IAA4D,IAA3D,KAAEva,EAAI,iBAAEwa,EAAgB,2BAAE3G,GAA4B,EAC7F,MAAM,2BAAE1K,EAA0B,6BAAEC,IAAiCC,EAAAA,GAAAA,KAErE,OACI,iCACI,iBAAMlV,UAAWC,GAAAA,CAAWgV,EAA8BpP,GAAAA,EAAAA,aAAoB,UAC1E,SAAC,GAAAygB,UAAS,WACN,UAAC,GAAa,SAAKD,GAAgB,IAAErmB,UAAW6F,GAAAA,EAAAA,aAAqB5E,6BAA2B,YAC3F4K,EACA6T,IACG,iBAAM1f,UAAW6F,GAAAA,EAAAA,iBAAwB,UACrC,SAAC0gB,GAAA,EAAsB,CAAClZ,QAAQ,wBAMpD,iBAAMrN,UAAWC,GAAAA,CAAW+U,EAA4BnP,GAAAA,EAAAA,aAAoB,UACxE,SAAC,GAAA0F,UAAS,WACN,UAAC,GAAa,SAAK8a,GAAgB,IAAErmB,UAAW6F,GAAAA,EAAAA,aAAqB5E,6BAA2B,YAC3F4K,EACA6T,IACG,iBAAM1f,UAAW6F,GAAAA,EAAAA,iBAAwB,UACrC,SAAC2gB,GAAA,EAAsB,CAACnZ,QAAQ,2BAvB1D+Y,GAAiC,2EAiCvC,Y,2BCvCA,MAAMljB,GACQ,CACNujB,IAAK,+BACLC,KAAM,gCACNC,KAAM,iCAIRC,GAAkE,IAAgC,IAA/B,iBAAEC,EAAgB,KAAEtjB,GAAM,EAC/F,OAAKsjB,GAAoBA,EAAmB,EACjC,MAIP,iCACI,SAAC,IAAQ,CAACjnB,KAAM,EAAGiR,GAAI,KACvB,SAAC,KAAI,CAAC9G,WAAYC,GAAAA,eAAAA,SAAwB,UACtC,SAAC,KAAgB,CACb8C,MAAO+Z,EACPJ,IAAKljB,EAAKL,GAAiBujB,KAC3BC,KAAMnjB,EAAKL,GAAiBwjB,MAC5BC,KAAMpjB,EAAKL,GAAiByjB,MAC5BG,UAAU,EACVjd,OAASkd,IACLld,EAAAA,GAAAA,QAAOkd,EAAK,CACR,MAAOF,YAjB7BD,GAA+D,6FA0BrE,UAAe/iB,EAAAA,EAAAA,GAAY+iB,I,ykBCjB3B,MAAMjK,GACwB,8BAGxBzZ,GACQ,qCAUR8jB,GAAyE,IAMzE,IAN0E,QAC5EzY,EAAO,cACPH,EAAa,cACbiK,EAAa,aACb0M,EAAY,KACZxhB,GACH,EACG,MAAM,UACF4D,EACA,SAAUkN,EACV,eAAgByG,EAAW,KAC3BrP,EAAI,QACJyN,EACA,WAAY5V,EAAO,KACnBuI,EAAI,gBACJob,EAAe,SACfpJ,EAAQ,aACRuE,EAAY,eACZe,EACArF,qBAAsB/G,EAAsB,qBAC5CsC,EAAoB,WACpB6N,EAAU,kBACVjJ,EAAiB,SACjBkJ,EAAQ,KACR5lB,EAAI,YACJ6lB,EAAW,QACX1E,EAAO,QACP/P,EAAO,SACP2B,EAAQ,QACRkN,EACA6F,mBAAoBR,GACpBtY,EACE8X,EAAmB,CACrBjY,cAAAA,EACAiK,cAAAA,EACA0M,aAAAA,EACAxW,QAAAA,IAEE,2BAAEyG,IAA+BE,EAAAA,GAAAA,KACjCoS,GAA2BxkB,EAAAA,EAAAA,IAAY,QAAC,SAAEka,GAAU,SAAKA,EAASL,OAClE3Z,GAAWF,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WACxCqgB,EAAmB4D,EAAgBM,iBAAmBhH,GAEtDiH,GAAa1kB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WAAa6T,EAAAA,EAAAA,WACvD4Q,EAAgBpT,GAASmT,EAEzB9H,EAA6B4H,EAC7BrT,QAAQiT,EAAWQ,aAAezJ,GACrB,YAAbkJ,KAA4BlJ,EAE5BjH,EAA0BiH,GAAqB1P,EAAQ+F,SAAW/F,EAAQ+F,SAAW,KACrFqT,GAAgCvF,EAAa3I,MAAQ2I,EAAajhB,KAAOgiB,EAE/E,OACI,iBAAKnjB,UAAW6F,GAAAA,EAAAA,YAAmB,UAC9BoO,QAAQ4J,KACL,iBAAK,UAAQ,iCAAiC7d,UAAW6F,GAAAA,EAAAA,gBAAuB,WAC5E,SAAC,KAAI,CAACkE,WAAYC,GAAAA,eAAAA,SAAwB,SAAEzG,EAAKL,OACjD,SAAC,IAAQ,CAACtD,KAAM,EAAGiR,GAAI,QAI/B,iBAAK7Q,UAAW6F,GAAAA,EAAAA,qBAA4B,WACxC,SAAC,GAAW,CACR8M,QAASA,EACT+M,2BAA4BA,EAC5Bze,6BAA2B,KAE/B,SAAC,GAAW,CACR0R,QAASA,EACT+M,2BAA4BA,EAC5Bze,6BAA2B,EAC3B0e,OAAK,QAIb,SAAC,GAAW,CACR9T,KAAMA,EACNwa,iBAAkBA,EAClB3G,2BAA4BA,KAEhC,SAAC,IAAQ,CAAC9f,KAAM,EAAGiR,GAAI,KACvB,SAAC,GAAmB,CAACuR,aAAcA,IAClCuF,IACG,kBAAM3nB,UAAWgV,EAA2B,WACxC,SAAC,GAAgB,KACjB,SAACvO,GAAA,EAAO,KACR,SAAC,GAAgB,QAGzB,SAAC,GAAiB,CAAC0c,eAAgBA,KACnC,SAAC,IAAQ,CAACvjB,KAAM,EAAGiR,GAAI,KAEvB,SAAC,GAAc,CAAC8B,QAASA,EAASrP,QAASA,EAASke,QAASA,EAAS/V,KAAMA,EAAMyN,QAASA,KAC3F,SAAC,GAAa,CAAC3K,QAASA,KACxB,SAAC,GAAkB,CAACmU,QAASA,EAASC,iBAAkBvU,IAAkBmD,GAAAA,EAAAA,iBAC1E,SAAC,GAAuB,CAAC8R,iBAAkBA,KAC3C,SAAC,GAAoB,CAACwD,iBAAkBA,IACvCY,IACG,iCACI,SAAC,IAAQ,CAAC7nB,KAAM,KAChB,SAAC,GAAW,QAGpB,SAAC,GAAkB,CACfuH,UAAWA,EACXiH,cAAeA,EACfyO,UAAWlK,EAAQ5G,GACnB+O,YAAaA,EACbzB,qBAAsBA,EACtBtC,uBAAwBA,MAAAA,EAAAA,EAA0B,GAClDlB,YAAatU,EACb+S,SAAUA,MAAAA,EAAAA,EAAY,GACtB0C,wBAAyBA,EACzBkC,QAASA,EACT7E,MAAOJ,QAAQI,GACfyI,WAAY7I,QAAQ4J,GACpB5c,6BAA2B,IAE9BmmB,IAAe,SAAC,KAAsB,MAAKA,IAC3CpkB,IAAa6T,EAAAA,EAAAA,YACV,gBAAK7W,UAAU,yBAAwB,UACnC,SAAC4nB,EAAA,EAAgB,CAACzgB,UAAWA,EAAW0gB,YAAY,SAAS5mB,6BAA2B,UA1HtG+lB,GAAsE,mFAiI5E,UAAenjB,EAAAA,EAAAA,GAAYmjB,I,gBC9J3B,MAAM9jB,GACM,4CAGN4kB,GAA2D,IAAsC,IAArC,gBAAEb,EAAe,MAAE5S,EAAK,KAAE9Q,GAAM,EAC9F,MAAMikB,GAAa1kB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WAAa6T,EAAAA,EAAAA,WACvDkR,EAAWd,EAAgBM,iBAAmBhH,GAC9CkH,EAAgBpT,GAASmT,EAE/B,OAAKO,GAAaN,GAId,gCACKM,IACG,gBAAK/nB,UAAU,6BAA6B,UAAQ,6BAA4B,SAC3EuD,EAAKL,MAGb6kB,GAAYN,IAAiB,SAAC,IAAQ,CAAC7nB,KAAM,IAC7C6nB,IAAiB,SAAC,GAAW,KAC9B,SAAC,IAAQ,CAAC7nB,KAAM,OAXb,MANTkoB,GAAwD,yEAsB9D,UAAejkB,EAAAA,EAAAA,GAAYikB,ICjCrBE,GAAU,IAA6B,YAA5B,KAAEvc,EAAI,QAAEyN,EAAO,KAAE3V,GAAM,EACpC,MAAMyd,EAAY9H,MAAAA,GAAsB,QAAf,EAAPA,EAAS+H,qBAAa,OAAO,QAAP,EAAtB,EAAwBC,aAAK,WAAtB,EAAP,EAA+B1e,QAAQ0e,GAAUA,EAAM,aAAezV,EAAK,SAE7F,OACI,UAAC,KAAI,CAAC7K,KAAM+I,GAAAA,SAAAA,OAAiBI,WAAYC,GAAAA,eAAAA,QAAwB,UAAQ,gCAA+B,UACnGyB,MAAAA,OAAI,EAAJA,EAAMI,MACNmV,MAAAA,OAAS,EAATA,EAAW3U,QAAS,IACjB,gCACK,MACD,SAAC+U,GAAA,EAAU,CAACvV,KAAMmV,EAAU,GAAGnV,KAAMrG,MAAOwb,EAAU,GAAGK,KAAK7b,MAAO8b,OAAK,IACzEN,EAAU3U,OAAS,IAChB,gCACK,IACA9I,EAAKykB,GAAQzkB,KAAK0kB,WAClBrb,GAAAA,GACAoU,EAAU3U,OAAS,EACnBO,GAAAA,GACAoU,EAAUtd,KAAI,CAACwd,EAAO1V,IACL,IAAVA,EACO,MAEJ,SAAC4V,GAAA,EAAU,CAAoB5b,MAAOwb,EAAUxV,GAAO6V,KAAK7b,MAAO8b,OAAK,GAAvDJ,EAAM,oBArBxD8G,GAAO,2DA+BbA,GAAQzkB,KAAO,CACX0kB,UAAW,iCAGfD,GAAQ5W,UAAY,CAChB3F,KAAM4F,IAAAA,MAAgB,CAClBxF,KAAMwF,IAAAA,OACN,MAAOA,IAAAA,SAEX6H,QAAS7H,IAAAA,MAAgB,CACrB4P,cAAe5P,IAAAA,MAAgB,CAC3B6P,MAAO7P,IAAAA,QACHA,IAAAA,MAAgB,CACZ,UAAWA,IAAAA,OACXxF,KAAMwF,IAAAA,OACNgQ,KAAMhQ,IAAAA,MAAgB,CAClB7L,MAAO6L,IAAAA,gBAM3B9N,KAAM8N,IAAAA,QAGV,UAAexN,EAAAA,EAAAA,GAAYmkB,ICjDrBE,GAAU,IAAqE,IAApE,QAAEvV,EAAO,YAAE+N,EAAW,QAAEpd,EAAO,KAAEC,EAAI,uBAAEqc,GAAwB,EAC5E,GAAKjN,MAAAA,IAAAA,EAASkB,YACV,OAAO,KAGX,MAAM4N,GAAwBpf,EAAAA,GAAAA,GAAyBsQ,MAAAA,OAAO,EAAPA,EAASrQ,QAEhE,OACI,UAAC,KAAI,CAAC1B,KAAM+I,GAAAA,SAAAA,OAAiBI,WAAYC,GAAAA,eAAAA,QAAuB,UAC3D0W,IAAe,gBAAK1gB,UAAU,OAAM,SAAEuD,EAAK2kB,GAAQ3kB,KAAK4kB,YACzD,gBAAKnoB,UAAU,uCAAsC,UACjD,SAAC,GAAW,CACR2S,QAASA,EACT+N,YAAaA,EACbd,uBAAwBA,OAGhC,UAACkC,GAAA,EAAyB,WACrBnP,EAAQ,cAAe,SAACoP,GAAA,EAAoB,CAACC,eAAa,IAC1DrP,EAAQgP,uBAAwB,SAACM,GAAA,EAAe,IAChD3e,IAAW,SAAC,GAAO,CAACA,QAASA,EAASvC,kBAAgB,IACtD0gB,IACG,SAAC/e,GAAA,EAAuB,CACpBH,MAAOkf,EACP1gB,kBAAgB,EAChBD,OAAO,kCAzBzBonB,GAAO,2DAiCbA,GAAQ3kB,KAAO,CACX4kB,QAAS,uBAGbD,GAAQ9W,UAAY,CAChBuB,QAAStB,IAAAA,MAAgB,CACrBtF,GAAIsF,IAAAA,OACJwC,YAAaxC,IAAAA,OACb+W,WAAY/W,IAAAA,MAAgB,CACxB,QAASA,IAAAA,SAEbwP,2BAA4BxP,IAAAA,OAC5B,WAAYA,IAAAA,KACZ/O,OAAQ+O,IAAAA,OACRsQ,qBAAsBtQ,IAAAA,OAE1B/N,QAAS+N,IAAAA,MAAgB,CACrB9P,KAAM8P,IAAAA,OACN,OAAQA,IAAAA,OACR,QAASA,IAAAA,SAEbqP,YAAarP,IAAAA,OACb9N,KAAM8N,IAAAA,OACNuO,uBAAwBvO,IAAAA,MAG5B,UAAexN,EAAAA,EAAAA,GAAYqkB,IC/DrB/F,GAAoD,IAAsB,IAArB,aAAEC,GAAc,EACvE,OAAKA,EAAa3I,MAAS2I,EAAajhB,IAIpC,SAAC,GAAAoK,UAAS,CAAChD,QAAQ,OAAO,UAAQ,qCAAoC,UAClE,SAAC8Z,GAAA,EAAY,CAAC5I,KAAM2I,EAAa3I,KAAMtY,GAAIihB,EAAajhB,GAAImhB,aAAcF,EAAaE,aAAcC,MAAI,MAJtG,MAFTJ,GAAiD,4EAWvD,YCbMkG,GAAU,IAAmC,IAAlC,QAAE7G,EAAO,WAAE3M,EAAU,KAAEtR,GAAM,EAC1C,OAAKie,GAAYA,EAAQ,eAIrB,SAAC,EAAAtgB,KAAI,CACDlB,UAAU,iEACVmB,GAAK,cAAaqgB,EAAQzV,iBAAiB8I,IAC3C,UAAQ,0CAAyC,UAEjD,UAAC,KAAI,CAACjU,KAAM+I,GAAAA,SAAAA,MAAe,UACtBpG,EAAK8kB,GAAQ9kB,KAAK+kB,kBAClB1b,GAAAA,IACD,SAAC,KAAI,CACD1K,KAAMkL,GAAAA,SAAAA,OACNhN,KAAMmN,GAAAA,SAAAA,OACN1N,WAAYmW,GAAAA,eAAAA,SACZuS,MAAOC,GAAAA,UAAAA,MACPtoB,MAAOsN,GAAAA,UAAAA,aAhBZ,MAFT6a,GAAO,2DAyBbA,GAAQ9kB,KAAO,CACX+kB,iBAAkB,iDAGtBD,GAAQjX,UAAY,CAChBoQ,QAASnQ,IAAAA,MAAgB,CACrBtF,GAAIsF,IAAAA,OACJ,aAAcA,IAAAA,OAElBwD,WAAYxD,IAAAA,OACZ9N,KAAM8N,IAAAA,QAGV,UAAexN,EAAAA,EAAAA,GAAYwkB,IC9C3B,GAAyB,+BCUnBpE,GAAqE,IAAiB,IAAhB,QAAE1V,GAAS,EACnF,MAAM,yBAAEmV,EAAwB,qBAAEC,EAAoB,0BAAEC,EAAyB,gBAAEI,GAC/EV,GAAiB,CAAE/U,QAAAA,IAEvB,OAAKyV,GAKD,iCACI,iBAAKhkB,UAAW6F,GAAc,UACzB8d,IACG,SAACpe,GAAA,GAAK,CAAChE,KAAM4C,GAAAA,GAAAA,SAAoBrD,OAAS,iBAAgBqD,GAAAA,GAAAA,aAE7Duf,IACG,SAACne,GAAA,GAAK,CAAChE,KAAM4C,GAAAA,GAAAA,QAAmBrD,OAAS,iBAAgBqD,GAAAA,GAAAA,YAE5Dyf,IACG,SAACre,GAAA,GAAK,CACFhE,KAAM4C,GAAAA,GAAAA,mBACNrD,OAAS,iBAAgBqD,GAAAA,GAAAA,2BAIrC,SAAC,IAAQ,CAACvE,KAAM,OAnBb,MALTqkB,GAAkE,2DA6BxE,UAAepgB,EAAAA,EAAAA,GAAYogB,I,ykBC1B3B,MAAMwE,GAAsB,IAA4D,IAA3D,KAAE5c,EAAI,iBAAEwa,EAAgB,2BAAE3G,GAA4B,EAC/E,OACI,iCACI,UAAC,GAAA4G,UAAS,YACN,iBAAM,4BAA0B,+BAA8B,UAC1D,SAAC,GAAa,SAAKD,GAAgB,aAAGxa,OAEzC6T,IACG,SAAC,GAAAzd,QAAO,CAACC,KAAMC,GAAAA,YAAAA,MAAmB/B,KAAMgC,GAAAA,YAAAA,MAAmBlC,MAAOW,GAAAA,aAAAA,YAG1E,SAAC,IAAQ,CAACjB,KAAM,QAXtB6oB,GAAmB,qDAgBzB,YCjBMC,GAAgD,IAAmC,IAAlC,QAAEhG,EAAO,iBAAEC,GAAkB,EAChF,OAAKD,MAAAA,GAAAA,EAASE,MAASF,MAAAA,GAAAA,EAASG,KAK5B,iBAAK7iB,UAAU,0BAAyB,WACpC,iBAAKA,UAAU,iBAAgB,UAC1B0iB,EAAQE,OACL,SAAC,KAAI,CAAC,UAAQ,+CAA8C,UACxD,SAACE,GAAA,EAAgB,CAACC,MAAOJ,EAAiB,SAAED,EAAQE,SAG3DF,EAAQE,MAAQF,EAAQG,MAAO,SAAC,IAAQ,CAACjjB,KAAM,IAC/C8iB,EAAQG,MACL,SAAC,KAAI,CAAC,UAAQ,4CAA2C,UACrD,SAACC,GAAA,EAAgB,CAACC,MAAOJ,EAAiB,SAAED,EAAQG,YAIhE,SAAC,IAAQ,CAACjjB,KAAM,OAlBb,MAFT8oB,GAA6C,2DAyBnD,YCrCA,GAA8B,qCCQxBxlB,GACS,4CADTA,GAEQ,2CAFRA,GAGS,4CAHTA,GAIS,4CAOTylB,GAAqD,IAAuB,IAAtB,KAAEplB,EAAI,QAAEqlB,GAAS,EACzE,OACI,iCACI,gBAAK5oB,UAAW6F,GAAmB,UAC/B,SAAC,KAAU,CACPiH,MAAO8b,EACPC,KAAMtlB,EAAKL,IACXujB,IAAKljB,EAAKL,IACVwjB,KAAMnjB,EAAKL,IACXyjB,KAAMpjB,EAAKL,IACX4jB,UAAU,EACVjd,OAASkd,IACLld,EAAAA,GAAAA,QAAOkd,EAAK,CACR,MAAO6B,SAKvB,SAAC,IAAQ,CAAChpB,KAAM,QAlBtB+oB,GAAkD,mEAuBxD,UAAe9kB,EAAAA,EAAAA,GAAY8kB,I,2BC1C3B,SAA8B,qCCYxBzlB,GAAU,CACZ8f,WAAY,2BACZ,CAACC,GAAAA,GAAAA,cAAgC,kCACjC,CAACA,GAAAA,GAAAA,cAAgC,oCACjC,CAACA,GAAAA,GAAAA,cAAgC,oCACjC,CAACA,GAAAA,GAAAA,WAA6B,kCAO5B6F,GAA2D,IAA8B,IAA7B,KAAEvlB,EAAI,eAAE4f,GAAgB,EACtF,OAAKA,GAKD,iCACI,UAAC,KAAiB,YACd,gBAAKnjB,UAAW6F,GAAmB,UAC/B,SAAC,KAAI,CAAC3D,KAAMkL,GAAAA,SAAAA,UAAoBlN,MAAOsN,GAAAA,UAAAA,WAE3C,SAAC,KAAQ,CAAC5N,KAAM,KAChB,SAAC,KAAI,CAAC,UAAQ,wCAAuC,SAChDujB,IAAmBF,GAAAA,GAAAA,aACd1f,EAAKL,GAAQigB,KACbtZ,EAAAA,GAAAA,QAAOtG,EAAKL,GAAQ8f,YAAa,CAAE,MAAOzf,EAAKL,GAAQigB,YAGrE,SAAC,IAAQ,CAACvjB,KAAM,OAhBb,MAFTkpB,GAAwD,yEAuB9D,UAAejlB,EAAAA,EAAAA,GAAYilB,I,ykBCb3B,MAAMnM,GACwB,8BAGxBoM,GAA6B,CAC/BC,gBAAiB,IACjBC,aAAc,IAGZC,GAAoB,IAAiF,IAAhF,KAAE3lB,EAAI,QAAEgL,EAAO,cAAEH,EAAa,cAAEiK,EAAa,aAAE0M,EAAY,KAAErX,EAAI,OAAElM,GAAQ,EAClG,MACI,SAAUkf,EACV,SAAUrM,EACV,eAAgByG,EAChB,WAAYxX,EAAO,QACnB4V,EAAO,SACP2E,EAAQ,KACRpS,EAAI,qBACJ4N,EAAoB,SACpB/E,EAAQ,QACR3B,EAAO,aACPyP,EAAY,gBACZ6E,EACAnJ,qBAAsB/G,EAAsB,QAC5CyK,EAAO,kBACPvD,EAAiB,SACjBkJ,EAAQ,KACRtb,EACAwb,mBAAoBR,EAAgB,YACpCO,EAAW,QACX1E,EAAO,KACPnhB,EAAI,UACJ4F,EAAS,eACTgc,EAAc,WACd+D,EAAU,kBACViC,GACA5a,EACE8X,EAAmB,CACrBjY,cAAAA,EACAiK,cAAAA,EACA0M,aAAAA,EACAxW,QAAAA,GAEEvL,GAAWF,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WACxComB,GAAa9Z,EAAAA,EAAAA,UACbgY,GAA2BxkB,EAAAA,EAAAA,IAAY,QAAC,SAAEka,GAAU,SAAKA,EAASL,OAElE0M,GAA0BC,EAAAA,GAAAA,IAAc,0BACxCC,GAA8BD,EAAAA,GAAAA,IAAc,oCAC5CE,EAAsBH,GAA2BE,EAGjDE,EAAwCC,GAC1Cnb,EACAsX,GAAAA,GAAAA,oBACAkD,IAGEzP,GAAaC,EAAAA,GAAAA,OAGb,2BAAEjH,EAA0B,2BAAEE,EAA0B,aAAEH,IAAiBD,EAAkB7D,GAE7FqR,GACFtG,GACA6P,EAAkBjC,YAClBiC,EAAkBjC,WAAWyC,SAASC,GAAMA,EAAEC,WAAUnD,MAAMkD,GAAyB,oBAAnBA,EAAEE,eAG1E,IAAIpK,GAA6B4H,EAC3BJ,EAAWQ,aAAezJ,EACb,YAAbkJ,KAA4BlJ,EAClCyB,KAAAA,GAA+BrL,GAASkV,GAGxC,MAAMvS,GAA0BiH,GAAqB1P,EAAQ+F,SAAW/F,EAAQ+F,SAAW,KAErFrT,IAA8B6B,EAAAA,EAAAA,IAAaC,GAAUA,EAAM9B,8BAE3D8oB,GAAU9oB,IACZ,SAAC,GAAyB,CACtBsN,QAASA,EACTH,cAAeA,EACfiK,cAAeA,EACf0M,aAAcA,KAGlB,gBAAK/kB,UAAU,4BAA2B,UAEtC,UAAC,GAAoB,CACjBuO,QAASA,EACTH,cAAeA,EACf4I,wBAAyBA,GAAwB,WAEjD,iBAAKhX,UAAU,yBAAwB,WACnC,iBAAKA,UAAU,oCAAmC,UAC7C6mB,EAAmB,IAAK,SAAC,GAAW,CAAC+B,QAAS/B,KAC/C,iBACI7mB,UAAWC,GAAAA,CAAW,CAClB,2BAA4B+C,IAAa6T,EAAAA,EAAAA,WAAsBnJ,IAChE,WAEH,SAAC,GAAqB,CAClB7B,KAAMA,EACNwa,iBAAkBA,EAClB3G,2BAA4BA,MAEhC,SAAC,GAA6B,CAAC0C,aAAcA,KAC7C,SAAC,IAAQ,CAACxiB,KAAM,QAEpB,iBAAKI,UAAU,4BAA2B,WACtC,iBAAKA,UAAU,0BAAyB,YACjC6d,IACC,gBAAK,UAAQ,iCAAgC,SACxCta,EAAK2lB,GAAkB3lB,KAAKsa,aAGrC,SAAC,IAAiB,CAACje,KAAM,EAAE,UACvB,SAAC,GAAwB,CACrB+S,QAASA,EACT+N,YAAaA,EACbpd,QAASA,EACTsc,uBAAwBA,QAGhC,SAAC,GAAwB,CAACnU,KAAMA,EAAMyN,QAASA,KAC/C,SAAC,GAAwB,CAACsI,QAASA,EAAS3M,WAAYlC,MAAAA,OAAO,EAAPA,EAAS5G,MACjE,SAAC,IAAQ,CAACnM,KAAK,UAEnB,SAAC,GAAqB,CAClB+S,QAASA,EACT+M,2BAA4BA,GAC5BE,uBAAwBA,GACxBD,OAAK,WAKftN,KACE,SAAC,GAAqB,CAClBM,QAASA,EACT+M,2BAA4BA,GAC5BE,uBAAwBA,SAIpC,SAAC,GAAuB,CAACzY,UAAWA,KACpC,SAAC,GAAqB,CAACgc,eAAgBA,KACvC,SAAC,GAAa,CAAC5U,QAASA,KACxB,SAAC,GAAO,CAACmU,QAASA,EAASC,iBAAkBvU,IAAkBmD,GAAAA,EAAAA,iBAC/D,SAAC,GAA+B,CAAC0V,gBAAiBA,EAAiB5S,MAAOA,KAExE7B,IACE,SAAC,GAAkB,CACfrL,UAAWA,EACXiH,cAAeA,EACfyO,UAAWlK,EAAQ5G,GACnB+O,YAAaA,EACbzB,qBAAsBA,EACtBtC,uBAAwBA,EACxBlB,YAAatU,EACb+S,SAAUA,EACV0C,wBAAyBA,GACzBkC,QAASA,EACT7E,MAAOA,EACPyI,WAAY7I,QAAQ4J,KAG3BuJ,IAAe,SAAC,KAAsB,MAAKA,IAC3CpkB,IAAa6T,EAAAA,EAAAA,YAETxE,KACG,gBAAKrS,UAAU,yBAAwB,UACnC,SAAC4nB,EAAA,EAAgB,CAACzgB,UAAWA,EAAW0gB,YAAY,kBAOtEmC,IAAmBzM,EAAAA,EAAAA,cAAaqM,IAElCA,EAAEK,mBACH,IAGH,OAAIzX,GAEI,SAAC,EAAc,CAACjE,QAASA,EAASmE,YAAU,YACxC,gBACII,IAAMsL,IACFqL,EAAsCrL,GACtCgL,EAAW1Z,QAAU0O,GAEzBpe,UAAWC,GAAAA,CAAW,oBAAqB,iBAAkB,CACzD,4BAA6BoU,IAEjC,UAASpU,GAAAA,CAAW,wBAAyB,CACzC,CAAE,yBAAwBknB,KAAaA,IAE3C+C,YAAaF,GAAiB,SAE7BxoB,EAASA,EAAOuoB,GAASX,GAAcW,QAQpD,gBACIjX,IAAMsL,IACFqL,EAAsCrL,GACtCgL,EAAW1Z,QAAU0O,GAEzBpe,UAAWC,GAAAA,CAAW,YAAa,iBAAkB,CAEjD,4BAA6BoU,IAAUmV,EACvC,qBAAsBvoB,GACtB,0BAA2BqR,IAE/B,UAASrS,GAAAA,CAAW,wBAAyB,CACzC,CAAE,yBAAwBknB,KAAaA,IAE3C+C,YAAaF,GAAiB,SAE7BxoB,EAASA,EAAOuoB,GAASX,GAAcW,MAzN9Cb,GAAiB,mEA8NvBA,GAAkB3lB,KAAO,CACrBsa,SAAU,+BAGdqL,GAAkB9X,UAAY,CAC1B7C,QAAS8C,IAAAA,MAAgB,CAErBgW,mBAAoBhW,IAAAA,OACpB8X,kBAAmB9X,IAAAA,MAAgB,CAC/B6V,WAAY7V,IAAAA,QAEhBlK,UAAWkK,IAAAA,OACX,SAAUA,IAAAA,KACV4M,kBAAmB5M,IAAAA,KACnB,SAAUA,IAAAA,OACV,WAAYA,IAAAA,MAAgB,CACxB9P,KAAM8P,IAAAA,OACN,OAAQA,IAAAA,OACR,QAASA,IAAAA,SAEb,eAAgBA,IAAAA,KAChBxF,KAAMwF,IAAAA,OACN+Q,aAAc/Q,IAAAA,MAAgB,CAC1BoI,KAAMpI,IAAAA,OACNlQ,GAAIkQ,IAAAA,OACJiR,aAAcjR,IAAAA,SAElB8V,SAAU9V,IAAAA,OACViD,SAAUjD,IAAAA,OACVwM,SAAUxM,IAAAA,MAAgB,CACtB,UAAWA,IAAAA,OAEfsB,QAAStB,IAAAA,MAAgB,CACrBtF,GAAIsF,IAAAA,OACJwC,YAAaxC,IAAAA,OACb+W,WAAY/W,IAAAA,MAAgB,CACxB,QAASA,IAAAA,SAEbwP,2BAA4BxP,IAAAA,OAC5B,WAAYA,IAAAA,KACZyO,MAAOzO,IAAAA,MAAgB,CACnB,gBAAiBA,IAAAA,KACjB2O,KAAM3O,IAAAA,QACFA,IAAAA,MAAgB,CACZ,QAASA,IAAAA,OACT,OAAQA,IAAAA,cAKxB,eAAgBA,IAAAA,OAChB5F,KAAM4F,IAAAA,MAAgB,CAClBxF,KAAMwF,IAAAA,OACN,MAAOA,IAAAA,SAEX6H,QAAS7H,IAAAA,MAAgB,CACrB4P,cAAe5P,IAAAA,MAAgB,CAC3B6P,MAAO7P,IAAAA,QACHA,IAAAA,MAAgB,CACZ,UAAWA,IAAAA,OACXxF,KAAMwF,IAAAA,OACNgQ,KAAMhQ,IAAAA,MAAgB,CAClB7L,MAAO6L,IAAAA,gBAM3B,WAAYA,IAAAA,MAAgB,CACxB9P,KAAM8P,IAAAA,OACN,OAAQA,IAAAA,OACR,QAASA,IAAAA,SAEbmQ,QAASnQ,IAAAA,MAAgB,CACrBtF,GAAIsF,IAAAA,OACJ,aAAcA,IAAAA,OAElBqR,QAASrR,IAAAA,MAAgB,CACrBuR,KAAMvR,IAAAA,OACNwR,IAAKxR,IAAAA,SAET,cAAeA,IAAAA,KACf9P,KAAM8P,IAAAA,OACN4V,gBAAiB5V,IAAAA,MAAgB,CAC7BkW,eAAgBlW,IAAAA,SAEpB+V,YAAa/V,IAAAA,MAAgB,CACzB9R,MAAO8R,IAAAA,OACP7R,YAAa6R,IAAAA,SAEjByM,qBAAsBzM,IAAAA,OACtBgI,qBAAsBhI,IAAAA,OACtB8R,eAAgB9R,IAAAA,OAChB6M,QAAS7M,IAAAA,OACT6V,WAAY7V,IAAAA,SAEhBjD,cAAeiD,IAAAA,MAAgB7N,OAAO8N,OAAOC,GAAAA,IAC7C8G,cAAehH,IAAAA,OACf0T,aAAc1T,IAAAA,OACd3D,KAAM2D,IAAAA,KAAAA,WACN9N,KAAM8N,IAAAA,OACN7P,OAAQ6P,IAAAA,MAGZ,UAAexN,EAAAA,EAAAA,GAAYqlB,K;;;8FChX3B,MAgBA,EAhByB,CAACvW,EAAyB+N,KAC/C,IAAI9N,EAAc,aAAYD,EAAQ5G,KAEtC,GAAI4G,EAAQyV,YAAc1H,EAAa,CAEX,MAAxB,GADA9N,GAAc,IACVD,EAAQyV,WACRxV,GAAe,OAAwB,QAApB,EAAED,EAAQyV,kBAAU,aAAlB,EAAqB,WAE1C1H,IACA9N,GAAc,yDAItB,OAAOA","sources":["xhh/./webapp-static/lux/components/BrandedSnippet/BrandedSnippetContext.tsx","xhh/./webapp-static/lux/components/Debug/SearchDebug.tsx","xhh/./webapp-static/lux/components/EmployerHHRatingIcon/index.tsx","xhh/./webapp-static/lux/components/EmployerHHRatingIcon/PrepareEmployerHHRating.tsx","xhh/./webapp-static/lux/components/HrBrandIcon/HrBrandContent.tsx","xhh/./webapp-static/lux/components/HrBrandIcon/index.tsx","webpack://xhh/./webapp-static/lux/components/Label/styles.less?1f32","xhh/./webapp-static/lux/components/Label/index.tsx","xhh/./webapp-static/lux/components/RelatedVacancies/relatedVacanciesTypes.ts","webpack://xhh/./webapp-static/lux/components/ResumeCard/Divider/index.less?61ac","xhh/./webapp-static/lux/components/ResumeCard/Divider/index.tsx","xhh/./webapp-static/lux/components/VacancyResponsePopup/CountriesProfileVisibilityAgreementPopup.tsx","xhh/./webapp-static/lux/components/VacancyResponsePopup/RelocationWarningPopup.tsx","webpack://xhh/./webapp-static/lux/components/VacancyResponsePopup/BottomSheet/resume-delivered.less?71bc","xhh/./webapp-static/lux/components/VacancyResponsePopup/BottomSheet/ResumeDeliveredForm.tsx","webpack://xhh/./webapp-static/lux/components/VacancyResponsePopup/BottomSheet/resume-with-photo.less?5c7f","xhh/./webapp-static/lux/components/VacancyResponsePopup/BottomSheet/ResumeWithPhoto.tsx","webpack://xhh/./webapp-static/lux/components/VacancyResponsePopup/BottomSheet/resume-select-form.less?1803","xhh/./webapp-static/lux/components/VacancyResponsePopup/BottomSheet/ResumeSelectForm.tsx","xhh/./webapp-static/lux/components/VacancyResponsePopup/BottomSheet/responseSteps.ts","webpack://xhh/./webapp-static/lux/components/VacancyResponsePopup/BottomSheet/header.less?169c","xhh/./webapp-static/lux/components/VacancyResponsePopup/BottomSheet/Header.tsx","xhh/./webapp-static/lux/components/VacancyResponsePopup/PopupHeader.tsx","xhh/./webapp-static/lux/components/VacancyResponsePopup/Popup.jsx","xhh/./webapp-static/lux/components/VacancyResponsePopup/index.tsx","webpack://xhh/./webapp-static/lux/components/BrandedSnippet/branded-snippet.less?c3f4","xhh/./webapp-static/lux/components/BrandedSnippet/BrandedSnippet.tsx","xhh/./webapp-static/lux/modules/sendAdvAnalytics.ts","webpack://xhh/./webapp-static/lux/components/VacancySearchItem/serp-item.less?61a3","xhh/./webapp-static/lux/components/VacancySearchItem/BlacklistButton.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/Favorite.jsx","xhh/./webapp-static/lux/components/VacancySearchItem/Actions.tsx","webpack://xhh/./webapp-static/lux/components/VacancySearchItem/serp-item-controls.less?a04b","xhh/./webapp-static/lux/components/VacancySearchItem/ResponseButton.jsx","xhh/./webapp-static/lux/components/VacancySearchItem/Contacts.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/ShowContactsButton.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/VacancyCardButtons.tsx","xhh/./webapp-static/lux/components/BrandedSnippet/BrandedSnippetInject.tsx","xhh/./webapp-static/lux/components/VacanciesOfTheDay/hooks/useVacancyOfTheDayViewAnalytics.ts","xhh/./webapp-static/lux/components/VacancyPercentIndicator/index.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/Advertising.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/Logo.tsx","xhh/./webapp-static/lux/models/vacancySearch/vacancySearchItem.types.ts","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/AdaptiveHSpacing.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/CompanyName.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/HRBrand.tsx","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/VacancyAddress.tsx","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/VacancyCompany.tsx","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/VacancyCompensation.tsx","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/VacancyDescription.tsx","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/VacancyExperience.tsx","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/VacancyIsEmployerOnline.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/Labels/useVacancyLabels.ts","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/VacancyLabels.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/LinkToVacancy.tsx","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/VacancyName.tsx","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/VacancyWatchersCount.tsx","xhh/./webapp-static/lux/components/VacancySearchItemRedesign/index.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/ActivityAndAdv.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/Address.jsx","xhh/./webapp-static/lux/components/VacancySearchItem/Company.jsx","xhh/./webapp-static/lux/components/VacancySearchItem/Compensation.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/Insider.jsx","webpack://xhh/./webapp-static/lux/components/VacancySearchItem/Labels/vacancy-labels.less?b337","xhh/./webapp-static/lux/components/VacancySearchItem/Labels/index.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/Name.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/Snippet.tsx","webpack://xhh/./webapp-static/lux/components/VacancySearchItem/users-online.less?d8df","xhh/./webapp-static/lux/components/VacancySearchItem/UsersOnline.tsx","webpack://xhh/./webapp-static/lux/components/VacancySearchItem/work-experience.less?b709","xhh/./webapp-static/lux/components/VacancySearchItem/WorkExperience.tsx","xhh/./webapp-static/lux/components/VacancySearchItem/index.jsx","xhh/./webapp-static/lux/hooks/companies/useGetCompanyUrl.ts"],"sourcesContent":["// tempexp_27388_file\nimport { createContext, useContext } from 'react';\n\nimport { VacancySearchItem } from 'lux/models/vacancySearch/vacancySearchItem.types';\n\nimport { SnippetBranding } from 'lux/components/BrandedSnippet/brandedSnippet.types';\n\nexport interface BrandedSnippetContextValue {\n    getBranding: (vacancySearchItem: VacancySearchItem) => SnippetBranding | undefined;\n}\n\nconst initialValue = {\n    getBranding: () => undefined,\n};\n\nconst BrandedSnippetContext = createContext<BrandedSnippetContextValue>(initialValue);\n\nexport const useBrandedSnippetContext = (): BrandedSnippetContextValue => useContext(BrandedSnippetContext);\n\nexport default BrandedSnippetContext;\n","import { FC } from 'react';\nimport classnames from 'classnames';\n\nimport Button, { ButtonScale, ButtonKind, ButtonAppearance } from 'bloko/blocks/button';\nimport Link, { LinkAppearance } from 'bloko/blocks/link';\nimport VSpacing from 'bloko/blocks/vSpacing';\n\nimport useToggleState from 'lux/hooks/useToggleState';\n\ninterface Props {\n    score: number;\n    explanation: string;\n}\n\nconst SearchDebug: FC<Props> = ({ score, explanation }) => {\n    const [visible, toggleVisible] = useToggleState(false);\n    if (!score) {\n        return null;\n    }\n    if (!explanation) {\n        return (\n            <>\n                <VSpacing base={4} />\n                <div>{`score = ${score}`}</div>\n            </>\n        );\n    }\n    return (\n        <div>\n            <VSpacing base={4} />\n            <Link appearance={LinkAppearance.Pseudo} onClick={toggleVisible}>{`score = ${score}`}</Link>\n            <div className={classnames({ 'g-hidden': !visible })}>\n                <VSpacing base={4} />\n                <Button\n                    scale={ButtonScale.Small}\n                    kind={ButtonKind.Primary}\n                    appearance={ButtonAppearance.Outlined}\n                    onClick={() => {\n                        void navigator.clipboard.writeText(explanation);\n                    }}\n                >\n                    Copy\n                </Button>\n                <VSpacing base={2} />\n                <pre className=\"search-result-debug\" data-qa=\"search-result-debug\">\n                    {explanation}\n                </pre>\n            </div>\n        </div>\n    );\n};\n\nexport default SearchDebug;\n","import { FC } from 'react';\nimport classnames from 'classnames';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport HoverTip, { TipPlacement, TipLayer } from 'bloko/blocks/drop/Tip/HoverTip';\nimport { Service, ServiceView, ServiceScale, ServiceKind } from 'bloko/blocks/icon';\n\nimport { Badge } from 'lux/models/vacancyView.types';\n\ntype Props = {\n    employerHHRating: Badge;\n    size?: ServiceScale.Small | ServiceScale.Medium;\n    dataQa: string;\n    isRedesignedSerp?: boolean;\n    isRedesignedVacancy?: boolean;\n    isVacancySnippetRedesignExp?: boolean;\n};\n\nconst EmployerHHRatingIcon: FC<Props> = ({\n    employerHHRating,\n    size = ServiceScale.Small,\n    dataQa,\n    isRedesignedSerp,\n    isRedesignedVacancy,\n    isVacancySnippetRedesignExp,\n}) => (\n    <Link\n        to={employerHHRating.url}\n        target=\"_blank\"\n        rel=\"nofollow noindex\"\n        data-qa={`${dataQa}${employerHHRating.type}` || ''}\n    >\n        <HoverTip\n            render={() => employerHHRating.description}\n            placement={TipPlacement.Top}\n            layer={TipLayer.Overlay}\n            host={!process.env.LUX_SERVER ? document.body : null}\n        >\n            {isRedesignedSerp || isRedesignedVacancy ? (\n                <span\n                    className={classnames(\n                        isVacancySnippetRedesignExp\n                            ? 'vacancy-serp-bage-hr-rating_snippet-redesign'\n                            : 'vacancy-serp-bage-hr-rating'\n                    )}\n                />\n            ) : (\n                <Service view={ServiceView.EmployersRating} kind={ServiceKind.Color} scale={size} />\n            )}\n        </HoverTip>\n    </Link>\n);\n\nexport default EmployerHHRatingIcon;\n","import { FC } from 'react';\n\nimport { ServiceScale } from 'bloko/blocks/icon';\n\nimport { Badge } from 'lux/models/vacancyView.types';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport EmployerHHRatingIcon from 'lux/components/EmployerHHRatingIcon';\n\nconst EMPLOYER_HH_RATING_BADGE = 'employer-hh-rating';\nexport const getEmployerHHRatingBadge = (badges?: { badge: Badge[] }): Badge | undefined =>\n    badges?.badge?.filter((badgeItem) => badgeItem.type === EMPLOYER_HH_RATING_BADGE)[0];\n\ntype Props = {\n    badge: Badge;\n    isVacancyPage?: boolean;\n    size?: ServiceScale.Small | ServiceScale.Medium;\n    dataQa: string;\n    isRedesignedSerp?: boolean;\n    isRedesignedVacancy?: boolean;\n    isVacancySnippetRedesignExp?: boolean;\n};\n\nconst PrepareEmployerHHRating: FC<Props> = ({ badge, isVacancyPage, ...anyProps }) => {\n    const userType = useSelector((state) => state.userType);\n\n    const utmCampaign = isVacancyPage ? 'badge' : 'icon';\n    const urlParams = `?utm_source=hh.ru&utm_medium=referral&utm_campaign=${utmCampaign}&utm_term=${userType}`;\n    const data = {\n        type: badge.type,\n        url: `${badge.url}${urlParams}`,\n        description: badge.description,\n    };\n    return <EmployerHHRatingIcon employerHHRating={data} {...anyProps} />;\n};\n\nexport default PrepareEmployerHHRating;\n","import { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\n\ntype Props = {\n    hrBrand: object;\n};\n\nconst TrlKeys = {\n    winners: 'employer.page.hrbrand.winner',\n    nominees: 'employer.page.hrbrand.nominee',\n};\n\nconst HrBrandContent: TranslatedComponent<Props> = ({ hrBrand, trls }) => {\n    if (!hrBrand) {\n        return null;\n    }\n    return (\n        <>\n            {Object.keys(hrBrand).map((hrBrandType) => {\n                const year = hrBrand[hrBrandType]['@year'] as string;\n                return <p key={hrBrandType}>{`${trls[TrlKeys[hrBrandType]]}${year ? ` ${year}` : ''}`}</p>;\n            })}\n        </>\n    );\n};\nexport default translation(HrBrandContent);\n","import { FC } from 'react';\nimport classnames from 'classnames';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport HoverTip, { TipPlacement, TipLayer } from 'bloko/blocks/drop/Tip/HoverTip';\nimport { Service, ServiceKind, ServiceView, ServiceScale } from 'bloko/blocks/icon';\n\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport HrBrandContent from 'lux/components/HrBrandIcon/HrBrandContent';\n\ntype Props = {\n    hrBrand: {\n        nominees?: {\n            '@url': string;\n        };\n        winners?: {\n            '@url': string;\n        };\n    };\n    size?: ServiceScale.Small | ServiceScale.Medium;\n    dataQa: string;\n    isRedesignedIcon?: boolean;\n    isVacancyPage?: boolean;\n    isVacancySnippetRedesignExp?: boolean;\n};\n\nconst HrBrandIcon: FC<Props> = ({\n    hrBrand,\n    size = ServiceScale.Medium,\n    dataQa,\n    isRedesignedIcon,\n    isVacancyPage,\n    isVacancySnippetRedesignExp,\n}) => {\n    const userType = useSelector((state) => state.userType);\n    if (!hrBrand.nominees && !hrBrand.winners) {\n        return null;\n    }\n    const utmCampaign = isVacancyPage ? 'badge' : 'icon';\n    const urlParams = `?utm_source=hh.ru&utm_medium=referral&utm_campaign=${utmCampaign}&utm_term=${userType}`;\n\n    const dataQaSpecific = dataQa\n        ? Object.keys(hrBrand)\n              .map((hrBrandType) => {\n                  return `${dataQa}_${hrBrandType}`;\n              })\n              .join(' ')\n        : '';\n\n    const url = `${hrBrand?.nominees?.['@url'] || hrBrand?.winners?.['@url'] || ''}${urlParams}`;\n\n    return (\n        <Link to={url} target=\"_blank\" rel=\"nofollow noindex\" data-qa={dataQa ? `${dataQa} ${dataQaSpecific}` : ''}>\n            <HoverTip\n                render={() => <HrBrandContent hrBrand={hrBrand} />}\n                placement={TipPlacement.Top}\n                layer={TipLayer.Overlay}\n                host={!process.env.LUX_SERVER ? document.body : null}\n            >\n                {isRedesignedIcon ? (\n                    <span\n                        className={classnames(\n                            isVacancySnippetRedesignExp\n                                ? 'vacancy-serp-bage-hr-brand_snippet-redesign'\n                                : 'vacancy-serp-bage-hr-brand'\n                        )}\n                    />\n                ) : (\n                    <Service view={ServiceView.HrBrand} scale={size} kind={ServiceKind.Color} />\n                )}\n            </HoverTip>\n        </Link>\n    );\n};\nexport default HrBrandIcon;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"label--rWRLMsbliNlu_OMkM_D3\",\"labelWithCircle\":\"label_with-circle--qUbrjeKFKFqvGwlbOkdg\",\"labelCircle\":\"label-circle--nK1wo1KmE074wqX8dQmi\",\"labelCircleLightGreen\":\"label-circle_light-green--BGefDZ43Hf0oEj4Pzcrl\",\"labelGreen\":\"label_green--KM8bMG2t0RumVGyW1TEW\",\"labelLightGreen\":\"label_light-green--oMhc5Pq9VsjySzrrLOTh\",\"labelOrange\":\"label_orange--ONFZ8PVcGrr91vdmXsaN\",\"labelLightOrange\":\"label_light-orange--uc1PHQJZZJ8LlZOYIzvA\",\"labelYellow\":\"label_yellow--pO5w1afsmpjnio8Vr2_s\",\"labelLightYellow\":\"label_light-yellow--OKtnVKnCAhia8zFMCe68\",\"labelLightBlue\":\"label_light-blue--tDunPYySNCmUTNM7a1jL\",\"labelGray\":\"label_gray--OY3Bskja_5q97l88SOo0\",\"labelViolet\":\"label_violet--ELEsU9Z7lJKY0mBnQ8Rp\",\"labelLightViolet\":\"label_light-violet--mfqJrKkFOboQUFsgaJp2\",\"labelLightRed\":\"label_light-red--H9FhJPnuPPjZ9yJvHx0s\"};","import { ComponentPropsWithoutRef } from 'react';\nimport classnames from 'classnames';\n\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\n\nimport styles from './styles.less';\n\nexport enum LabelColor {\n    Green = 'green',\n    LightGreen = 'lightGreen',\n    Orange = 'orange',\n    LightOrange = 'lightOrange',\n    Yellow = 'yellow',\n    LightYellow = 'lightYellow',\n    Gray = 'gray',\n    Violet = 'violet',\n    LightViolet = 'lightViolet',\n    LightRed = 'lightRed',\n    LightBlue = 'lightBlue',\n}\n\nexport enum LabelType {\n    CustomContent = 'customContent',\n    Popular = 'popular',\n    Recommend = 'recommend',\n    New = 'new',\n    SkillsPercentage = 'skillsPercentage',\n    Active = 'active',\n    NoMoney = 'noMoney',\n    Pause = 'pause',\n    LimitReached = 'limitReached',\n    NoResume = 'no-resume',\n    BeFirst = 'be-first',\n    RemoteWorkSchedule = 'remote-work-schedule',\n}\n\nconst TrlKeys = {\n    [LabelType.CustomContent]: '',\n    [LabelType.Popular]: 'label.popular',\n    [LabelType.Recommend]: 'label.recommend',\n    [LabelType.New]: 'label.new',\n    [LabelType.SkillsPercentage]: 'label.skillsPercentage',\n    [LabelType.Active]: 'label.active',\n    [LabelType.Pause]: 'label.pause',\n    [LabelType.NoMoney]: 'label.no.money',\n    [LabelType.LimitReached]: 'label.limitReached',\n    [LabelType.NoResume]: 'label.noResume',\n    [LabelType.BeFirst]: 'label.fewResponses',\n    [LabelType.RemoteWorkSchedule]: 'label.workSchedule.remote',\n};\n\nconst defaultLabelColors = {\n    [LabelType.CustomContent]: LabelColor.Green,\n    [LabelType.Popular]: LabelColor.Green,\n    [LabelType.Recommend]: LabelColor.Green,\n    [LabelType.New]: LabelColor.LightYellow,\n    [LabelType.SkillsPercentage]: LabelColor.LightGreen,\n    [LabelType.Active]: LabelColor.Green,\n    [LabelType.Pause]: LabelColor.Yellow,\n    [LabelType.NoMoney]: LabelColor.Gray,\n    [LabelType.LimitReached]: LabelColor.Gray,\n    [LabelType.NoResume]: LabelColor.LightYellow,\n    [LabelType.BeFirst]: LabelColor.LightGreen,\n    [LabelType.RemoteWorkSchedule]: LabelColor.LightViolet,\n};\n\ninterface LabelProps extends ComponentPropsWithoutRef<'span'> {\n    type: LabelType;\n    color?: LabelColor;\n    withCircle?: boolean;\n    Content?: React.ReactNode;\n    dataQa?: string;\n}\n\n/** Метка с предустановленным текстом и дефолтным цветом\n * Для эксперимента skills_matching_c добавлена возможность выводить пользовательский текст с дополнительным компонентом (иконка)\n */\nconst Label: TranslatedComponent<LabelProps> = ({ trls, color, type, withCircle, Content, dataQa, ...spanProps }) => {\n    const labelColor = color || defaultLabelColors[type];\n    return (\n        <span\n            className={classnames(styles.label, {\n                [styles.labelWithCircle]: !!withCircle,\n                [styles.labelGreen]: labelColor === LabelColor.Green,\n                [styles.labelLightGreen]: labelColor === LabelColor.LightGreen,\n                [styles.labelOrange]: labelColor === LabelColor.Orange,\n                [styles.labelLightOrange]: labelColor === LabelColor.LightOrange,\n                [styles.labelYellow]: labelColor === LabelColor.Yellow,\n                [styles.labelLightYellow]: labelColor === LabelColor.LightYellow,\n                [styles.labelGray]: labelColor === LabelColor.Gray,\n                [styles.labelViolet]: labelColor === LabelColor.Violet,\n                [styles.labelLightViolet]: labelColor === LabelColor.LightViolet,\n                [styles.labelLightRed]: labelColor === LabelColor.LightRed,\n                [styles.labelLightBlue]: labelColor === LabelColor.LightBlue,\n            })}\n            data-qa={dataQa}\n            {...spanProps}\n        >\n            {withCircle && (\n                <span\n                    className={classnames(styles.labelCircle, {\n                        [styles.labelCircleLightGreen]: labelColor === LabelColor.LightGreen,\n                    })}\n                />\n            )}\n            {Content || trls[TrlKeys[type]]}\n        </span>\n    );\n};\n\nexport default translation(Label);\n","export enum RelatedVacanciesType {\n    Similar = 'similar',\n    Suitable = 'suitable',\n}\n\nexport const RELATED_VACANCIES_TYPES = {\n    SIMILAR: RelatedVacanciesType.Similar,\n    SUITABLE: RelatedVacanciesType.Suitable,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"divider\":\"divider--wUQCLRiI2ZjZNVeIINvs\"};","import { FC } from 'react';\n\nimport HSpacing from 'bloko/blocks/hSpacing';\n\nimport { DOT } from 'lux/modules/symbols';\n\nimport styles from './index.less';\n\nconst Divider: FC = () => {\n    return (\n        <>\n            <HSpacing base={2} />\n            <span className={styles.divider}>{DOT}</span>\n            <HSpacing base={2} />\n        </>\n    );\n};\n\nexport default Divider;\n","import { useDispatch } from 'react-redux';\n\nimport { makeSetStoreField } from '@hh.ru/redux-create-reducer';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport BlokoLink from 'bloko/blocks/link';\nimport Modal, { ModalTitle, ModalHeader, ModalContent, ModalFooter } from 'bloko/blocks/modal';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport { APPLICANT_RESPONSE_ABORT } from 'lux/components/Notifications/VacancyResponseAbort';\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\nimport addNotification from 'lux/requests/notifications/addNotification';\n\nconst profileVisibilityAgreementAction = makeSetStoreField('countriesProfileVisibilityAgreement');\n\nconst ARTICLES = {\n    uzbekistan: {\n        conditions: 'https://rabota.by/article/31423',\n        rules: 'https://rabota.by/article/31423#clause1',\n    },\n    common: {\n        conditions: 'https://rabota.by/article/31422',\n        rules: 'https://rabota.by/article/31422#clause1',\n    },\n};\n\nconst TrlKeys = {\n    title: {\n        common: 'otherCountriesProfileVisibilityAgreement.title.common',\n        uzbekistan: 'otherCountriesProfileVisibilityAgreement.title.uzbekistan',\n    },\n    description: {\n        common: 'otherCountriesProfileVisibilityAgreement.description.common',\n        uzbekistan: 'otherCountriesProfileVisibilityAgreement.description.uzbekistan',\n    },\n    linkConditions: 'otherCountriesProfileVisibilityAgreement.link.conditions',\n    linkRights: 'otherCountriesProfileVisibilityAgreement.link.rights',\n    agree: 'otherCountriesProfileVisibilityAgreement.agree',\n};\n\ninterface Props {\n    vacancyId: number;\n}\n\nconst CountriesProfileVisibilityAgreementPopup: TranslatedComponent<Props> = ({ vacancyId, trls }) => {\n    const dispatch = useDispatch();\n    const countriesProfileVisibilityAgreement = useSelector((state) => state.countriesProfileVisibilityAgreement);\n\n    if (countriesProfileVisibilityAgreement?.vacancyId !== vacancyId) {\n        return null;\n    }\n\n    const dismiss = () => {\n        dispatch(addNotification(APPLICANT_RESPONSE_ABORT));\n        dispatch(\n            profileVisibilityAgreementAction({\n                ...countriesProfileVisibilityAgreement,\n                confirmed: false,\n                show: false,\n            })\n        );\n    };\n    const confirm = () => {\n        dispatch(\n            profileVisibilityAgreementAction({\n                ...countriesProfileVisibilityAgreement,\n                confirmed: true,\n                show: false,\n            })\n        );\n    };\n\n    const isCommon = countriesProfileVisibilityAgreement.countryType === 'common';\n    const titleTrl = isCommon ? TrlKeys.title.common : TrlKeys.title.uzbekistan;\n    const descriptionTrl = isCommon ? TrlKeys.description.common : TrlKeys.description.uzbekistan;\n    const articles = isCommon ? ARTICLES.common : ARTICLES.uzbekistan;\n\n    return (\n        <Modal visible={countriesProfileVisibilityAgreement?.show} onClose={dismiss} useBottomSheet>\n            <ModalHeader>\n                <ModalTitle data-qa=\"countries-profile-visibility-popup-title\">{trls[titleTrl]}</ModalTitle>\n            </ModalHeader>\n            <ModalContent>\n                <div className=\"respond-popup__notice\" data-qa=\"countries-profile-visibility-popup-text\">\n                    <p>\n                        {formatToReactComponent(trls[descriptionTrl], {\n                            '{0}': (\n                                <BlokoLink disableVisited Element={Link} to={articles.conditions} target=\"_blank\">\n                                    {trls[TrlKeys.linkConditions]}\n                                </BlokoLink>\n                            ),\n                            '{1}': (\n                                <BlokoLink disableVisited Element={Link} to={articles.rules} target=\"_blank\">\n                                    {trls[TrlKeys.linkRights]}\n                                </BlokoLink>\n                            ),\n                        })}\n                    </p>\n                </div>\n            </ModalContent>\n            <ModalFooter>\n                <Button\n                    kind={ButtonKind.Primary}\n                    data-qa=\"countries-profile-visibility-popup-confirm\"\n                    onClick={confirm}\n                >\n                    {trls[TrlKeys.agree]}\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nexport default translation(CountriesProfileVisibilityAgreementPopup);\n","import { useDispatch } from 'react-redux';\n\nimport { makeSetStoreField } from '@hh.ru/redux-create-reducer';\nimport Button, { ButtonKind, ButtonScale } from 'bloko/blocks/button';\nimport { FormSpacer } from 'bloko/blocks/form';\nimport Link, { LinkAppearance } from 'bloko/blocks/link';\nimport Modal, { ModalTitle, ModalHeader, ModalContent, ModalFooter } from 'bloko/blocks/modal';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst relocationWarningAction = makeSetStoreField('relocationWarning');\n\nconst TrlKeys = {\n    title: 'vacancy.respond.popup.title',\n    country: 'vacancy.respond.popup.country',\n    notice: 'vacancy.respond.popup.notice',\n    confirm: 'vacancy.respond.popup.force',\n    abort: 'vacancy.respond.popup.not',\n};\n\ninterface RelocationWarningPopupProps {\n    vacancyId: number;\n}\n\nconst RelocationWarningPopup: TranslatedComponent<RelocationWarningPopupProps> = ({ vacancyId, trls }) => {\n    const dispatch = useDispatch();\n    const relocationWarning = useSelector((state) => state.relocationWarning);\n\n    if (relocationWarning?.vacancyId !== vacancyId) {\n        return null;\n    }\n\n    const dismiss = () => dispatch(relocationWarningAction({ ...relocationWarning, confirmed: false, show: false }));\n    const confirm = () => dispatch(relocationWarningAction({ ...relocationWarning, confirmed: true, show: false }));\n\n    const regionTrl = relocationWarning.regionTrl;\n\n    return (\n        <Modal visible={relocationWarning?.show} onClose={dismiss} useBottomSheet>\n            <ModalHeader>\n                <ModalTitle data-qa=\"relocation-warning-title\">{trls[TrlKeys.title]}</ModalTitle>\n            </ModalHeader>\n            <ModalContent>\n                <div className=\"respond-popup__notice respond-popup__notice_spaced\" data-qa=\"relocation-warning-text\">\n                    <p>\n                        {trls[TrlKeys.country]}\n                        {regionTrl && `${regionTrl}.`}\n                    </p>\n                    <p>{trls[TrlKeys.notice]}</p>\n                </div>\n            </ModalContent>\n            <ModalFooter>\n                <Button\n                    kind={ButtonKind.Success}\n                    scale={ButtonScale.Small}\n                    data-qa=\"relocation-warning-confirm\"\n                    onClick={confirm}\n                >\n                    {trls[TrlKeys.confirm]}\n                </Button>\n                <FormSpacer>\n                    <Link appearance={LinkAppearance.Pseudo} data-qa=\"relocation-warning-abort\" onClick={dismiss}>\n                        {trls[TrlKeys.abort]}\n                    </Link>\n                </FormSpacer>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nexport default translation(RelocationWarningPopup);\n","// extracted by mini-css-extract-plugin\nexport default {\"blokoModalNoScroll\":\"bloko-modal-no-scroll--VS2gOnjo25DSkUrJTDWc\",\"blokoModalNoScrollIos\":\"bloko-modal-no-scroll_ios--yzCA0sJa0WfZT_xXbSel\",\"blokoModalOverlay\":\"bloko-modal-overlay--go5Fe1FTMulhEIQwByKs\",\"blokoModalOverlayVisible\":\"bloko-modal-overlay_visible--_hchp5Z_GL0NfVKDOHm3\",\"blokoModalOverlayBottomSheet\":\"bloko-modal-overlay__bottom-sheet--F5bDAQfOXRjLahB3qqlE\",\"blokoModalContainer\":\"bloko-modal-container--JLrl6ORQT2AvUJyrlxW1\",\"blokoModalContainerVisible\":\"bloko-modal-container_visible--elEz6penPdiuj_u_18Wo\",\"blokoModal\":\"bloko-modal--slPp4GoLe2Q3o5XuZYKy\",\"blokoModalCloseButton\":\"bloko-modal-close-button--EVXd_q62DFUSTmlTNxB5\",\"blokoModalCloseButtonHidden\":\"bloko-modal-close-button_hidden--MPIfmqAbOO_mLVFFkdab\",\"blokoModalHeader\":\"bloko-modal-header--bNE1n3AslL4iJm_MTBam\",\"blokoModalContent\":\"bloko-modal-content--hnWRqKfpO9SgjChpAwJi\",\"blokoModalContentNoScroll\":\"bloko-modal-content_no-scroll--n2_qJorFTUxYc3_Y78or\",\"blokoModalContentScrollable\":\"bloko-modal-content-scrollable--ea3JQqtSRHgCjyWyV3u8\",\"blokoModalContentFader\":\"bloko-modal-content-fader--vXojEcsaRnssL9PYhApp\",\"blokoModalContentFaderVisible\":\"bloko-modal-content-fader_visible--GkEmNzZy2KSynXTsO1dn\",\"blokoModalContentFaderBottom\":\"bloko-modal-content-fader-bottom--bZ2vPgejquJ9E8aBRaTx\",\"blokoModalContentFaderBottomVisible\":\"bloko-modal-content-fader-bottom_visible--cOQGYbhsiMUX_EzYQgDi\",\"blokoModalFooter\":\"bloko-modal-footer--iloHNAuK1yg4Ppyon3aW\",\"blokoModalFooterLeft\":\"bloko-modal-footer_left--IpmyAgmTw72VKQKwykNQ\",\"blokoModalTitle\":\"bloko-modal-title--A4J6hxIZE7zNo2Hvs_9V\",\"blokoModalError\":\"bloko-modal-error--Yjsgr0z5QTwKkcrpOt73\",\"blokoModalErrorHidden\":\"bloko-modal-error_hidden--UAU6IhwXc9aRE_w_z4n6\",\"blokoModalSwipe\":\"bloko-modal-swipe--RNTclVablFoziLYTDk7s\",\"blokoModalContainerBottomSheet\":\"bloko-modal-container_bottom-sheet--C7C1wNb7ECdtt_CFk8xR\",\"blokoModalBottomSheetFader\":\"bloko-modal-bottom-sheet-fader--i63dKIzZr8Rfnzqa_J1Q\",\"blokoModalBottomSheetFaderVisible\":\"bloko-modal-bottom-sheet-fader_visible--sTlrG6JwrJ1DPXznUxZE\",\"blokoModalHeaderOutlined\":\"bloko-modal-header_outlined--zVuO0PWhqnIffavXqHr_\",\"successInfo\":\"success-info--oZ1BH8mscs6vIkh1zsRW\",\"successIcon\":\"success-icon--qaTxcJXbaMjpmYfCjVYN\"};","import { useState } from 'react';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Button, { ButtonAppearance, ButtonKind } from 'bloko/blocks/button';\nimport { FormItem } from 'bloko/blocks/form';\nimport { ModalContent } from 'bloko/blocks/modal';\nimport Text, { TextImportance, TextSize } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format } from 'bloko/common/trl';\n\nimport CoverLetterForm from 'lux/components/Applicant/Response/CoverLetter/Form';\nimport translation from 'lux/components/translation';\n\nimport styles from './resume-delivered.less';\n\nconst TrlKeys = {\n    title: 'vacancy.responded.success.title',\n    responseStats: 'vacancy.view.notify.response.stats',\n    responseNoStats: 'vacancy.view.notify.response.noStats',\n    writeLtter: 'vacancy.response.letter.informer.writeButton',\n    sentLetterFrom: 'vacancy.response.letter.informer.sent.vacancy',\n    showResponse: 'vacancy.response.popup.showResponse',\n};\n\ninterface ResponseDataProps {\n    readPercent: number;\n    topicId: string;\n    hasResponseLetter: boolean;\n}\n\nconst ResumeDeliveredForm: TranslatedComponent<{\n    responseData: ResponseDataProps;\n    isLetterTextEmpty: boolean;\n    letterMaxLength: number;\n}> = ({ responseData: { readPercent, topicId, hasResponseLetter }, isLetterTextEmpty, letterMaxLength, trls }) => {\n    const [showLetterForm, setShowLetterForm] = useState(false);\n    const [isLetterFormSuccessSend, setLetterFormSuccessSend] = useState(false);\n\n    const renderCoverLetterForm = () =>\n        isLetterFormSuccessSend ? (\n            <Text size={TextSize.Large} importance={TextImportance.Secondary} italic>\n                {trls[TrlKeys.sentLetterFrom]}\n            </Text>\n        ) : (\n            <CoverLetterForm\n                setSuccessSend={setLetterFormSuccessSend}\n                letterMaxLength={letterMaxLength}\n                topicId={Number(topicId)}\n                submitButtonStretched\n            />\n        );\n    return (\n        <>\n            <ModalContent>\n                <div className={styles.successInfo}>\n                    <VSpacing base={6} />\n                    <div className={styles.successIcon} />\n                    <VSpacing base={5} />\n                    <Text size={TextSize.ExtraLarge} strong>\n                        {trls[TrlKeys.title]}\n                    </Text>\n                    <VSpacing base={2} />\n                    <Text size={TextSize.Large}>\n                        {readPercent > 0\n                            ? format(trls[TrlKeys.responseStats], {\n                                  '{0}': readPercent,\n                              })\n                            : trls[TrlKeys.responseNoStats]}\n                    </Text>\n                    <VSpacing base={5} />\n                    {isLetterTextEmpty && !hasResponseLetter && (\n                        <FormItem>\n                            {showLetterForm ? (\n                                renderCoverLetterForm()\n                            ) : (\n                                <Button kind={ButtonKind.Primary} stretched onClick={() => setShowLetterForm(true)}>\n                                    {trls[TrlKeys.writeLtter]}\n                                </Button>\n                            )}\n                        </FormItem>\n                    )}\n                    {topicId !== 'SPAM' && (\n                        <Button\n                            kind={ButtonKind.Primary}\n                            appearance={ButtonAppearance.Outlined}\n                            stretched\n                            Element={Link}\n                            to={`/applicant/negotiations/item?topicId=${topicId}`}\n                            target=\"_blank\"\n                        >\n                            {trls[TrlKeys.showResponse]}\n                        </Button>\n                    )}\n                </div>\n            </ModalContent>\n        </>\n    );\n};\n\nexport default translation(ResumeDeliveredForm);\n","// extracted by mini-css-extract-plugin\nexport default {\"resumeInfo\":\"resume-info--xibx_cguVIor9F84t6Gv\",\"photo\":\"photo--Y8hkZro71hZkFoP9_hZP\",\"photoEmpty\":\"photo_empty--sNhpTmSC24Sg1VzXbT9h\",\"avatar\":\"avatar--yi_adXTMYKgZ6FMJHO26\",\"avatarMale\":\"avatar_male--uieDjC3MzOA3zmR5yPB4\",\"avatarFemale\":\"avatar_female--kjda2nd4o2mzDthsbCSw\"};","import { FC, PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport HSpasing from 'bloko/blocks/hSpacing';\n\nimport CdnImg from 'lux/components/CdnImg';\nimport translation from 'lux/components/translation';\nimport { ResponseStatusResume } from 'lux/models/applicantVacancyResponseStatuses';\nimport { Gender } from 'lux/models/resume/resumeCommon.types';\n\nimport styles from './resume-with-photo.less';\n\nconst ResumeWithPhoto: FC<{ resume: ResponseStatusResume } & PropsWithChildren> = ({ resume, children }) => {\n    const photo = resume.photoUrls?.[0]?.preview;\n    const gender = resume.gender?.[0].string;\n    return (\n        <div className={styles.resumeInfo}>\n            {photo ? (\n                <CdnImg className={styles.photo} loading=\"lazy\" path={photo} alt=\"\" />\n            ) : (\n                <div className={classnames(styles.photo, styles.photoEmpty)}>\n                    <div\n                        className={classnames(styles.avatar, {\n                            [styles.avatarMale]: gender === Gender.Male,\n                            [styles.avatarFemale]: gender === Gender.Female,\n                        })}\n                    />\n                </div>\n            )}\n            <HSpasing base={4} />\n            <div>{children}</div>\n        </div>\n    );\n};\n\nexport default translation(ResumeWithPhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"horizontalDivider\":\"horizontal-divider--__7UhLLpngIBQM9pewZf\",\"divider\":\"divider--Vi4OpL3vEpgq_L3eYfPZ\"};","import { Fragment } from 'react';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport { H2Section } from 'bloko/blocks/header';\nimport { ModalContent, ModalHeader } from 'bloko/blocks/modal';\nimport Radio from 'bloko/blocks/radio';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport numberFormatter from 'bloko/common/numberFormatter';\n\nimport Currency from 'lux/components/Currency';\nimport translation from 'lux/components/translation';\nimport { ResponseStatusResume } from 'lux/models/applicantVacancyResponseStatuses';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nimport ResumeWithPhoto from 'lux/components/VacancyResponsePopup/BottomSheet/ResumeWithPhoto';\n\nimport styles from './resume-select-form.less';\n\nconst TrlKeys = {\n    resumes: 'vacancy.response.popup.resumes',\n    continue: 'employer.vacancy.create.button.continue',\n};\n\ninterface ResumeSelectFormProps {\n    selectedResume: ResponseStatusResume;\n    resumes: ResponseStatusResume[];\n    onClose: () => void;\n    setSelectedResume: (value: ResponseStatusResume) => void;\n    vacancyId: number;\n}\n\nconst ResumeSelectForm: TranslatedComponent<ResumeSelectFormProps> = ({\n    selectedResume,\n    resumes,\n    onClose,\n    setSelectedResume,\n    vacancyId,\n    trls,\n}) => {\n    const onResumeClick = (resume: ResponseStatusResume) => {\n        setSelectedResume(resume);\n        Analytics.sendHHEventButtonClick('response_resume_selected', {\n            resumeHash: resume._attributes.hash,\n            vacancyId,\n            resumesCount: resumes.length,\n        });\n        onClose();\n    };\n    return (\n        <>\n            <ModalHeader>\n                <H2Section>{trls[TrlKeys.resumes]}</H2Section>\n                <VSpacing base={2} />\n            </ModalHeader>\n            <ModalContent>\n                {resumes.map((resume, index) => {\n                    const area = resume.area?.[0]?.title;\n                    const salary = resume.salary?.[0];\n                    return (\n                        <Fragment key={resume.id}>\n                            <VSpacing base={index > 0 ? 4 : 2} />\n                            <Radio\n                                name=\"resume\"\n                                defaultChecked={resume.id === selectedResume.id}\n                                onClick={() => onResumeClick(resume)}\n                                reversed\n                            >\n                                <ResumeWithPhoto resume={resume}>\n                                    {resume.title?.[0]?.string}\n                                    <VSpacing base={1} />\n                                    <Text importance={TextImportance.Tertiary}>\n                                        {area}\n                                        {area && salary && ' • '}\n                                        {salary && (\n                                            <>\n                                                {numberFormatter.format(String(salary.amount), {\n                                                    groupSeparator: NON_BREAKING_SPACE,\n                                                })}\n                                                {NON_BREAKING_SPACE}\n                                                <Currency value={salary.currency} />\n                                            </>\n                                        )}\n                                    </Text>\n                                </ResumeWithPhoto>\n                            </Radio>\n                            <VSpacing base={4} />\n                            <div className={styles.divider} />\n                        </Fragment>\n                    );\n                })}\n            </ModalContent>\n        </>\n    );\n};\n\nexport default translation(ResumeSelectForm);\n","export enum ResponseStep {\n    Initial = 'Initial',\n    ResumeSelect = 'ResumeSelect',\n    Done = 'Done',\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"header--y3J93LfNUkIvjSisj2Ow\"};","import Analytics from '@hh.ru/analytics-js';\nimport Icon, { IconKind, IconScale, IconColor, IconView } from 'bloko/blocks/icon';\nimport { ModalHeader } from 'bloko/blocks/modal';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { ResponseStatusResume } from 'lux/models/applicantVacancyResponseStatuses';\n\nimport ResumeWithPhoto from 'lux/components/VacancyResponsePopup/BottomSheet/ResumeWithPhoto';\n\nimport styles from './header.less';\n\nconst TrlKeys = {\n    resumes: 'vacancy.response.popup.resumes',\n};\n\ninterface HeaderProps {\n    resume: ResponseStatusResume;\n    onClick: () => void;\n    allowClick: boolean;\n    vacancyId: number;\n}\n\nconst Header: TranslatedComponent<HeaderProps> = ({ resume, onClick, allowClick, vacancyId, trls }) => {\n    if (!resume) {\n        return null;\n    }\n    const handleClick = () => {\n        if (!allowClick) {\n            return;\n        }\n        Analytics.sendHHEventButtonClick('response_resume_selector_open', {\n            resumeHash: resume._attributes.hash,\n            vacancyId,\n        });\n        onClick();\n    };\n    return (\n        <ModalHeader outlined>\n            <VSpacing base={1} />\n            <div className={styles.header} onClick={handleClick}>\n                <ResumeWithPhoto resume={resume}>\n                    <Text strong>{trls[TrlKeys.resumes]}</Text>\n                    <VSpacing base={1} />\n                    {resume.title?.[0]?.string}\n                </ResumeWithPhoto>\n                {allowClick && (\n                    <Icon\n                        view={IconView.Chevron}\n                        initial={IconColor.Gray50}\n                        kind={IconKind.Right}\n                        scale={IconScale.Medium}\n                    />\n                )}\n            </div>\n        </ModalHeader>\n    );\n};\n\nexport default translation(Header);\n","import { ModalTitle, ModalHeader } from 'bloko/blocks/modal';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { ResponseStatusResume } from 'lux/models/applicantVacancyResponseStatuses';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport BottomSheetHeader from 'lux/components/VacancyResponsePopup/BottomSheet/Header';\n\nconst TrlKeys = {\n    default: 'vacancy.response.popup.title',\n    repeat: 'vacancy.response.popup.title.again',\n};\n\ninterface PopupHeaderProps {\n    isXs: boolean;\n    selectedResume: ResponseStatusResume;\n    onXsClick: () => void;\n    resumesCount: number;\n    vacancyId: number;\n}\n\nconst PopupHeader: TranslatedComponent<PopupHeaderProps> = ({\n    trls,\n    isXs,\n    selectedResume,\n    onXsClick,\n    resumesCount,\n    vacancyId,\n}) => {\n    const responseStatus = useSelector((state) => state.applicantVacancyResponseStatuses[vacancyId]);\n    const isFirstResponse = responseStatus.usedResumeIds.length === 0;\n    const vacancyName = responseStatus.shortVacancy.name;\n    return (\n        <>\n            {isXs ? (\n                <BottomSheetHeader\n                    resume={selectedResume}\n                    onClick={onXsClick}\n                    allowClick={resumesCount > 1}\n                    vacancyId={vacancyId}\n                />\n            ) : (\n                <ModalHeader outlined>\n                    <ModalTitle>{trls[isFirstResponse ? TrlKeys.default : TrlKeys.repeat]}</ModalTitle>\n                    <div>«{vacancyName}»</div>\n                </ModalHeader>\n            )}\n        </>\n    );\n};\n\nexport default translation(PopupHeader);\n","import { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button, { ButtonType, ButtonKind } from 'bloko/blocks/button';\nimport { FormSpacer } from 'bloko/blocks/form';\nimport Loading, { LoadingScale, LoadingColor } from 'bloko/blocks/loading';\nimport Modal, { ModalContent, ModalFooter, ModalError } from 'bloko/blocks/modal';\nimport VSpacing from 'bloko/blocks/vSpacing';\n\nimport VacancyResponseError from 'lux/components/VacancyResponseError';\nimport VacancyResponseForm, { getUserResumes } from 'lux/components/VacancyResponseForm';\nimport Source from 'lux/components/VacancySearchItem/Source';\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport ResumeDeliveredForm from 'lux/components/VacancyResponsePopup/BottomSheet/ResumeDeliveredForm';\nimport ResumeSelectForm from 'lux/components/VacancyResponsePopup/BottomSheet/ResumeSelectForm';\nimport { ResponseStep } from 'lux/components/VacancyResponsePopup/BottomSheet/responseSteps';\nimport PopupHeader from 'lux/components/VacancyResponsePopup/PopupHeader';\n\nconst Popup = ({ visible, onClose, vacancyId, vacancyBodyFooterNodeRef, trls, vacancySource, isXs }) => {\n    const [submitting, setSubmitting] = useState(false);\n    const responseStatus = useSelector((state) => state.applicantVacancyResponseStatuses[vacancyId]);\n    const isFirstResponse = responseStatus.usedResumeIds.length === 0;\n    const vacancy = responseStatus.shortVacancy;\n    const [responseErrorCode, setResponseErrorCode] = useState(null);\n    const responseImpossible = !responseStatus.unusedResumeIds.length;\n\n    const lastResumeHash = useSelector((state) => state.lastVacancyResponseInfo?.resumeHash);\n    const resumes = useMemo(() => getUserResumes(responseStatus), [responseStatus]);\n    const [selectedResume, setSelectedResume] = useState(\n        resumes.find((resume) => resume.hash === lastResumeHash) || resumes[0]\n    );\n    const [responseStep, setResponseStep] = useState(ResponseStep.Initial);\n    const [responseData, setResponseData] = useState({});\n    const postponedActions = useRef([]);\n\n    const handleModalClose = () => {\n        if (responseStep === ResponseStep.Done) {\n            setTimeout(() => postponedActions.current.forEach((action) => action()), 300);\n        }\n\n        onClose(true);\n        setResponseStep(ResponseStep.Initial);\n    };\n\n    const renderModalInner = (renderForm, formId, isLetterTextEmpty) => {\n        if (responseStep === ResponseStep.Initial) {\n            return (\n                <>\n                    <PopupHeader\n                        isXs={isXs}\n                        selectedResume={selectedResume}\n                        onXsClick={() => setResponseStep(ResponseStep.ResumeSelect)}\n                        resumesCount={resumes.length}\n                        vacancyId={vacancyId}\n                    />\n                    <ModalContent>{renderForm()}</ModalContent>\n                    <ModalError visible={!!responseErrorCode}>\n                        <div className=\"vacancy-response-popup-error\" data-qa-popup-error-code={responseErrorCode}>\n                            <VacancyResponseError\n                                code={responseErrorCode}\n                                letterMaxLength={responseStatus.letterMaxLength}\n                            />\n                        </div>\n                    </ModalError>\n                    <ModalFooter>\n                        {!isXs && (\n                            <>\n                                <Button onClick={() => onClose(true)} data-qa=\"vacancy-response-popup-close-button\">\n                                    {trls[Popup.trls.cancel]}\n                                </Button>\n                                <FormSpacer />\n                            </>\n                        )}\n                        <Button\n                            form={formId}\n                            type={ButtonType.Submit}\n                            kind={ButtonKind.Primary}\n                            data-qa=\"vacancy-response-submit-popup\"\n                            disabled={\n                                responseImpossible ||\n                                submitting ||\n                                (isXs && vacancy['@responseLetterRequired'] && isLetterTextEmpty)\n                            }\n                            loading={submitting && <Loading initial={LoadingColor.White} scale={LoadingScale.Small} />}\n                            stretched={isXs}\n                        >\n                            {trls[isFirstResponse ? Popup.trls.submit.default : Popup.trls.submit.repeat]}\n                        </Button>\n                        <VSpacing base={0} xs={1} />\n                    </ModalFooter>\n                </>\n            );\n        }\n        if (responseStep === ResponseStep.ResumeSelect) {\n            return (\n                <ResumeSelectForm\n                    selectedResume={selectedResume}\n                    resumes={resumes}\n                    onClose={() => setResponseStep(ResponseStep.Initial)}\n                    setSelectedResume={setSelectedResume}\n                    vacancyId={vacancyId}\n                />\n            );\n        }\n        if (responseStep === ResponseStep.Done) {\n            return (\n                <ResumeDeliveredForm\n                    responseData={responseData}\n                    isLetterTextEmpty={isLetterTextEmpty}\n                    letterMaxLength={responseStatus.letterMaxLength}\n                />\n            );\n        }\n        return null;\n    };\n\n    return (\n        <VacancyResponseForm\n            vacancyId={vacancyId}\n            resumes={resumes}\n            setSubmitting={setSubmitting}\n            onResponse={isXs ? () => setResponseStep(ResponseStep.Done) : onClose}\n            errorCode={responseErrorCode}\n            onError={setResponseErrorCode}\n            vacancyBodyFooterNodeRef={vacancyBodyFooterNodeRef}\n            vacancySource={vacancySource}\n            isBottomSheet={isXs}\n            selectedResume={selectedResume}\n            setSelectedResume={setSelectedResume}\n            setResponseData={setResponseData}\n            postponedActions={postponedActions}\n            render={({ renderForm, formId, isLetterTextEmpty }) => (\n                <Modal\n                    visible={visible}\n                    onClose={handleModalClose}\n                    closeButtonShow={!isXs || responseStep === ResponseStep.Done}\n                    useBottomSheet\n                >\n                    {renderModalInner(renderForm, formId, isLetterTextEmpty)}\n                </Modal>\n            )}\n        />\n    );\n};\n\nPopup.trls = {\n    submit: {\n        default: 'vacancy.response.popup.submit',\n        repeat: 'vacancy.response.popup.submitAgain',\n    },\n    cancel: 'vacancy.response.popup.cancel',\n};\n\nPopup.propTypes = {\n    visible: PropTypes.bool,\n    onClose: PropTypes.func,\n    vacancyId: PropTypes.number,\n    vacancyBodyFooterNodeRef: PropTypes.object,\n    vacancySource: PropTypes.oneOf(Object.values(Source)),\n    isXs: PropTypes.bool,\n    trls: PropTypes.object,\n};\n\nexport default translation(Popup);\n","import { RefObject, FC } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { makeSetStoreField } from '@hh.ru/redux-create-reducer';\n\nimport Source from 'lux/components/VacancySearchItem/Source';\nimport PopupType from 'lux/models/vacancyResponsePopup/popupType.types';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport AdvertisingPopup from 'lux/components/VacancyResponsePopup/AdvertisingPopup';\nimport Popup from 'lux/components/VacancyResponsePopup/Popup';\n\nconst vacancyResponsePopupVisibleAction = makeSetStoreField('vacancyResponsePopupVisible');\n\ninterface VacancyResponsePopupProps {\n    vacancyId: number;\n    vacancyBodyFooterNodeRef?: RefObject<HTMLDivElement>;\n    vacancySource: Source;\n    isXs: boolean;\n}\n\nconst VacancyResponsePopup: FC<VacancyResponsePopupProps> = ({\n    vacancyId,\n    vacancyBodyFooterNodeRef,\n    vacancySource,\n    isXs = false,\n}) => {\n    const dispatch = useDispatch();\n    const isPopupVisible = useSelector((state) => state.vacancyResponsePopupVisible);\n    const responsePopup = useSelector((state) => state.vacancyResponsePopup);\n    const popupType = responsePopup?.type;\n\n    if (responsePopup?.vacancy?.vacancyId !== vacancyId) {\n        return null;\n    }\n\n    const closePopup = (isCancel = false) => {\n        dispatch(vacancyResponsePopupVisibleAction(false));\n        if (isCancel) {\n            responsePopup?.onCancelCallback?.();\n        }\n    };\n\n    if (popupType === PopupType.Advertising) {\n        return <AdvertisingPopup visible={isPopupVisible} onClose={closePopup} />;\n    }\n    if (popupType === PopupType.Normal) {\n        return (\n            <Popup\n                visible={isPopupVisible}\n                onClose={closePopup}\n                vacancyId={vacancyId}\n                vacancyBodyFooterNodeRef={vacancyBodyFooterNodeRef}\n                vacancySource={vacancySource}\n                isXs={isXs}\n            />\n        );\n    }\n    return null;\n};\n\nexport default VacancyResponsePopup;\n","// extracted by mini-css-extract-plugin\nexport default {\"brandedSnippetWrapper\":\"branded-snippet-wrapper--nma3T2ZlEJM2rfRHs3IR\",\"brandedSnippetContent\":\"branded-snippet-content--Bez0041PcRhjhW0KAmDQ\",\"brandedSnippetContainer\":\"branded-snippet-container--Ypt7X0UyUxECR0AqLcb3\",\"brandedSnippet\":\"branded-snippet--s0dHWphpRWIGhKOj_4Lb\",\"brandedSnippetLogoContainer\":\"branded-snippet-logo-container--y2Uzm51DuEXsMfEYBTXH\",\"brandedSnippetLogo\":\"branded-snippet-logo--nBpuhN7dVjcXZ4b8vxwr\",\"brandedSnippetLogoContainerFixed\":\"branded-snippet-logo-container-fixed--MnGfECobz_TUYpiIuLK0\",\"brandedSnippetLogoContainerStretch\":\"branded-snippet-logo-container-stretch--VCUOia6OSj3j7W2EBT8G\",\"brandedSnippetWrapperC\":\"branded-snippet-wrapper-c--Qz_l12gokTcCMcMAfSQ7\",\"brandedSnippetDecorationC\":\"branded-snippet-decoration-c--HQANNKqcYk9g8Y61uAbx\",\"brandedSnippetLogoWrapperC\":\"branded-snippet-logo-wrapper-c--RyaxgxHzX11lQVrEWw92\",\"brandedSnippetLogoWrapperFullC\":\"branded-snippet-logo-wrapper-full-c--TiH4lAF1fENqrvX5JFGz\",\"brandedSnippetLogoWrapperHalfC\":\"branded-snippet-logo-wrapper-half-c--I1ojbbKSKNZf6nvdaAD4\",\"brandedSnippetInject\":\"branded-snippet-inject--LaUl3KVEOHNE7NUMtPyd\"};","// tempexp_27388_file\nimport { PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport { useElementShown } from '@hh.ru/analytics-js';\nimport brandySnippetCompanyButtonClick from '@hh.ru/analytics-js-events/build/xhh/applicant/branding/brandy_snippet/brandy_snippet_company_button_click';\nimport brandySnippetElementShown from '@hh.ru/analytics-js-events/build/xhh/applicant/branding/brandy_snippet/brandy_snippet_element_shown';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport Debug from 'HHC/Debug';\nimport translation from 'lux/components/translation';\nimport useGetCompanyUrl from 'lux/hooks/companies/useGetCompanyUrl';\nimport { VacancySearchItem } from 'lux/models/vacancySearch/vacancySearchItem.types';\n\nimport { useBrandedSnippetContext } from 'lux/components/BrandedSnippet/BrandedSnippetContext';\nimport { SnippetBranding } from 'lux/components/BrandedSnippet/brandedSnippet.types';\n\nimport styles from './branded-snippet.less';\n\nconst TrlKeys = {\n    vacancies: 'navi.item.vacancy',\n};\n\nexport const useBrandedSnippet = (\n    vacancy: VacancySearchItem\n): {\n    showBrandedSnippetVariantB?: boolean;\n    showBrandedSnippetVariantC?: boolean;\n    brandingData?: SnippetBranding;\n} => {\n    const { getBranding } = useBrandedSnippetContext();\n    const brandingData = getBranding?.(vacancy);\n    if (!brandingData) {\n        return {};\n    }\n    return {\n        showBrandedSnippetVariantB: !brandingData.showVariantC,\n        showBrandedSnippetVariantC: brandingData.showVariantC,\n        brandingData,\n    };\n};\n\ntype BrandedSnippetProps = PropsWithChildren<{ vacancy: VacancySearchItem; isVariantC?: boolean }>;\n\nconst BrandedSnippet: TranslatedComponent<BrandedSnippetProps> = ({ children, vacancy, trls, isVariantC }) => {\n    const { company } = vacancy;\n    const companyUrl = useGetCompanyUrl(company);\n    const { brandingData } = useBrandedSnippet(vacancy);\n    const { vacancyId } = vacancy;\n    const ref = useElementShown(brandySnippetElementShown, {\n        vacancyId,\n    });\n\n    if (!brandingData) {\n        Debug.log('error out', 'There is no data to display a branded snippet');\n        return <>{children}</>;\n    }\n    const {\n        desktopLogoC,\n        xsLogo,\n        desktopImageC,\n        background,\n        backgroundDeskC,\n        desktopLogo,\n        desktopImage,\n        backgroundDesk,\n    } = brandingData;\n\n    if (isVariantC) {\n        return (\n            <div ref={ref} className=\"branded-snippet-underlay\" style={{ background: backgroundDeskC || background }}>\n                <div\n                    ref={ref}\n                    className={styles.brandedSnippetWrapperC}\n                    style={{ backgroundImage: desktopImageC ? `url(${desktopImageC})` : undefined }}\n                >\n                    <div className={styles.brandedSnippetContent}>{children}</div>\n                    <Link\n                        to={companyUrl}\n                        data-qa=\"vacancy-serp__vacancy-employer-logo\"\n                        aria-label={`${trls[TrlKeys.vacancies]} ${company.visibleName}`}\n                        target=\"_blank\"\n                        onClick={() => brandySnippetCompanyButtonClick({ vacancyId })}\n                    >\n                        <div className={classnames(styles.brandedSnippetDecorationC)}>\n                            <div\n                                className={classnames(\n                                    styles.brandedSnippetLogoWrapperC,\n                                    desktopImageC\n                                        ? styles.brandedSnippetLogoWrapperHalfC\n                                        : styles.brandedSnippetLogoWrapperFullC\n                                )}\n                            >\n                                <img\n                                    alt=\"branded logo\"\n                                    className={styles.brandedSnippetLogo}\n                                    loading=\"lazy\"\n                                    src={desktopLogoC || desktopLogo || xsLogo}\n                                />\n                            </div>\n                        </div>\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n\n    const hasPictureB = Boolean(desktopImage);\n\n    return (\n        <div ref={ref} className={styles.brandedSnippetWrapper}>\n            <div className={styles.brandedSnippetContent}>{children}</div>\n            <Link\n                to={companyUrl}\n                data-qa=\"vacancy-serp__vacancy-employer-logo\"\n                aria-label={`${trls[TrlKeys.vacancies]} ${company.visibleName}`}\n                onClick={() => brandySnippetCompanyButtonClick({ vacancyId })}\n                target=\"_blank\"\n            >\n                <div className={styles.brandedSnippetContainer} style={{ background: backgroundDesk || background }}>\n                    <div className={classnames(styles.brandedSnippet)}>\n                        <div\n                            className={classnames(\n                                styles.brandedSnippetLogoContainer,\n                                hasPictureB\n                                    ? styles.brandedSnippetLogoContainerFixed\n                                    : styles.brandedSnippetLogoContainerStretch\n                            )}\n                        >\n                            <img\n                                alt=\"branded logo\"\n                                loading=\"lazy\"\n                                className={styles.brandedSnippetLogo}\n                                src={desktopLogo || xsLogo}\n                            />\n                        </div>\n                        {hasPictureB && <img alt=\"branded image\" loading=\"lazy\" src={brandingData.desktopImage} />}\n                    </div>\n                </div>\n            </Link>\n        </div>\n    );\n};\n\nexport default translation(BrandedSnippet);\n","import { updateUrl } from 'Modules/url';\n\nimport fetcher from 'lux/modules/fetcher';\n\nexport enum AdvAnalyticsTypes {\n    FavoriteButton = 'add_to_favorites_button',\n    ContactsButton = 'show_contacts_button',\n}\n\nexport const sendAdvSearchVacancyAnalytics = (params: {\n    clickUrl?: string;\n    isAdv?: boolean;\n    analyticsType: AdvAnalyticsTypes;\n}): void => {\n    const { isAdv, clickUrl, analyticsType } = params;\n    if (isAdv && clickUrl) {\n        void fetcher.get(updateUrl(clickUrl, { clickType: analyticsType }));\n    }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"serpItemControlsItem\":\"serp-item-controls-item--LkrmNpabm9UdYnMZJRoy\",\"serpItemControlsSide\":\"serp-item-controls-side--eK8dW18YWVfDHVi2gWMD\",\"serpItemControlsSideRedesign\":\"serp-item-controls-side_redesign--Jvaq3pnorZnqq1WHy31A\",\"serpItemControlsSpacer\":\"serp-item-controls-spacer--Dq53fNBQL8qDO0Z_RHRc\",\"serpItemControlsSpacerRedesign\":\"serp-item-controls-spacer_redesign--qs_T13DUJposXFUH4JtE\",\"fitIconInButtonContainer\":\"fit-icon-in-button-container--UIRSaywHByM2lL94t9vt\",\"serpItemControlGtXs\":\"serp-item-control-gt-xs--SX_CCf3RNcFhTDjQUufQ\",\"serpItemControlXsOnly\":\"serp-item-control-xs-only--k_tnJnNFHYiD2O3q4mdQ\",\"serpItemControlHidden\":\"serp-item-control-hidden--awF3bUZ7lZfnIpzWemNC\"};","import Button, { ButtonAppearance, ButtonScale } from 'bloko/blocks/button';\nimport HoverTip from 'bloko/blocks/drop/Tip/HoverTip';\nimport Icon, { IconAppearance, IconColor, IconKind, IconScale, IconView } from 'bloko/blocks/icon';\nimport useBreakpoint, { Breakpoint } from 'bloko/common/hooks/useBreakpoint';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\nimport BlacklistMenu from 'lux/components/VacancyView/BlacklistMenu';\nimport { BlacklistStatus } from 'lux/components/VacancyView/useBlacklistMenu';\nimport translation from 'lux/components/translation';\nimport useIsClient from 'lux/hooks/useIsClient';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport styles from './serp-item.less';\n\nconst TrlKeys = {\n    [BlacklistStatus.Empty]: 'searchvacancymap.close',\n    [BlacklistStatus.BlacklistVacancy]: 'pageControls.BlacklistRemoveVacancy',\n    [BlacklistStatus.BlacklistEmployer]: 'pageControls.BlacklistRemoveEmployer',\n};\n\ninterface BlacklistButtonProps {\n    vacancyId: number;\n    employerId?: number;\n    type?: string;\n    isVacancySnippetRedesignExp?: boolean;\n    withFavorite?: boolean;\n    onFavoriteStateChanged?: () => void;\n}\n\nconst BlacklistButton: TranslatedComponent<BlacklistButtonProps> = ({\n    trls,\n    vacancyId,\n    employerId,\n    type,\n    isVacancySnippetRedesignExp,\n    withFavorite,\n    onFavoriteStateChanged,\n}) => {\n    const { wideCardContainerClassName, narrowCardContainerClassName } = useCardContainerClassNames();\n    const isXs = useBreakpoint() === Breakpoint.XS;\n    const isFavoritesPage = useSelector(({ router }) =>\n        router.location.pathname.startsWith('/applicant/favorite_vacancies')\n    );\n    const isClient = useIsClient();\n\n    if (isFavoritesPage) {\n        return null;\n    }\n\n    return (\n        <BlacklistMenu\n            vacancyId={vacancyId}\n            employerId={employerId}\n            vacancyType={type}\n            withFavorite={withFavorite}\n            onFavoriteStateChanged={onFavoriteStateChanged}\n            render={({ status, onClick }) => {\n                return (\n                    <HoverTip\n                        show={!isXs}\n                        host={isClient ? document.body : null}\n                        render={() => trls[TrlKeys[status]]}\n                        flexible\n                    >\n                        <span className={styles.serpItemControlsItem}>\n                            <div className={wideCardContainerClassName}>\n                                <Button\n                                    aria-label={trls[TrlKeys[status]]}\n                                    appearance={ButtonAppearance.Outlined}\n                                    scale={isVacancySnippetRedesignExp ? ButtonScale.Large : ButtonScale.Small}\n                                    data-qa={\n                                        status === BlacklistStatus.Empty ? 'vacancy__blacklist-show-add' : undefined\n                                    }\n                                    onClick={onClick}\n                                >\n                                    <div className={styles.fitIconInButtonContainer}>\n                                        <Icon\n                                            view={IconView.Eye}\n                                            appearance={IconAppearance.Outlined}\n                                            crossed={status === BlacklistStatus.Empty}\n                                            initial={IconColor.Gray50}\n                                            scale={isVacancySnippetRedesignExp ? IconScale.Medium : IconScale.Small}\n                                        />\n                                    </div>\n                                </Button>\n                            </div>\n\n                            <div className={narrowCardContainerClassName}>\n                                <Button\n                                    aria-label={trls[TrlKeys[status]]}\n                                    scale={ButtonScale.Small}\n                                    data-qa={\n                                        status === BlacklistStatus.Empty ? 'vacancy__blacklist-show-add' : undefined\n                                    }\n                                    onClick={onClick}\n                                >\n                                    <div className={styles.fitIconInButtonContainer}>\n                                        {withFavorite && status === BlacklistStatus.Empty ? (\n                                            <Icon\n                                                view={IconView.Ellipsis}\n                                                kind={IconKind.Horizontal}\n                                                initial={IconColor.Gray50}\n                                                scale={IconScale.Small}\n                                            />\n                                        ) : (\n                                            <Icon\n                                                view={IconView.Eye}\n                                                crossed={status === BlacklistStatus.Empty}\n                                                initial={IconColor.Gray50}\n                                                scale={IconScale.Small}\n                                            />\n                                        )}\n                                    </div>\n                                </Button>\n                            </div>\n                        </span>\n                    </HoverTip>\n                );\n            }}\n        />\n    );\n};\n\nexport default translation(BlacklistButton);\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport Button, { ButtonAppearance, ButtonScale } from 'bloko/blocks/button';\nimport Icon, { IconColor, IconScale, IconView, IconAppearance } from 'bloko/blocks/icon';\nimport useBreakpoint, { Breakpoint } from 'bloko/common/hooks/useBreakpoint';\n\nimport { getDataQa } from 'Modules/VacancyToFavorite';\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\nimport translation from 'lux/components/translation';\nimport useFavorite from 'lux/hooks/useFavorite';\n\nimport styles from './serp-item.less';\n\nconst Favorite = ({ vacancyId, employerId, type, trls, onClick, isVacancySnippetRedesignExp }) => {\n    const isXs = useBreakpoint() === Breakpoint.XS;\n    const { isFavoriteVacancy, toggleIsFavoriteVacancy, isAvailableChangeFavoriteState } = useFavorite({\n        onFavoriteStateChanged: onClick,\n        vacancyId,\n        employerId,\n        type,\n        isSendUxFeedback: true,\n    });\n    const { wideCardContainerClassName, narrowCardContainerClassName } = useCardContainerClassNames();\n    if (!isAvailableChangeFavoriteState) {\n        return null;\n    }\n\n    const isLargeButton = isVacancySnippetRedesignExp && !isXs;\n\n    return (\n        <span className={classnames({ [styles.serpItemControlsItem]: !isFavoriteVacancy })}>\n            <div className={wideCardContainerClassName}>\n                <Button\n                    aria-label={trls[Favorite.trls.addToFavorite]}\n                    appearance={ButtonAppearance.Outlined}\n                    scale={isLargeButton ? ButtonScale.Large : ButtonScale.Small}\n                    data-qa={getDataQa(isFavoriteVacancy, true)}\n                    onClick={toggleIsFavoriteVacancy}\n                >\n                    <div className={styles.fitIconInButtonContainer}>\n                        <Icon\n                            view={IconView.Heart}\n                            initial={isFavoriteVacancy ? IconColor.Red60 : IconColor.Gray50}\n                            appearance={isFavoriteVacancy ? IconAppearance.Filled : IconAppearance.Outlined}\n                            scale={isLargeButton ? IconScale.Medium : IconScale.Small}\n                        />\n                    </div>\n                </Button>\n            </div>\n\n            <div className={narrowCardContainerClassName}>\n                <Button\n                    aria-label={trls[Favorite.trls.addToFavorite]}\n                    appearance={ButtonAppearance.Outlined}\n                    scale={ButtonScale.Small}\n                    data-qa={getDataQa(isFavoriteVacancy, true, true)}\n                    onClick={toggleIsFavoriteVacancy}\n                >\n                    <div className={styles.fitIconInButtonContainer}>\n                        <Icon\n                            view={IconView.Heart}\n                            initial={isFavoriteVacancy ? IconColor.Red60 : IconColor.Gray50}\n                            appearance={isFavoriteVacancy ? IconAppearance.Filled : IconAppearance.Outlined}\n                            scale={IconScale.Small}\n                        />\n                    </div>\n                </Button>\n            </div>\n        </span>\n    );\n};\nFavorite.trls = {\n    addToFavorite: 'button.addToFavorites',\n};\n\nFavorite.propTypes = {\n    vacancyId: PropTypes.number,\n    employerId: PropTypes.number,\n    type: PropTypes.string,\n    onClick: PropTypes.func,\n    trls: PropTypes.object,\n    isVacancySnippetRedesignExp: PropTypes.bool,\n};\n\nexport default translation(Favorite);\n","import classnames from 'classnames';\n\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\nimport translation from 'lux/components/translation';\nimport { UserType } from 'lux/models/userType';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport BlacklistButton from 'lux/components/VacancySearchItem/BlacklistButton';\nimport Favorite from 'lux/components/VacancySearchItem/Favorite';\n\nimport styles from './serp-item.less';\n\ntype ActionsProps = {\n    vacancyId: number;\n    employerId: number;\n    type: string;\n    onFavoriteButtonClick: (isFavorite: boolean) => void;\n    isVacancySnippetRedesignExp?: boolean;\n};\n\nconst Actions: TranslatedComponent<ActionsProps> = ({\n    vacancyId,\n    employerId,\n    type,\n    onFavoriteButtonClick,\n    isVacancySnippetRedesignExp,\n}) => {\n    const userType = useSelector((state) => state.userType);\n    const isFavoritesPage = useSelector(({ router }) =>\n        router.location.pathname.startsWith('/applicant/favorite_vacancies')\n    );\n    const { wideCardContainerClassName, narrowCardContainerClassName } = useCardContainerClassNames();\n    if (userType !== UserType.Applicant) {\n        return null;\n    }\n\n    return (\n        <>\n            <div\n                className={classnames({\n                    [wideCardContainerClassName]: isVacancySnippetRedesignExp,\n                    [styles.serpItemControlsSideRedesign]: isVacancySnippetRedesignExp,\n                    [styles.serpItemControlsSide]: !isVacancySnippetRedesignExp,\n                })}\n            >\n                <BlacklistButton\n                    vacancyId={vacancyId}\n                    employerId={employerId}\n                    type={type}\n                    isVacancySnippetRedesignExp={isVacancySnippetRedesignExp}\n                />\n                <Favorite\n                    onClick={onFavoriteButtonClick}\n                    vacancyId={vacancyId}\n                    employerId={employerId}\n                    type={type}\n                    isVacancySnippetRedesignExp={isVacancySnippetRedesignExp}\n                />\n            </div>\n\n            {isVacancySnippetRedesignExp && (\n                <div className={classnames(narrowCardContainerClassName, styles.serpItemControlsSideRedesign)}>\n                    <BlacklistButton\n                        vacancyId={vacancyId}\n                        employerId={employerId}\n                        type={type}\n                        isVacancySnippetRedesignExp={isVacancySnippetRedesignExp}\n                        withFavorite\n                    />\n                    {isFavoritesPage && (\n                        <Favorite\n                            onClick={onFavoriteButtonClick}\n                            vacancyId={vacancyId}\n                            employerId={employerId}\n                            type={type}\n                            isVacancySnippetRedesignExp={isVacancySnippetRedesignExp}\n                        />\n                    )}\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default translation(Actions);\n","// extracted by mini-css-extract-plugin\nexport default {\"serpItemControlGtXs\":\"serp-item-control-gt-xs--KaZKTHNPpG7KIutRzo8O\",\"serpItemControlXsOnly\":\"serp-item-control-xs-only--U52PbeLEZ0EtGHzqLeEz\",\"workflowStatusContainer\":\"workflow-status-container--nEBmnNUwW_Zu9D7vsZXT\",\"workflowStatusRedesign\":\"workflow-status-redesign--_i1FgiI_rP7lJVj90C0u\",\"workflowStatusRedesignResponded\":\"workflow-status-redesign_responded--clm0X2mkz8J1LGO0RcaL\",\"workflowStatusRedesignInvited\":\"workflow-status-redesign_invited--JQrrezUR7djq5NBYuvdd\",\"workflowStatusText\":\"workflow-status-text--upOy3CvMfJdalFpFXFKf\",\"workflowStatusRedesignDiscarded\":\"workflow-status-redesign_discarded--JezOL1XNvZHMJ6gievnI\"};","import { useDispatch } from 'react-redux';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Button, { ButtonKind, ButtonScale } from 'bloko/blocks/button';\nimport HSpacing from 'bloko/blocks/hSpacing';\nimport Icon, { IconScale, IconColor, IconView, IconAppearance, IconKind } from 'bloko/blocks/icon';\nimport BlokoLink, { LinkKind } from 'bloko/blocks/link';\nimport Loading, { LoadingScale, LoadingColor } from 'bloko/blocks/loading';\nimport useBreakpoint, { Breakpoint } from 'bloko/common/hooks/useBreakpoint';\n\nimport { updateUrl } from 'Modules/url';\nimport VacancyResponseLink from 'lux/components/VacancyResponseLink';\nimport VacancyResponsePopup from 'lux/components/VacancyResponsePopup';\nimport CountriesProfileVisibilityAgreementPopup from 'lux/components/VacancyResponsePopup/CountriesProfileVisibilityAgreementPopup';\nimport RelocationWarningPopup from 'lux/components/VacancyResponsePopup/RelocationWarningPopup';\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\nimport translation from 'lux/components/translation';\nimport { useIsHrZarplataDomain } from 'lux/hooks/useIsHrZarplataDomain';\nimport { incrementApplicantInvitationsCount } from 'lux/models/userStats';\nimport { UserType } from 'lux/models/userType';\nimport { useSelector } from 'lux/modules/useSelector';\nimport UserLabel from 'lux/modules/userLabels';\n\nimport Source from 'lux/components/VacancySearchItem/Source';\n\nimport styles from './serp-item-controls.less';\n\nconst ResponseButton = ({\n    vacancyId,\n    employerId,\n    vrImmediateRedirectUrl,\n    trls,\n    vacancySource,\n    clickUrl,\n    vacancyOfTheDayClickUrl,\n    isAdv,\n    isVacancySnippetRedesignExp,\n}) => {\n    const isXs = useBreakpoint() === Breakpoint.XS;\n    const userLabels = useSelector((state) => state.userLabelsForVacancies)[vacancyId];\n    const userType = useSelector((state) => state.userType);\n    const responseStatus = useSelector((state) => state.applicantVacancyResponseStatuses[vacancyId]);\n    const dispatch = useDispatch();\n    const isHrZarplataDomain = useIsHrZarplataDomain();\n    const { wideCardContainerClassName, narrowCardContainerClassName } = useCardContainerClassNames();\n\n    if (userType === UserType.Employer) {\n        return null;\n    }\n\n    const isResponded = userLabels?.includes(UserLabel.Response);\n    const isInvited = userLabels?.includes(UserLabel.Invite);\n    const isDiscarded = userLabels?.includes(UserLabel.Discard);\n    const showWorkflowStatus = isDiscarded || isInvited || isResponded;\n\n    const respondedState = (text, status) => {\n        let linkKind = isDiscarded ? LinkKind.Warning : LinkKind.Success;\n        if (isVacancySnippetRedesignExp) {\n            linkKind = LinkKind.Tertiary;\n        }\n        return (\n            <BlokoLink\n                Element={Link}\n                to={`/negotiations/gotopic?vacancy_id=${vacancyId}`}\n                target=\"_blank\"\n                kind={linkKind}\n                data-qa={`vacancy-serp__vacancy_${status}`}\n            >\n                <div className={styles.workflowStatusContainer}>\n                    {isVacancySnippetRedesignExp && status === 'responded' && (\n                        <>\n                            <Icon\n                                view={IconView.Checkmark}\n                                initial={IconColor.Green60}\n                                kind={IconKind.Single}\n                                appearance={IconAppearance.Outlined}\n                                scale={IconScale.Small}\n                                enclosed\n                            />\n                            <HSpacing base={2} />\n                        </>\n                    )}\n                    <span className={styles.workflowStatusText}>{text}</span>\n                </div>\n            </BlokoLink>\n        );\n    };\n\n    let workflowState;\n\n    if (isResponded) {\n        workflowState = respondedState(trls[ResponseButton.trls.responded], 'responded');\n    } else if (isInvited) {\n        workflowState = respondedState(trls[ResponseButton.trls.invited], 'invited');\n    } else if (isDiscarded) {\n        workflowState = respondedState(trls[ResponseButton.trls.discard], 'discard');\n    }\n\n    let toUrl = isHrZarplataDomain\n        ? `https://www.zarplata.ru/vacancy/card/id${vacancyId}`\n        : `/applicant/vacancy_response?vacancyId=${vacancyId}`;\n    if (vrImmediateRedirectUrl) {\n        toUrl = updateUrl(vrImmediateRedirectUrl, { hhtmFromLabel: 'vacancy_immediate_redirect' });\n    }\n\n    const adVacancyClickUrl = isAdv && clickUrl ? updateUrl(clickUrl, { clickType: 'response_button' }) : null;\n\n    if (isVacancySnippetRedesignExp && showWorkflowStatus) {\n        return (\n            <div\n                className={classnames(styles.workflowStatusRedesign, {\n                    [styles.workflowStatusRedesignResponded]: isResponded,\n                    [styles.workflowStatusRedesignInvited]: isInvited,\n                    [styles.workflowStatusRedesignDiscarded]: isDiscarded,\n                })}\n            >\n                {workflowState}\n                <BlokoLink\n                    Element={Link}\n                    to={`/negotiations/gotopic?vacancy_id=${vacancyId}`}\n                    target=\"_blank\"\n                    kind={LinkKind.Tertiary}\n                >\n                    {isXs ? trls[ResponseButton.trls.chat] : trls[ResponseButton.trls.toChat]}\n                </BlokoLink>\n            </div>\n        );\n    }\n\n    return (\n        <>\n            {showWorkflowStatus && workflowState}\n            {!showWorkflowStatus && (\n                <VacancyResponseLink\n                    vacancyId={vacancyId}\n                    employerId={employerId}\n                    enableRelocationWarning\n                    vrImmediateRedirectUrl={vrImmediateRedirectUrl}\n                    vacancySource={vacancySource}\n                    adVacancyClickUrl={adVacancyClickUrl}\n                    vacancyOfTheDayClickUrl={vacancyOfTheDayClickUrl}\n                    onResponseComplete={() => {\n                        dispatch(incrementApplicantInvitationsCount(1));\n                    }}\n                    render={(onClick) => (\n                        <>\n                            <div className={wideCardContainerClassName}>\n                                <Button\n                                    Element={Link}\n                                    to={toUrl}\n                                    target={vrImmediateRedirectUrl ? '_blank' : null}\n                                    onClick={onClick}\n                                    kind={isVacancySnippetRedesignExp ? ButtonKind.Primary : ButtonKind.Success}\n                                    scale={isVacancySnippetRedesignExp ? ButtonScale.Large : ButtonScale.Small}\n                                    loading={\n                                        responseStatus?.isFetching && (\n                                            <Loading initial={LoadingColor.White} scale={LoadingScale.Small} />\n                                        )\n                                    }\n                                    disabled={!!responseStatus?.isFetching}\n                                    data-qa=\"vacancy-serp__vacancy_response\"\n                                >\n                                    {trls[ResponseButton.trls.response]}\n                                </Button>\n                            </div>\n                            <div className={narrowCardContainerClassName}>\n                                <Button\n                                    Element={Link}\n                                    to={toUrl}\n                                    target={vrImmediateRedirectUrl ? '_blank' : null}\n                                    onClick={onClick}\n                                    kind={isVacancySnippetRedesignExp ? ButtonKind.Primary : ButtonKind.Success}\n                                    scale={ButtonScale.Small}\n                                    loading={\n                                        responseStatus?.isFetching && (\n                                            <Loading initial={LoadingColor.White} scale={LoadingScale.Small} />\n                                        )\n                                    }\n                                    disabled={!!responseStatus?.isFetching}\n                                    data-qa=\"vacancy-serp_vacancy_response_xs\"\n                                >\n                                    {trls[ResponseButton.trls.response]}\n                                </Button>\n                            </div>\n                        </>\n                    )}\n                    place=\"vacancy_search_item\"\n                />\n            )}\n            <RelocationWarningPopup vacancyId={vacancyId} />\n            <CountriesProfileVisibilityAgreementPopup vacancyId={vacancyId} />\n            <VacancyResponsePopup vacancyId={vacancyId} vacancySource={vacancySource} isXs={isXs} />\n        </>\n    );\n};\n\nResponseButton.trls = {\n    response: 'search.result.item.response',\n    responded: 'vacancySearchResults.applicantflags.responded',\n    invited: 'vacancySearchResults.applicantflags.invited',\n    discard: 'vacancySearchResults.applicantflags.rejected',\n    chat: 'vacancySearchResults.chat',\n    toChat: 'vacancySearchResults.toChat',\n};\n\nResponseButton.propTypes = {\n    vacancyId: PropTypes.number,\n    employerId: PropTypes.number,\n    vrImmediateRedirectUrl: PropTypes.string,\n    trls: PropTypes.object,\n    vacancySource: PropTypes.oneOf(Object.values(Source)),\n    clickUrl: PropTypes.string,\n    vacancyOfTheDayClickUrl: PropTypes.string,\n    isAdv: PropTypes.bool,\n    isVacancySnippetRedesignExp: PropTypes.bool,\n};\n\nexport default translation(ResponseButton);\n","import { FC } from 'react';\nimport classnames from 'classnames';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport addressMapButtonClick from '@hh.ru/analytics-js-events/build/xhh/applicant/vacancy/address_map_button_click';\nimport Text from 'bloko/blocks/text';\n\nimport { VacancyResponsePopupResponse } from 'lux/components/VacancyResponseLink';\nimport ContactsCallTracking from 'lux/components/VacancyView/VacancyContactsCallTracking';\nimport { useIsZarplataPlatform } from 'lux/hooks/usePlatform';\nimport { VacancyAddress, ContactInfo } from 'lux/models/vacancyView.types';\nimport paths from 'lux/modules/routePaths';\n\ntype VacancySearchItemContactsProps = {\n    callTrackingEnabled?: boolean;\n    contactInfo?: ContactInfo;\n    onClose?: () => void;\n    vacancyId: number;\n    address?: VacancyAddress;\n    chatButtonInfo: VacancyResponsePopupResponse | null;\n    employerId: number;\n    chatWritePossibility: string;\n};\n\nconst VacancySearchItemContacts: FC<VacancySearchItemContactsProps> = ({\n    contactInfo,\n    vacancyId,\n    address,\n    callTrackingEnabled,\n    chatButtonInfo,\n    employerId,\n    onClose,\n    chatWritePossibility,\n}) => {\n    const isZarplata = useIsZarplataPlatform();\n\n    const onClickPhone = () => {\n        Analytics.sendHHEvent('applicantCallIntent', {\n            from: 'serp',\n            vacancy_id: vacancyId, // eslint-disable-line camelcase\n        });\n        Analytics.sendEvent('applicant', 'call-from-vacancy');\n        if (isZarplata) {\n            Analytics.addEventPixels('ZP_CALL');\n        }\n    };\n\n    const onClickEmail = () => {\n        Analytics.sendHHEvent('applicantEmailIntent', {\n            from: 'serp',\n            vacancy_id: vacancyId, // eslint-disable-line camelcase\n        });\n    };\n\n    const onClickAddress = () => {\n        addressMapButtonClick({ hhtmSourceLabel: 'vacancy_serp_contacts_drop', vacancyId });\n    };\n\n    const { fio, email } = contactInfo || {};\n    const phones = contactInfo?.phones?.phones;\n\n    return (\n        <div\n            className={classnames('vacancy-contacts', 'vacancy-contacts_opened', {\n                'vacancy-contacts_search': !callTrackingEnabled,\n            })}\n        >\n            {callTrackingEnabled ? (\n                <ContactsCallTracking\n                    contactInfo={contactInfo}\n                    vacancyId={vacancyId}\n                    address={address?.displayName}\n                    onPhoneClick={onClickPhone}\n                    onEmailClick={onClickEmail}\n                    onAddressClick={onClickAddress}\n                    onClose={onClose}\n                    chatButtonInfo={chatButtonInfo}\n                    employerId={employerId}\n                    chatWritePossibility={chatWritePossibility}\n                />\n            ) : (\n                <>\n                    <Text data-qa=\"vacancy-serp__vacancy_contacts-fio\">{fio}</Text>\n                    {phones?.map((phone, index) => {\n                        const { country, city, number, comment } = phone;\n                        return (\n                            <div key={index}>\n                                <div\n                                    className=\"vacancy-contacts__phone vacancy-contacts__phone_search\"\n                                    data-qa=\"vacancy-serp__vacancy_contacts-phone\"\n                                >\n                                    <span className=\"vacancy-contacts__phone-text\">\n                                        +{country}&#160;{city}&#160;{number}\n                                    </span>\n                                    <a\n                                        href={`tel:+${country}${city}${number}`}\n                                        className=\"vacancy-contacts__phone-link\"\n                                        data-qa=\"vacancy-serp__vacancy_contacts-phone-link\"\n                                        onClick={onClickPhone}\n                                    >\n                                        +{country}&#160;{city}&#160;{number}\n                                    </a>\n                                </div>\n                                <div>{comment}</div>\n                            </div>\n                        );\n                    })}\n                    <div>\n                        <a\n                            href={`mailto:${email ?? ''}`}\n                            data-qa=\"vacancy-serp__vacancy_contacts-email\"\n                            onClick={onClickEmail}\n                        >\n                            {email}\n                        </a>\n                    </div>\n                    {address && (\n                        <div className=\"vacancy-contacts__address\" data-qa=\"vacancy-serp__vacancy_contacts-address\">\n                            <a href={`${paths.vacancySearchMap}?vacancy_id=${vacancyId}`} onClick={onClickAddress}>\n                                {address.displayName}\n                            </a>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default VacancySearchItemContacts;\n","import { useState, useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport Button, { ButtonKind, ButtonScale, ButtonAppearance } from 'bloko/blocks/button';\nimport Down, { DownPlacement } from 'bloko/blocks/drop/Down';\nimport Loading, { LoadingColor, LoadingScale } from 'bloko/blocks/loading';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport axios from 'HHC/Axios';\nimport { VACANCY_SEARCH_ITEM_CONTACTS_ERROR } from 'lux/components/Notifications/VacancySearchItemContactsError';\nimport RegistrationAction from 'lux/components/VacancyActions/RegistrationAction';\nimport { VacancyResponsePopupResponse } from 'lux/components/VacancyResponseLink';\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\nimport translation from 'lux/components/translation';\nimport useRegisterInteraction from 'lux/hooks/vacancies/useRegisterInteraction';\nimport { UserType } from 'lux/models/userType';\nimport { VacancyAddress, ContactInfo } from 'lux/models/vacancyView.types';\nimport { useSelector } from 'lux/modules/useSelector';\nimport UserLabel from 'lux/modules/userLabels';\nimport fetchResponseType from 'lux/requests/contacts/fetchResponseType';\nimport addNotification from 'lux/requests/notifications/addNotification';\n\nimport VacancySearchItemContacts from 'lux/components/VacancySearchItem/Contacts';\n\ntype ShowContactsButtonProps = {\n    showContact: boolean;\n    vacancyId: number;\n    address?: VacancyAddress;\n    employerId: number;\n    chatWritePossibility: string;\n    onClick: () => void;\n    isVacancySnippetRedesignExp?: boolean;\n};\n\nconst TrlKeys = {\n    contacts: 'vacancy.search.contacts',\n    showContacts: 'vacancy.search.contacts.show',\n};\nconst ShowContactsButton: TranslatedComponent<ShowContactsButtonProps> = ({\n    showContact,\n    vacancyId,\n    address,\n    employerId,\n    chatWritePossibility,\n    onClick,\n    isVacancySnippetRedesignExp,\n    trls,\n}) => {\n    const [asyncContacts, setAsyncContacts] = useState<ContactInfo>();\n    const [contactsVisible, setContactsVisible] = useState(false);\n    const [chatButtonInfo, setChatButtonInfo] = useState<VacancyResponsePopupResponse | null>(null);\n    const [loadContacts, setLoadContacts] = useState(false);\n    const searchLoading = useSelector((state) => state.searchLoading);\n    const userType = useSelector((state) => state.userType);\n    const userLabel = useSelector((state) => state.userLabelsForVacancies)[vacancyId];\n    const { wideCardContainerClassName, narrowCardContainerClassName } = useCardContainerClassNames();\n\n    const dispatch = useDispatch();\n\n    const isAnonymous = userType === UserType.Anonymous;\n\n    const fetchContacts = async () => {\n        if (asyncContacts) {\n            setContactsVisible(!contactsVisible);\n            return;\n        }\n        setLoadContacts(true);\n        let contactsJson: null | {\n            data: ContactInfo;\n        };\n        try {\n            contactsJson = await axios.get(`/vacancy/${vacancyId}/contacts`, {\n                params: {\n                    employerId,\n                },\n            });\n        } catch (error) {\n            dispatch(addNotification(VACANCY_SEARCH_ITEM_CONTACTS_ERROR));\n            setLoadContacts(false);\n            return;\n        }\n        const chatButtonInfo = await fetchResponseType(vacancyId);\n        setChatButtonInfo(chatButtonInfo);\n        setAsyncContacts(contactsJson?.data);\n        setContactsVisible(true);\n        setLoadContacts(false);\n    };\n\n    const registerInteraction = useRegisterInteraction(vacancyId);\n\n    const handleClick = () => {\n        onClick?.();\n        Analytics.sendEvent(userType, 'vacancy-view-contacts', 'open');\n        if (isAnonymous) {\n            setContactsVisible(true);\n            void registerInteraction();\n        } else {\n            void fetchContacts();\n        }\n    };\n\n    const initialRender = useRef(true);\n    // for ajax load vacancies\n    useEffect(() => {\n        if (searchLoading) {\n            initialRender.current = true;\n        }\n    }, [searchLoading]);\n\n    useEffect(() => {\n        if (initialRender.current) {\n            initialRender.current = false;\n        } else {\n            void fetchResponseType(vacancyId).then((chatInfo) => setChatButtonInfo(chatInfo));\n        }\n    }, [vacancyId, userLabel]);\n\n    const showCloseButton = !asyncContacts?.callTrackingEnabled;\n\n    const renderDownContent = () => {\n        if (isAnonymous) {\n            return <RegistrationAction vacancyId={vacancyId} />;\n        }\n\n        return (\n            <VacancySearchItemContacts\n                employerId={employerId}\n                chatWritePossibility={chatWritePossibility}\n                vacancyId={vacancyId}\n                callTrackingEnabled={asyncContacts?.callTrackingEnabled}\n                contactInfo={asyncContacts}\n                address={address}\n                onClose={showCloseButton ? undefined : () => setContactsVisible(false)}\n                chatButtonInfo={chatButtonInfo}\n            />\n        );\n    };\n\n    const userLabels = useSelector((state) => state.userLabelsForVacancies)[vacancyId];\n    const isResponded = userLabels?.includes(UserLabel.Response);\n    const isInvited = userLabels?.includes(UserLabel.Invite);\n    const isDiscarded = userLabels?.includes(UserLabel.Discard);\n    const showWorkflowStatus = isDiscarded || isInvited || isResponded;\n    const showWorkflowStatusRedesign = isVacancySnippetRedesignExp && showWorkflowStatus;\n\n    if (!showContact || showWorkflowStatusRedesign) {\n        return null;\n    }\n\n    return (\n        <Down\n            show={contactsVisible}\n            showCloseButton={showCloseButton}\n            onClose={() => setContactsVisible(false)}\n            render={renderDownContent}\n            placement={DownPlacement.BottomStart}\n        >\n            <div>\n                <div className={wideCardContainerClassName}>\n                    <Button\n                        kind={isVacancySnippetRedesignExp ? ButtonKind.Secondary : ButtonKind.Success}\n                        appearance={ButtonAppearance.Outlined}\n                        scale={isVacancySnippetRedesignExp ? ButtonScale.Large : ButtonScale.Small}\n                        data-qa=\"vacancy-serp__vacancy_contacts\"\n                        onClick={handleClick}\n                        loading={loadContacts && <Loading initial={LoadingColor.White} scale={LoadingScale.Small} />}\n                        collapsible\n                    >\n                        <span>{trls[TrlKeys.showContacts]}</span>\n                    </Button>\n                </div>\n                <div className={narrowCardContainerClassName}>\n                    <Button\n                        kind={isVacancySnippetRedesignExp ? ButtonKind.Secondary : ButtonKind.Success}\n                        appearance={ButtonAppearance.Outlined}\n                        scale={ButtonScale.Small}\n                        data-qa=\"vacancy-serp__vacancy_contacts_xs\"\n                        onClick={handleClick}\n                        loading={loadContacts && <Loading initial={LoadingColor.White} scale={LoadingScale.Small} />}\n                        collapsible\n                    >\n                        <span>{trls[TrlKeys.contacts]}</span>\n                    </Button>\n                </div>\n            </div>\n        </Down>\n    );\n};\n\nexport default translation(ShowContactsButton);\n","import { FC, useCallback } from 'react';\nimport classnames from 'classnames';\n\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport useBreakpoint, { Breakpoint } from 'bloko/common/hooks/useBreakpoint';\n\nimport { UserType } from 'lux/models/userType';\nimport { VacancyAddress } from 'lux/models/vacancyView.types';\nimport paths from 'lux/modules/routePaths';\nimport { sendAdvSearchVacancyAnalytics, AdvAnalyticsTypes } from 'lux/modules/sendAdvAnalytics';\nimport { useSelector } from 'lux/modules/useSelector';\nimport UserLabel from 'lux/modules/userLabels';\n\nimport VacancySearchItemActions from 'lux/components/VacancySearchItem/Actions';\nimport VacancySearchItemResponseButton from 'lux/components/VacancySearchItem/ResponseButton';\nimport ContactsButton from 'lux/components/VacancySearchItem/ShowContactsButton';\nimport Source from 'lux/components/VacancySearchItem/Source';\n\nimport styles from './serp-item.less';\n\nconst Features = {\n    hideInterfaceForModerators: 'hide_interface_for_moderators',\n};\n\ntype VacancyCardButtonsProps = {\n    vacancyId: number;\n    vacancySource: Source;\n    companyId: number;\n    showContact: boolean;\n    chatWritePossibility: string;\n    vrImmediateRedirectUrl?: string;\n    vacancyType: string;\n    clickUrl?: string;\n    vacancyOfTheDayClickUrl: string | null;\n    address?: VacancyAddress;\n    isAdv?: boolean;\n    isArchived: boolean;\n    isVacancySnippetRedesignExp?: boolean;\n};\n\nconst VacancyCardButtons: FC<VacancyCardButtonsProps> = ({\n    vacancyId,\n    vacancySource,\n    companyId,\n    showContact,\n    chatWritePossibility,\n    vrImmediateRedirectUrl,\n    vacancyType,\n    clickUrl,\n    vacancyOfTheDayClickUrl,\n    address,\n    isAdv,\n    isArchived,\n    isVacancySnippetRedesignExp,\n}) => {\n    const isXs = useBreakpoint() === Breakpoint.XS;\n    const hideInterfaceForModerators = useSelector(({ features }) => features[Features.hideInterfaceForModerators]) as\n        | string\n        | undefined;\n\n    const isVacanciesMap = useSelector(({ router }) => router.location.pathname === paths.vacancySearchMap);\n    const userType = useSelector((state) => state.userType);\n    const userId = useSelector(({ userId }) => userId);\n    const shouldHideInterfaceForModerators = hideInterfaceForModerators?.split(',')?.includes(userId);\n    const isAnonymousOnXs = userType === UserType.Anonymous && isXs;\n\n    const onShowContactsButtonClick = useCallback(\n        () => sendAdvSearchVacancyAnalytics({ clickUrl, isAdv, analyticsType: AdvAnalyticsTypes.ContactsButton }),\n        [clickUrl, isAdv]\n    );\n    const onFavoriteButtonClick = useCallback(\n        (favoriteState: boolean) => {\n            if (favoriteState) {\n                sendAdvSearchVacancyAnalytics({ clickUrl, isAdv, analyticsType: AdvAnalyticsTypes.FavoriteButton });\n            }\n        },\n        [clickUrl, isAdv]\n    );\n\n    const userLabels = useSelector((state) => state.userLabelsForVacancies)[vacancyId];\n    const isResponded = userLabels?.includes(UserLabel.Response);\n    const isInvited = userLabels?.includes(UserLabel.Invite);\n    const isDiscarded = userLabels?.includes(UserLabel.Discard);\n    const showWorkflowStatus = isDiscarded || isInvited || isResponded;\n    const showWorkflowStatusRedesign = isVacancySnippetRedesignExp && showWorkflowStatus;\n\n    if (shouldHideInterfaceForModerators) {\n        return null;\n    }\n\n    return (\n        <>\n            {isVacancySnippetRedesignExp && <VSpacing base={5} xs={4} />}\n            <div\n                className={classnames('serp-item-controls', {\n                    'serp-item-controls_narrow': isVacanciesMap,\n                })}\n            >\n                {!isArchived && (\n                    <VacancySearchItemResponseButton\n                        vacancyId={vacancyId}\n                        vacancySource={vacancySource}\n                        employerId={companyId}\n                        vrImmediateRedirectUrl={vrImmediateRedirectUrl}\n                        clickUrl={clickUrl}\n                        isAdv={isAdv}\n                        isXs={isXs}\n                        vacancyOfTheDayClickUrl={vacancyOfTheDayClickUrl}\n                        isVacancySnippetRedesignExp={isVacancySnippetRedesignExp}\n                    />\n                )}\n                {userType !== UserType.Employer && !showWorkflowStatusRedesign && (\n                    <span\n                        className={\n                            isVacancySnippetRedesignExp\n                                ? styles.serpItemControlsSpacerRedesign\n                                : styles.serpItemControlsSpacer\n                        }\n                    />\n                )}\n                <ContactsButton\n                    showContact={showContact && !isAnonymousOnXs}\n                    vacancyId={vacancyId}\n                    address={address}\n                    employerId={companyId}\n                    chatWritePossibility={chatWritePossibility}\n                    onClick={onShowContactsButtonClick}\n                    isVacancySnippetRedesignExp={isVacancySnippetRedesignExp}\n                />\n                {!showWorkflowStatusRedesign && (\n                    <VacancySearchItemActions\n                        vacancyId={vacancyId}\n                        employerId={companyId}\n                        type={vacancyType}\n                        onFavoriteButtonClick={onFavoriteButtonClick}\n                        isVacancySnippetRedesignExp={isVacancySnippetRedesignExp}\n                    />\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default VacancyCardButtons;\n","// tempexp_27388_file\nimport { FC, PropsWithChildren } from 'react';\n\nimport Source from 'lux/components/VacancySearchItem/Source';\nimport VacancyCardButtons from 'lux/components/VacancySearchItem/VacancyCardButtons';\nimport { VacancySearchItem } from 'lux/models/vacancySearch/vacancySearchItem.types';\n\nimport BrandedSnippet, { useBrandedSnippet } from 'lux/components/BrandedSnippet/BrandedSnippet';\n\nimport styles from './branded-snippet.less';\n\ntype BrandedSnippetInjectProps = PropsWithChildren<{\n    vacancy: VacancySearchItem;\n    vacancySource: Source;\n    vacancyOfTheDayClickUrl: string;\n}>;\n\nconst BrandedSnippetInject: FC<BrandedSnippetInjectProps> = ({\n    children,\n    vacancy,\n    vacancySource,\n    vacancyOfTheDayClickUrl,\n}) => {\n    const { showBrandedSnippetVariantB, showBrandedSnippetVariantC } = useBrandedSnippet(vacancy);\n\n    if (showBrandedSnippetVariantB) {\n        return <BrandedSnippet vacancy={vacancy}>{children}</BrandedSnippet>;\n    }\n\n    const {\n        '@isAdv': isAdv,\n        '@showContact': showContact,\n        address,\n        archived,\n        chatWritePossibility,\n        clickUrl,\n        company,\n        immediateRedirectUrl: vrImmediateRedirectUrl,\n        type,\n        vacancyId,\n    } = vacancy;\n\n    if (showBrandedSnippetVariantC) {\n        return (\n            <div className={styles.brandedSnippetInject}>\n                <div>{children}</div>\n                <VacancyCardButtons\n                    vacancyId={vacancyId}\n                    vacancySource={vacancySource}\n                    companyId={company.id}\n                    showContact={showContact}\n                    chatWritePossibility={chatWritePossibility}\n                    vrImmediateRedirectUrl={vrImmediateRedirectUrl}\n                    vacancyType={type}\n                    clickUrl={clickUrl}\n                    vacancyOfTheDayClickUrl={vacancyOfTheDayClickUrl}\n                    address={address}\n                    isAdv={isAdv}\n                    isArchived={Boolean(archived)}\n                />\n            </div>\n        );\n    }\n    return <>{children}</>;\n};\n\nexport default BrandedSnippetInject;\n","import { useCallback, useLayoutEffect, useRef } from 'react';\n\nimport { sendAnythingViewAnalytics, VacancyOfTheDayLocation, SpyParams } from 'lux/modules/sendAdvSpyAnalytics';\n\ntype UseVacancyOfTheDayAnalytics = (\n    vacancy: { isVacancyOfTheDay: boolean; viewUrl: string },\n    location: VacancyOfTheDayLocation,\n    spyParams?: SpyParams\n) => (element: HTMLElement | undefined) => void;\n\nconst useVacancyOfTheDayAnalytics: UseVacancyOfTheDayAnalytics = (vacancy, location, spyParams) => {\n    const unsubscribe = useRef<(() => void) | null>(null);\n    const { isVacancyOfTheDay, viewUrl } = vacancy;\n\n    useLayoutEffect(\n        () => () => {\n            unsubscribe.current?.();\n            unsubscribe.current = null;\n        },\n        []\n    );\n\n    return useCallback(\n        (element: HTMLElement | undefined) => {\n            if (!element || !isVacancyOfTheDay) {\n                return;\n            }\n\n            unsubscribe.current?.();\n\n            unsubscribe.current = sendAnythingViewAnalytics({\n                element,\n                viewUrl,\n                location,\n                spyParams,\n            });\n        },\n        [location, spyParams, viewUrl, isVacancyOfTheDay]\n    );\n};\n\nexport default useVacancyOfTheDayAnalytics;\n","/* eslint-disable camelcase */\nimport { ElementShownAnchor } from '@hh.ru/analytics-js';\nimport vacancyKeySkillResumeMatchElementShown from '@hh.ru/analytics-js-events/build/xhh/applicant/vacancy_search/vacancy_key_skill_resume_match_element_shown';\nimport Icon, { IconKind, IconScale, IconView, IconColor, IconAppearance } from 'bloko/blocks/icon';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\ninterface VacancyPercentIndicatorProps {\n    vacancyId: number;\n    trls: {\n        [key: string]: string;\n        skillsMatch: string;\n    };\n}\n\nconst TrlKeys = {\n    skillsMatch: 'vacancy.view.skills.match',\n};\n\nexport enum ScreenTypes {\n    Suitable = 'SUITABLE',\n    Simple = 'SIMPLE',\n}\n\nconst VacancyPercentIndicator: TranslatedComponent<VacancyPercentIndicatorProps> = ({\n    vacancyId,\n    trls,\n}: VacancyPercentIndicatorProps) => {\n    const {\n        usedResumeId: resumeId = 0,\n        matchingResultMap,\n        isSuitableSearch,\n    } = useSelector(\n        (state: {\n            searchCounts: {\n                isLoad: boolean;\n                value: number;\n                matchingResultMap?: { [key: number]: { match_percentage: number } };\n                usedResumeId?: number;\n                isSuitableSearch?: boolean;\n            };\n        }) => state.searchCounts || {}\n    );\n\n    const percent = matchingResultMap?.[vacancyId]?.match_percentage || 0;\n\n    const analyticsData = {\n        matchedKeySkillPercent: percent,\n        vacancyId,\n        resumeId,\n        screenType: isSuitableSearch ? ScreenTypes.Suitable : ScreenTypes.Simple,\n    };\n\n    if (!percent) {\n        return null;\n    }\n\n    return (\n        <ElementShownAnchor fn={vacancyKeySkillResumeMatchElementShown} {...analyticsData}>\n            <div className=\"vacancy-percent-indicator\">\n                <span className=\"vacancy-percent-number\">{percent}%</span>\n                <span className=\"vacancy-percent-text\">{trls[TrlKeys.skillsMatch]}</span>\n                <Icon\n                    view={IconView.Thumb}\n                    kind={IconKind.Up}\n                    scale={IconScale.Small}\n                    initial={IconColor.Green50}\n                    appearance={IconAppearance.Filled}\n                />\n            </div>\n        </ElementShownAnchor>\n    );\n};\n\nexport default translation(VacancyPercentIndicator);\n","import { Link } from '@hh.ru/redux-spa-middleware';\nimport BlokoLink, { LinkKind } from 'bloko/blocks/link';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nconst URL = 'https://clickme.hh.ru/new/dashboard?utm_source=hh.ru&utm_medium=referral&utm_campaign=vacancies_results';\n\nconst TrlKeys = {\n    clickme: 'vacancy.serp.clickMe',\n};\n\nconst Advertising: TranslatedComponent<{ withSeparator?: boolean }> = ({ trls, withSeparator }) => {\n    return (\n        <BlokoLink Element={Link} to={URL} kind={LinkKind.Secondary} disableVisited>\n            {withSeparator && `${NON_BREAKING_SPACE}•${NON_BREAKING_SPACE}`}\n            {trls[TrlKeys.clickme]}\n        </BlokoLink>\n    );\n};\n\nexport default translation(Advertising);\n","import { Link } from '@hh.ru/redux-spa-middleware';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport CdnImg from 'lux/components/CdnImg';\nimport translation from 'lux/components/translation';\nimport useGetCompanyUrl from 'lux/hooks/companies/useGetCompanyUrl';\nimport { VacancyCompany } from 'lux/models/vacancySearch/vacancySearchItem.types';\nimport { useSelector } from 'lux/modules/useSelector';\n\nenum LogoVariants {\n    CustomVacancyLogo = 'customVacancyLogo',\n    Medium = 'medium',\n}\n\nconst isLogoVariant = (variant: string): variant is LogoVariants =>\n    Object.values<string>(LogoVariants).includes(variant);\n\ninterface LogoTypes {\n    [LogoVariants.CustomVacancyLogo]?: string;\n    [LogoVariants.Medium]?: string;\n}\n\ninterface LogoProps {\n    company: VacancyCompany;\n    isPremiumOrVacancyOfTheDay: boolean;\n    forXs?: boolean;\n    isVacancySnippetRedesignExp?: boolean;\n    isEmployerLinkDisabled?: boolean;\n}\n\nconst TrlKeys = {\n    vacancies: 'navi.item.vacancy',\n};\n\nconst Logo: TranslatedComponent<LogoProps> = ({\n    trls,\n    company,\n    isPremiumOrVacancyOfTheDay,\n    forXs,\n    isVacancySnippetRedesignExp,\n    isEmployerLinkDisabled,\n}) => {\n    const isMapVacancySearch = useSelector((state) => state.isMapVacancySearch);\n    const companyUrl = useGetCompanyUrl(company);\n    const showCompanyLogo = company.logos && (company.logos['@showInSearch'] || isPremiumOrVacancyOfTheDay);\n    if (!showCompanyLogo) {\n        return null;\n    }\n\n    const logoVariants = company.logos?.logo?.reduce<LogoTypes>((logos, logo) => {\n        const type = logo['@type'];\n        if (isLogoVariant(type)) {\n            logos[type] = logo['@url'];\n        }\n        return logos;\n    }, {});\n\n    const visibleLogoUrl = logoVariants?.customVacancyLogo || logoVariants?.medium;\n    if (!visibleLogoUrl) {\n        return null;\n    }\n\n    const cdnImage = (\n        <CdnImg\n            loading=\"lazy\"\n            path={visibleLogoUrl}\n            alt={company.visibleName}\n            className={\n                isMapVacancySearch && isVacancySnippetRedesignExp\n                    ? 'vacancy-serp-item-logo_map-page-redesign'\n                    : 'vacancy-serp-item-logo'\n            }\n        />\n    );\n\n    return (\n        <div className={forXs ? 'vacancy-serp-item-control-xs-only' : 'vacancy-serp-item-control-gt-xs'}>\n            <div className=\"vacancy-serp-item-body__logo\">\n                {isEmployerLinkDisabled ? (\n                    <span data-qa=\"vacancy-serp__vacancy-employer-logo\">{cdnImage}</span>\n                ) : (\n                    <Link\n                        to={companyUrl}\n                        data-qa=\"vacancy-serp__vacancy-employer-logo\"\n                        aria-label={`${trls[TrlKeys.vacancies]} ${company.visibleName}`}\n                    >\n                        {cdnImage}\n                    </Link>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default translation(Logo);\n","import { Employment, WorkingDay, WorkingTimeInterval, WorkingTimeMode, WorkSchedule } from '@hh.ru/types-hh-microcore';\n\nimport { ScheduleLowerCase } from 'lux/microcoreModels/schedule';\nimport { CurrencyType } from 'lux/models/currencies.types';\nimport { ExperienceOption } from 'lux/models/search/searchCriteria.types';\nimport { BrandingType } from 'lux/models/vacancyView';\nimport { Badge, VacancyViewInsider, VacancyAddress } from 'lux/models/vacancyView.types';\nimport UserLabel from 'lux/modules/userLabels';\n\nexport const ACTIVITY_ONLINE = 'online';\n\nexport interface VacancyEmployerManager {\n    '@hhid': number;\n    '@managerId': number;\n    '@userId': number;\n    latestActivity: typeof ACTIVITY_ONLINE | null;\n}\n\nexport interface VacancySnippet {\n    req?: string;\n    resp?: string;\n    skill?: string;\n    cond?: string;\n    desc?: string;\n}\n\nexport interface VacancyCompany {\n    '@category': string;\n    '@countryId': number;\n    '@showSimilarVacancies': boolean;\n    '@state': string;\n    '@trusted': boolean;\n    employerOrganizationFormId: number;\n    accreditedITEmployer?: boolean;\n    badges?: { badge: Badge[] };\n    id: number;\n    name: string;\n    visibleName: string;\n    department?: {\n        '@code': string;\n        '@name': string;\n    };\n    logos?: {\n        '@showInSearch'?: boolean;\n        logo: Array<{\n            '@type': string;\n            '@url': string;\n        }>;\n    };\n}\n\nexport interface VacancySearchItem {\n    '@click'?: string;\n    '@responseLetterRequired': boolean;\n    '@showContact': boolean;\n    'hr-brand': {\n        type: string;\n        '@url': string;\n        '@year': number;\n    };\n    archived?: boolean;\n    acceptIncompleteResumes: boolean;\n    acceptTemporary: boolean;\n    address?: VacancyAddress;\n    area: {\n        '@id': number;\n        name: string;\n        path: string;\n    };\n    branding?: {\n        type: BrandingType;\n    };\n    canBeShared: boolean;\n    chatWritePossibility: string;\n    clickUrl?: string;\n    company: VacancyCompany;\n    compensation: {\n        currencyCode: CurrencyType;\n        from: number;\n        gross: boolean;\n        to: number;\n    };\n    creationSite: string;\n    creationSiteId: number;\n    creationTime: string;\n    displayHost: string;\n    employerManager: VacancyEmployerManager;\n    employment: { '@type': Employment };\n    '@isAdv'?: boolean;\n    isPartTimeJob?: boolean;\n    isVacancyOfTheDay?: boolean;\n    inboxPossibility: boolean;\n    insider?: VacancyViewInsider;\n    immediateRedirectUrl?: string;\n    lastChangeTime: {\n        '@timestamp': number;\n    };\n    links: {\n        desktop: string;\n        mobile?: string;\n    };\n    markedShowContacts: boolean;\n    metallic: string;\n    name: string;\n    notify: boolean;\n    publicationTime: {\n        '@timestamp': number;\n    };\n    properties: {\n        isPremium?: boolean;\n    };\n    responsesCount: number;\n    snippet: VacancySnippet;\n    searchDebug: {\n        score: number;\n        explanation: string;\n    };\n    totalResponsesCount: number;\n    type: string;\n    userLabels: UserLabel[];\n    vacancyId: number;\n    workExperience: ExperienceOption;\n    workSchedule: WorkSchedule;\n    '@workSchedule': ScheduleLowerCase;\n    workingDays: [{ workingDay?: WorkingDay }];\n    workingTimeIntervals: [{ workingTimeInterval?: WorkingTimeInterval }];\n    workingTimeModes: [{ workingTimeMode?: WorkingTimeMode }];\n    // eslint-disable-next-line camelcase\n    online_users_count?: number;\n}\n","import { FC } from 'react';\n\nimport HSpacing from 'bloko/blocks/hSpacing';\n\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\n\nconst AdaptiveHSpacing: FC = () => {\n    const { wideCardContainerClassName, narrowCardContainerClassName } = useCardContainerClassNames();\n    return (\n        <>\n            <span className={narrowCardContainerClassName}>\n                <HSpacing base={1} />\n            </span>\n            <span className={wideCardContainerClassName}>\n                <HSpacing base={2} />\n            </span>\n        </>\n    );\n};\n\nexport default AdaptiveHSpacing;\n","import { FC } from 'react';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport BlokoLink, { LinkKind } from 'bloko/blocks/link';\nimport Text from 'bloko/blocks/text';\n\nimport OrganizationForm from 'lux/components/Employer/OrganizationForm';\nimport useGetCompanyUrl from 'lux/hooks/companies/useGetCompanyUrl';\nimport { VacancyCompany } from 'lux/models/vacancySearch/vacancySearchItem.types';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst Features = {\n    hideInterfaceForModerators: 'hide_interface_for_moderators',\n};\n\ntype CompanyNameProps = {\n    company: VacancyCompany;\n    isVacancySnippetRedesignExp?: boolean;\n    advClickUrl?: string;\n    isEmployerLinkDisabled?: boolean;\n};\n\nconst CompanyName: FC<CompanyNameProps> = ({\n    company,\n    isVacancySnippetRedesignExp,\n    advClickUrl,\n    isEmployerLinkDisabled,\n}) => {\n    const userId = useSelector(({ userId }) => userId);\n    const hideInterfaceForModerators = useSelector(\n        ({ features }) => features[Features.hideInterfaceForModerators]\n    ) as string;\n    const companyUrl = useGetCompanyUrl(company, advClickUrl);\n    const shouldHideInterfaceForModerators = hideInterfaceForModerators?.split(',')?.includes(userId);\n\n    if (company.id) {\n        if (shouldHideInterfaceForModerators) {\n            return (\n                <>\n                    <OrganizationForm organizationFormId={company.employerOrganizationFormId} />\n                    {company.visibleName}\n                </>\n            );\n        }\n\n        return isEmployerLinkDisabled ? (\n            <Text data-qa=\"vacancy-serp__vacancy-employer\" Element=\"span\">\n                <OrganizationForm organizationFormId={company.employerOrganizationFormId} />\n                {company.visibleName}\n            </Text>\n        ) : (\n            <BlokoLink\n                Element={Link}\n                to={companyUrl}\n                kind={isVacancySnippetRedesignExp ? LinkKind.Secondary : LinkKind.Tertiary}\n                data-qa=\"vacancy-serp__vacancy-employer\"\n            >\n                <OrganizationForm organizationFormId={company.employerOrganizationFormId} />\n                {company.visibleName}\n            </BlokoLink>\n        );\n    }\n    return <>{company.visibleName}</>;\n};\n\nexport default CompanyName;\n","import { FC } from 'react';\n\nimport HrBrandIcon from 'lux/components/HrBrandIcon';\n\ntype Props = {\n    hrBrand: {\n        type: string;\n        '@url': string;\n        '@year': number;\n    };\n    isRedesignedSerp: boolean;\n    isVacancySnippetRedesignExp: boolean;\n};\n\nconst HRBrand: FC<Props> = ({ hrBrand, isRedesignedSerp, isVacancySnippetRedesignExp }) => {\n    if (!hrBrand) {\n        return null;\n    }\n    const hrBrandType = hrBrand.type === 'winner' ? 'winners' : 'nominees';\n    return (\n        <HrBrandIcon\n            hrBrand={{\n                [hrBrandType]: {\n                    '@url': hrBrand['@url'],\n                    '@year': hrBrand['@year'],\n                },\n            }}\n            dataQa=\"vacancy-serp__vacancy_hrbrand\"\n            isRedesignedIcon={isRedesignedSerp}\n            isVacancySnippetRedesignExp={isVacancySnippetRedesignExp}\n        />\n    );\n};\n\nexport default HRBrand;\n","import HSpacing from 'bloko/blocks/hSpacing';\nimport Text, { TextSize, TextImportance } from 'bloko/blocks/text';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport { Address } from 'lux/components/Employer/VacanciesGroupsByRegion/VacancyGroupsTypes';\nimport MetroPoint from 'lux/components/MetroPoint';\nimport Divider from 'lux/components/ResumeCard/Divider';\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\n\ntype VacancyAddressProps = {\n    area?: {\n        '@id': number;\n        name: string;\n    };\n    address?: Address;\n};\n\nconst TrlKeys = {\n    moreMetro: 'search.result.item.metro.more',\n};\n\nconst VacancyAddress: TranslatedComponent<VacancyAddressProps> = ({ area, address, trls }) => {\n    const metroList = address?.metroStations?.metro?.filter((metro) => metro['@cityId'] === area?.['@id']) ?? [];\n    const { wideCardContainerClassName, narrowCardContainerClassName, separateLineOnNarrowCardClassName } =\n        useCardContainerClassNames();\n\n    return (\n        <>\n            <span className={narrowCardContainerClassName}>\n                {Boolean(area?.name) && (\n                    <span className={separateLineOnNarrowCardClassName}>\n                        <Text\n                            Element=\"span\"\n                            size={TextSize.Medium}\n                            importance={TextImportance.Tertiary}\n                            data-qa=\"vacancy-serp__vacancy-address\"\n                        >\n                            {area?.name}\n                        </Text>\n                    </span>\n                )}\n                {metroList.length > 0 && (\n                    <span className={separateLineOnNarrowCardClassName}>\n                        <MetroPoint\n                            name={metroList[0].name}\n                            color={metroList[0].line.color}\n                            small\n                            isVacancySnippetRedesignExp\n                        />\n                        {metroList.length > 1 && (\n                            <Text Element=\"span\" size={TextSize.Medium} importance={TextImportance.Tertiary}>\n                                {NON_BREAKING_SPACE}\n                                {trls[TrlKeys.moreMetro]}\n                                {NON_BREAKING_SPACE}\n                                {metroList.length - 1}\n                            </Text>\n                        )}\n                    </span>\n                )}\n            </span>\n\n            <span className={wideCardContainerClassName}>\n                {Boolean(area?.name) && (\n                    <>\n                        <HSpacing base={2} />\n                        <Text\n                            Element=\"span\"\n                            size={TextSize.Large}\n                            importance={TextImportance.Tertiary}\n                            data-qa=\"vacancy-serp__vacancy-address\"\n                        >\n                            {area?.name}\n                        </Text>\n                        <HSpacing base={2} />\n                    </>\n                )}\n                {metroList.length > 0 && (\n                    <>\n                        <Divider />\n                        <HSpacing base={2} />\n                        <MetroPoint\n                            name={metroList[0].name}\n                            color={metroList[0].line.color}\n                            small\n                            isVacancySnippetRedesignExp\n                        />\n                        {metroList.length > 1 && (\n                            <Text Element=\"span\" size={TextSize.Large} importance={TextImportance.Tertiary}>\n                                {NON_BREAKING_SPACE}\n                                {trls[TrlKeys.moreMetro]}\n                                {NON_BREAKING_SPACE}\n                                {metroList.length - 1}\n                            </Text>\n                        )}\n                    </>\n                )}\n            </span>\n        </>\n    );\n};\n\nexport default translation(VacancyAddress);\n","import HSpacing from 'bloko/blocks/hSpacing';\nimport Text, { TextSize } from 'bloko/blocks/text';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport ItAccreditation from 'lux/components/Employer/ItAccreditation';\nimport TrustedEmployerCheck from 'lux/components/Employer/TrustedEmployerCheck';\nimport { Address } from 'lux/components/Employer/VacanciesGroupsByRegion/VacancyGroupsTypes';\nimport EmployerBadgesIconWrapper from 'lux/components/EmployerBadges/EmployerBadgesIconWrapper';\nimport PrepareEmployerHHRating, {\n    getEmployerHHRatingBadge,\n} from 'lux/components/EmployerHHRatingIcon/PrepareEmployerHHRating';\nimport InsiderInterviewLink from 'lux/components/InsiderInterviewLink';\nimport Divider from 'lux/components/ResumeCard/Divider';\nimport CompanyName from 'lux/components/VacancySearchItem/CompanyName';\nimport HRBrand from 'lux/components/VacancySearchItem/HRBrand';\nimport translation from 'lux/components/translation';\nimport { VacancyCompany as VacancyCompanyType } from 'lux/models/vacancySearch/vacancySearchItem.types';\nimport { VacancyViewInsider } from 'lux/models/vacancyView.types';\n\nimport AdaptiveHSpacing from 'lux/components/VacancySearchItemRedesign/AdaptiveHSpacing';\nimport VacancyAddress from 'lux/components/VacancySearchItemRedesign/VacancyAddress';\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\n\nimport styles from './styles.less';\n\ntype VacancyCompanyProps = {\n    company: VacancyCompanyType;\n    advClickUrl?: string;\n    hrBrand?: {\n        type: string;\n        '@url': string;\n        '@year': number;\n    };\n    insider?: VacancyViewInsider;\n    area?: {\n        '@id': number;\n        name: string;\n    };\n    address?: Address;\n};\n\nconst TrlKeys = {\n    advMark: 'vacancyItem.advMark',\n};\n\nconst VacancyCompany: TranslatedComponent<VacancyCompanyProps> = ({\n    trls,\n    company,\n    advClickUrl,\n    hrBrand,\n    insider,\n    area,\n    address,\n}) => {\n    const { wideCardContainerClassName, narrowCardContainerClassName, separateLineOnNarrowCardClassName } =\n        useCardContainerClassNames();\n    if (!company?.visibleName) {\n        return null;\n    }\n\n    const employerHHRatingBadge = getEmployerHHRatingBadge(company?.badges);\n    const hasAtLeastOneBadge = Boolean(\n        company['@trusted'] || company.accreditedITEmployer || hrBrand || employerHHRatingBadge\n    );\n\n    const hasInsiderLink = insider && insider.id && (insider['@isVisible'] || insider.isVisible);\n\n    return (\n        <div className={styles.infoSection}>\n            <span className={separateLineOnNarrowCardClassName}>\n                <span className={narrowCardContainerClassName}>\n                    <Text Element=\"span\" size={TextSize.Medium}>\n                        {Boolean(advClickUrl) && <div className=\"mark_redesign\">{trls[TrlKeys.advMark]}</div>}\n                        <CompanyName company={company} advClickUrl={advClickUrl} isVacancySnippetRedesignExp />\n                    </Text>\n                </span>\n                <span className={wideCardContainerClassName}>\n                    <Text Element=\"span\" size={TextSize.Large}>\n                        {Boolean(advClickUrl) && <div className=\"mark_redesign\">{trls[TrlKeys.advMark]}</div>}\n                        <CompanyName company={company} advClickUrl={advClickUrl} isVacancySnippetRedesignExp />\n                    </Text>\n                </span>\n                <HSpacing base={2} />\n\n                {hasAtLeastOneBadge && (\n                    <>\n                        <HSpacing base={1} />\n                        <EmployerBadgesIconWrapper>\n                            {company['@trusted'] && <TrustedEmployerCheck isServiceIcon />}\n\n                            {company.accreditedITEmployer && <ItAccreditation />}\n                            {hrBrand && <HRBrand hrBrand={hrBrand} isRedesignedSerp isVacancySnippetRedesignExp />}\n                            {employerHHRatingBadge && (\n                                <PrepareEmployerHHRating\n                                    badge={employerHHRatingBadge}\n                                    isRedesignedSerp\n                                    isVacancySnippetRedesignExp\n                                    dataQa=\"vacancy-serp__vacancy_\"\n                                />\n                            )}\n                        </EmployerBadgesIconWrapper>\n                        <AdaptiveHSpacing />\n                    </>\n                )}\n            </span>\n\n            <span className={wideCardContainerClassName}>\n                <Divider />\n            </span>\n\n            {hasInsiderLink && (\n                <span className={separateLineOnNarrowCardClassName}>\n                    <span className={wideCardContainerClassName}>\n                        <HSpacing base={2} />\n                    </span>\n                    <InsiderInterviewLink\n                        insider={insider}\n                        companyId={company.id}\n                        isVacancySnippetRedesignExp\n                        className={styles.tertiaryLink}\n                    />\n                    <span className={wideCardContainerClassName}>\n                        <HSpacing base={2} />\n                        <Divider />\n                    </span>\n                </span>\n            )}\n            <VacancyAddress area={area} address={address} />\n        </div>\n    );\n};\n\nexport default translation(VacancyCompany);\n","import classnames from 'classnames';\n\nimport Text, { TextSize } from 'bloko/blocks/text';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport Compensation from 'lux/components/Compensation';\nimport translation from 'lux/components/translation';\nimport VacancyCompenstionType from 'lux/models/vacancy/compensation.type';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\n\ninterface CompensationProps {\n    compensation: VacancyCompenstionType;\n}\n\nconst TrlKeys = {\n    net: 'employer.newVacancy.compensation.net',\n    gross: 'employer.newVacancy.compensation.gross',\n};\n\nconst VacancyCompensation: TranslatedComponent<CompensationProps> = ({ compensation, trls }) => {\n    const { wideCardContainerClassName, narrowCardContainerClassName, separateLineOnNarrowCardClassName } =\n        useCardContainerClassNames();\n    if (!compensation.from && !compensation.to) {\n        return null;\n    }\n\n    return (\n        <>\n            <span className={classnames(narrowCardContainerClassName, separateLineOnNarrowCardClassName)}>\n                <Text Element=\"span\" size={TextSize.Large}>\n                    <Compensation\n                        from={compensation.from}\n                        to={compensation.to}\n                        currencyCode={compensation.currencyCode}\n                        dash\n                    />\n                    {NON_BREAKING_SPACE}\n                    {trls[compensation.gross ? TrlKeys.gross : TrlKeys.net]}\n                </Text>\n            </span>\n\n            <span className={wideCardContainerClassName}>\n                <Text Element=\"span\" size={TextSize.ExtraLarge}>\n                    <Compensation\n                        from={compensation.from}\n                        to={compensation.to}\n                        currencyCode={compensation.currencyCode}\n                        dash\n                    />\n                    {NON_BREAKING_SPACE}\n                    {trls[compensation.gross ? TrlKeys.gross : TrlKeys.net]}\n                </Text>\n            </span>\n        </>\n    );\n};\n\nexport default translation(VacancyCompensation);\n","import { FC } from 'react';\n\nimport Text, { TextSize } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport VSpacingContainer from 'bloko/blocks/vSpacing/VSpacingContainer';\n\nimport AsyncHighlighter from 'lux/components/Markup/AsyncHighlighter';\nimport { VacancySnippet } from 'lux/models/vacancySearch/vacancySearchItem.types';\n\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\n\ninterface VacancyDescriptionProps {\n    snippet?: VacancySnippet;\n    highlightedShort?: boolean;\n}\n\nconst VacancyDescription: FC<VacancyDescriptionProps> = ({ snippet, highlightedShort }) => {\n    const { wideCardContainerClassName, narrowCardContainerClassName } = useCardContainerClassNames();\n    if (!snippet?.resp && !snippet?.req) {\n        return null;\n    }\n    return (\n        <div className=\"g-user-content\">\n            <span className={narrowCardContainerClassName}>\n                <VSpacing base={4} />\n                <VSpacingContainer base={2}>\n                    {snippet.resp && (\n                        <Text size={TextSize.Medium} data-qa=\"vacancy-serp__vacancy_snippet_responsibility\">\n                            <AsyncHighlighter short={highlightedShort}>{snippet.resp}</AsyncHighlighter>\n                        </Text>\n                    )}\n                    {snippet.req && (\n                        <Text size={TextSize.Medium} data-qa=\"vacancy-serp__vacancy_snippet_requirement\">\n                            <AsyncHighlighter short={highlightedShort}>{snippet.req}</AsyncHighlighter>\n                        </Text>\n                    )}\n                </VSpacingContainer>\n            </span>\n\n            <span className={wideCardContainerClassName}>\n                <VSpacing base={5} />\n                <VSpacingContainer base={2}>\n                    {snippet.resp && (\n                        <Text size={TextSize.Large} data-qa=\"vacancy-serp__vacancy_snippet_responsibility\">\n                            <AsyncHighlighter short={highlightedShort}>{snippet.resp}</AsyncHighlighter>\n                        </Text>\n                    )}\n                    {snippet.req && (\n                        <Text size={TextSize.Large} data-qa=\"vacancy-serp__vacancy_snippet_requirement\">\n                            <AsyncHighlighter short={highlightedShort}>{snippet.req}</AsyncHighlighter>\n                        </Text>\n                    )}\n                </VSpacingContainer>\n            </span>\n        </div>\n    );\n};\n\nexport default VacancyDescription;\n","import classnames from 'classnames';\n\nimport Text, { TextSize, TextImportance } from 'bloko/blocks/text';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport { ExperienceOption } from 'lux/models/search/searchCriteria.types';\n\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\n\nconst TrlKeys = {\n    experience: 'vacancy.experience.title',\n    [ExperienceOption.NoExperience]: 'vacancy.experience.noExperience',\n    [ExperienceOption.Between1And3]: 'vacancy.experience.between1And3',\n    [ExperienceOption.Between3And6]: 'vacancy.experience.between3And6',\n    [ExperienceOption.MoreThan6]: 'vacancy.experience.moreThan6',\n};\n\ninterface VacancyExperience {\n    workExperience: ExperienceOption;\n}\n\nconst VacancyExperience: TranslatedComponent<VacancyExperience> = ({ workExperience, trls }) => {\n    const { wideCardContainerClassName, narrowCardContainerClassName, separateLineOnNarrowCardClassName } =\n        useCardContainerClassNames();\n    if (!workExperience) {\n        return null;\n    }\n\n    return (\n        <>\n            <span className={classnames(narrowCardContainerClassName, separateLineOnNarrowCardClassName)}>\n                <Text\n                    Element=\"span\"\n                    size={TextSize.Medium}\n                    importance={TextImportance.Tertiary}\n                    data-qa=\"vacancy-serp__vacancy-work-experience\"\n                >\n                    {workExperience === ExperienceOption.NoExperience\n                        ? trls[TrlKeys[workExperience]]\n                        : format(trls[TrlKeys.experience], { '{0}': trls[TrlKeys[workExperience]] })}\n                </Text>\n            </span>\n\n            <span className={wideCardContainerClassName}>\n                <Text\n                    Element=\"span\"\n                    size={TextSize.Large}\n                    importance={TextImportance.Tertiary}\n                    data-qa=\"vacancy-serp__vacancy-work-experience\"\n                >\n                    {workExperience === ExperienceOption.NoExperience\n                        ? trls[TrlKeys[workExperience]]\n                        : format(trls[TrlKeys.experience], { '{0}': trls[TrlKeys[workExperience]] })}\n                </Text>\n            </span>\n        </>\n    );\n};\n\nexport default translation(VacancyExperience);\n","import VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\n\nimport styles from './styles.less';\n\nconst TrlKeys = {\n    online: 'search.result.item.managerActivity.online',\n};\n\ntype Props = {\n    isEmployerOnline: boolean;\n};\n\nconst VacancyIsEmployerOnline: TranslatedComponent<Props> = ({ trls, isEmployerOnline }) => {\n    if (!isEmployerOnline) {\n        return null;\n    }\n    return (\n        <>\n            <VSpacing base={5} xs={4} />\n            <div className={styles.employerOnline} data-qa=\"vacancy-serp-item-activity\">\n                {trls[TrlKeys.online]}\n            </div>\n        </>\n    );\n};\n\nexport default translation(VacancyIsEmployerOnline);\n","import { ScreenTypes } from 'lux/components/VacancyPercentIndicator';\nimport { ScheduleLowerCase } from 'lux/microcoreModels/schedule';\nimport { VacancySearchItem } from 'lux/models/vacancySearch/vacancySearchItem.types';\nimport { useSelector } from 'lux/modules/useSelector';\nimport UserLabel from 'lux/modules/userLabels';\n\ntype VacancyLabels = {\n    isFewResponsesLabelShown: boolean;\n    isNoResumeLabelShown: boolean;\n    isRemoteAllowedLabelShown: boolean;\n    isAnyLabelShown: boolean;\n    isKeySkillPercentLabelShown?: boolean;\n    matchedKeySkillAnalyticsData?: {\n        matchedKeySkillPercent: number;\n        vacancyId: number;\n        resumeId: number;\n        screenType: ScreenTypes;\n    };\n};\n\nconst THRESHOLD = 10;\n\nexport const useVacancyLabels = ({\n    vacancy,\n    isVacancySnippetRedesignExp,\n}: {\n    vacancy: VacancySearchItem;\n    isVacancySnippetRedesignExp?: boolean;\n}): VacancyLabels => {\n    const {\n        '@workSchedule': workSchedule,\n        vacancyId,\n        totalResponsesCount,\n        type,\n        acceptIncompleteResumes,\n        immediateRedirectUrl,\n    } = vacancy;\n\n    const userLabels = useSelector((state) => state.userLabelsForVacancies[vacancyId]);\n    const isResponded = userLabels?.includes(UserLabel.Response);\n    const isFewResponsesLabelShown = totalResponsesCount < THRESHOLD && type !== 'advertising' && !isResponded;\n    const isNoResumeLabelShown = Boolean(acceptIncompleteResumes || immediateRedirectUrl);\n    const isRemoteAllowedLabelShown = workSchedule === ScheduleLowerCase.Remote;\n\n    const {\n        usedResumeId: resumeId = 0,\n        matchingResultMap,\n        isSuitableSearch,\n    } = useSelector((state) => state.searchCounts || {});\n\n    if (isVacancySnippetRedesignExp) {\n        const percent = matchingResultMap?.[vacancyId]?.match_percentage || 0;\n        const matchedKeySkillAnalyticsData = {\n            matchedKeySkillPercent: percent,\n            vacancyId,\n            resumeId,\n            screenType: isSuitableSearch ? ScreenTypes.Suitable : ScreenTypes.Simple,\n        };\n\n        const isKeySkillPercentLabelShown = Boolean(matchedKeySkillAnalyticsData.matchedKeySkillPercent);\n        const isAnyLabelShown =\n            isFewResponsesLabelShown ||\n            isNoResumeLabelShown ||\n            isRemoteAllowedLabelShown ||\n            isKeySkillPercentLabelShown;\n\n        return {\n            isFewResponsesLabelShown,\n            isNoResumeLabelShown,\n            isRemoteAllowedLabelShown,\n            isAnyLabelShown,\n            isKeySkillPercentLabelShown,\n            matchedKeySkillAnalyticsData,\n        };\n    }\n\n    const isAnyLabelShown = isFewResponsesLabelShown || isNoResumeLabelShown || isRemoteAllowedLabelShown;\n    return {\n        isFewResponsesLabelShown,\n        isNoResumeLabelShown,\n        isRemoteAllowedLabelShown,\n        isAnyLabelShown,\n    };\n};\n","import VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport Label, { LabelType, LabelColor } from 'lux/components/Label';\nimport { useVacancyLabels } from 'lux/components/VacancySearchItem/Labels/useVacancyLabels';\nimport translation from 'lux/components/translation';\nimport { VacancySearchItem } from 'lux/models/vacancySearch/vacancySearchItem.types';\n\nimport styles from './styles.less';\n\nconst TrlKeys = {\n    skillsPercentage: 'label.skillsPercentage',\n};\n\ntype VacancyLabelsProps = {\n    vacancy: VacancySearchItem;\n};\n\nconst VacancyLabels: TranslatedComponent<VacancyLabelsProps> = ({ vacancy, trls }) => {\n    const {\n        isFewResponsesLabelShown,\n        isNoResumeLabelShown,\n        isRemoteAllowedLabelShown,\n        isKeySkillPercentLabelShown,\n        matchedKeySkillAnalyticsData,\n        isAnyLabelShown,\n    } = useVacancyLabels({\n        vacancy,\n        isVacancySnippetRedesignExp: true,\n    });\n\n    if (!isAnyLabelShown) {\n        return null;\n    }\n\n    return (\n        <>\n            <VSpacing base={5} xs={4} />\n            <div className={styles.labels}>\n                {isKeySkillPercentLabelShown && (\n                    <Label\n                        type={LabelType.SkillsPercentage}\n                        dataQa={`vacancy-label-${LabelType.SkillsPercentage}`}\n                        color={LabelColor.LightGreen}\n                        Content={formatToReactComponent(trls[TrlKeys.skillsPercentage], {\n                            '{0}': matchedKeySkillAnalyticsData?.matchedKeySkillPercent ?? '',\n                        })}\n                    />\n                )}\n                {isNoResumeLabelShown && (\n                    <Label\n                        type={LabelType.NoResume}\n                        dataQa={`vacancy-label-${LabelType.NoResume}`}\n                        color={LabelColor.LightGreen}\n                    />\n                )}\n                {isFewResponsesLabelShown && (\n                    <Label\n                        type={LabelType.BeFirst}\n                        dataQa={`vacancy-label-${LabelType.BeFirst}`}\n                        color={LabelColor.LightGreen}\n                    />\n                )}\n                {isRemoteAllowedLabelShown && (\n                    <Label\n                        type={LabelType.RemoteWorkSchedule}\n                        dataQa={`vacancy-label-${LabelType.RemoteWorkSchedule}`}\n                        color={LabelColor.LightGreen}\n                    />\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default translation(VacancyLabels);\n","import { FC, PropsWithChildren } from 'react';\nimport classnames from 'classnames';\n\nimport brandySnippetButtonClick from '@hh.ru/analytics-js-events/build/xhh/applicant/branding/brandy_snippet/brandy_snippet_button_click';\nimport vacancySuitableItemButtonClick from '@hh.ru/analytics-js-events/build/xhh/applicant/vacancy/vacancy_suitable_item_button_click';\nimport vacancySimilarItemForEmployerButtonClick from '@hh.ru/analytics-js-events/build/xhh/employer/vacancy/vacancy_similar_item_for_employer_button_click';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport BlokoLink from 'bloko/blocks/link';\n\nimport { updateUrl } from 'Modules/url';\nimport { useBrandedSnippet } from 'lux/components/BrandedSnippet/BrandedSnippet';\nimport { RelatedVacanciesType } from 'lux/components/RelatedVacancies/relatedVacanciesTypes';\nimport { createSearchVacancyOfTheDayClickUrl } from 'lux/components/VacanciesOfTheDay/Utils';\nimport { UserType } from 'lux/models/userType';\nimport { VacancySearchItem } from 'lux/models/vacancySearch/vacancySearchItem.types';\nimport { sendAnythingClickAnalytics, VacancyOfTheDayLocation } from 'lux/modules/sendAdvSpyAnalytics';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport Source from 'lux/components/VacancySearchItem/Source';\n\nexport interface LinkToVacancyProps {\n    vacancy: VacancySearchItem;\n    vacancySource: string;\n    hhtmFromLabel?: string;\n    criteriaText: string;\n    isVacancySnippetRedesignExp?: boolean;\n    className?: string;\n}\n\n// Для браузерной подсветки поверх encodeURIComponent экранируем символы [!'()*]\nconst fixedEncodeURIComponent = (str: string) =>\n    encodeURIComponent(str).replace(/[!'()*]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n\n// используем fixedEncodeURIComponent для экранирования\nconst fixedQueryStringify = (queryObject: Record<string, string>) =>\n    Object.keys(queryObject).reduce((resultQueryString, paramKey) => {\n        const newQueryParam = queryObject[paramKey]\n            ? `${paramKey}=${fixedEncodeURIComponent(queryObject[paramKey])}`\n            : '';\n\n        return `${resultQueryString}${resultQueryString && newQueryParam ? '&' : ''}${newQueryParam}`;\n    }, '');\n\ninterface ComputeUrl {\n    (props: {\n        criteriaText: string;\n        isAdv?: boolean;\n        clickUrl?: string;\n        advClickUrl?: string;\n        desktopLink: string;\n        isVacancyOfTheDay?: boolean;\n    }): string;\n}\n\nconst computeUrl: ComputeUrl = ({ criteriaText, isAdv, clickUrl, advClickUrl, desktopLink, isVacancyOfTheDay }) => {\n    const queryParams = fixedQueryStringify({\n        query: criteriaText,\n    });\n\n    let url: string;\n\n    switch (true) {\n        case Boolean(isAdv && clickUrl):\n            url = updateUrl(clickUrl as string, { clickType: 'link_to_vacancy' });\n            break;\n        case Boolean(advClickUrl):\n            url = advClickUrl as string;\n            break;\n        default:\n            url = `${desktopLink}${queryParams ? `?${queryParams}` : ''}`;\n    }\n\n    return createSearchVacancyOfTheDayClickUrl(url, isVacancyOfTheDay);\n};\n\nconst LinkToVacancy: FC<LinkToVacancyProps & PropsWithChildren> = ({\n    vacancy,\n    vacancySource,\n    hhtmFromLabel,\n    criteriaText,\n    children,\n    isVacancySnippetRedesignExp,\n    className,\n}) => {\n    const { '@click': advClickUrl, clickUrl, '@isAdv': isAdv, links, vacancyId, isVacancyOfTheDay } = vacancy;\n    const vacancyView = useSelector((state) => state.vacancyView);\n    const userType = useSelector((state) => state.userType);\n\n    const isBot = useSelector((state) => state.isBot);\n    const isSearchCatalog = useSelector((state) => state.isSearchCatalog);\n\n    const isSeoLink = isBot && isSearchCatalog;\n\n    const url = computeUrl({\n        criteriaText,\n        isAdv,\n        clickUrl,\n        advClickUrl,\n        isVacancyOfTheDay,\n        desktopLink: links.desktop,\n    });\n\n    // tempexp_27388_next_line\n    const { brandingData } = useBrandedSnippet(vacancy);\n\n    const sendClickAnalytics = () => {\n        if (vacancy.isVacancyOfTheDay && vacancy.clickUrl) {\n            void sendAnythingClickAnalytics({\n                location: VacancyOfTheDayLocation.VacancySearchResult,\n                clickUrl: vacancy.clickUrl,\n            });\n        }\n\n        if (vacancySource === Source.RelatedVacancies) {\n            vacancySuitableItemButtonClick({\n                hhtmSourceLabel: 'vacancy_bottom_block',\n                vacancyId: vacancyView.vacancyId as number,\n                vacancyTargetId: vacancyId,\n            });\n        }\n\n        if (vacancySource === Source.EmployerRelatedVacancies) {\n            vacancySimilarItemForEmployerButtonClick({\n                recommendationType:\n                    userType === UserType.Anonymous ? RelatedVacanciesType.Similar : RelatedVacanciesType.Suitable,\n                vacancyId: vacancyView.vacancyId || 0,\n                relatedVacancyId: vacancyId,\n            });\n        }\n\n        // tempexp_27388_next_line\n        Boolean(brandingData) && brandySnippetButtonClick({ vacancyId: vacancy.vacancyId });\n    };\n\n    return (\n        <span className=\"serp-item__title-link-wrapper\">\n            <BlokoLink\n                Element={Link}\n                to={url}\n                additionalQueryParams={{ hhtmFromLabel }}\n                target=\"_blank\"\n                isSeoLink={isSeoLink}\n                onClick={sendClickAnalytics}\n            >\n                <span\n                    className={classnames(className, 'serp-item__title-link', {\n                        'serp-item__title': !isVacancySnippetRedesignExp,\n                        'serp-item__title-link_redesign': isVacancySnippetRedesignExp,\n                    })}\n                    data-qa=\"serp-item__title\"\n                >\n                    {children}\n                </span>\n            </BlokoLink>\n        </span>\n    );\n};\n\nexport default LinkToVacancy;\n","import { FC } from 'react';\nimport classnames from 'classnames';\n\nimport { LabelFlameFilledSize24, LabelFlameFilledSize16 } from '@hh.ru/magritte-ui/product';\nimport { H2Section, H3Section } from 'bloko/blocks/header';\n\nimport LinkToVacancy, { LinkToVacancyProps } from 'lux/components/VacancySearchItem/LinkToVacancy';\n\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\n\nimport styles from './styles.less';\n\ntype VacancyNameProps = {\n    name: string;\n    vacancyLinkProps: LinkToVacancyProps;\n    isPremiumOrVacancyOfTheDay: boolean;\n};\n\nconst VacancyName: FC<VacancyNameProps> = ({ name, vacancyLinkProps, isPremiumOrVacancyOfTheDay }) => {\n    const { wideCardContainerClassName, narrowCardContainerClassName } = useCardContainerClassNames();\n\n    return (\n        <>\n            <span className={classnames(narrowCardContainerClassName, styles.vacancyName)}>\n                <H3Section>\n                    <LinkToVacancy {...vacancyLinkProps} className={styles.tertiaryLink} isVacancySnippetRedesignExp>\n                        {name}\n                        {isPremiumOrVacancyOfTheDay && (\n                            <span className={styles.premiumContainer}>\n                                <LabelFlameFilledSize16 initial=\"negative\" />\n                            </span>\n                        )}\n                    </LinkToVacancy>\n                </H3Section>\n            </span>\n            <span className={classnames(wideCardContainerClassName, styles.vacancyName)}>\n                <H2Section>\n                    <LinkToVacancy {...vacancyLinkProps} className={styles.tertiaryLink} isVacancySnippetRedesignExp>\n                        {name}\n                        {isPremiumOrVacancyOfTheDay && (\n                            <span className={styles.premiumContainer}>\n                                <LabelFlameFilledSize24 initial=\"negative\" />\n                            </span>\n                        )}\n                    </LinkToVacancy>\n                </H2Section>\n            </span>\n        </>\n    );\n};\n\nexport default VacancyName;\n","import ConversionNumber from 'bloko/blocks/conversion';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\n\ntype VacancyWatchersCount = {\n    onlineUsersCount?: number;\n};\n\nconst TrlKeys = {\n    watching: {\n        one: 'vacancySearch.card.views.one',\n        some: 'vacancySearch.card.views.some',\n        many: 'vacancySearch.card.views.many',\n    },\n};\n\nconst VacancyWatchersCount: TranslatedComponent<VacancyWatchersCount> = ({ onlineUsersCount, trls }) => {\n    if (!onlineUsersCount || onlineUsersCount < 1) {\n        return null;\n    }\n\n    return (\n        <>\n            <VSpacing base={5} xs={4} />\n            <Text importance={TextImportance.Tertiary}>\n                <ConversionNumber\n                    value={onlineUsersCount}\n                    one={trls[TrlKeys.watching.one]}\n                    some={trls[TrlKeys.watching.some]}\n                    many={trls[TrlKeys.watching.many]}\n                    hasValue={false}\n                    format={(trl) =>\n                        format(trl, {\n                            '{0}': onlineUsersCount,\n                        })\n                    }\n                />\n            </Text>\n        </>\n    );\n};\n\nexport default translation(VacancyWatchersCount);\n","import Text, { TextImportance } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport RespondedSuccess from 'lux/components/Applicant/Response/RespondedSuccess';\nimport VacancySearchItemDebug from 'lux/components/Debug/SearchDebug';\nimport Divider from 'lux/components/ResumeCard/Divider';\nimport Advertising from 'lux/components/VacancySearchItem/Advertising';\nimport VacancyLogo from 'lux/components/VacancySearchItem/Logo';\nimport Source from 'lux/components/VacancySearchItem/Source';\nimport VacancyCardButtons from 'lux/components/VacancySearchItem/VacancyCardButtons';\nimport translation from 'lux/components/translation';\nimport { UserType } from 'lux/models/userType';\nimport { VacancySearchItem, ACTIVITY_ONLINE } from 'lux/models/vacancySearch/vacancySearchItem.types';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport AdaptiveHSpacing from 'lux/components/VacancySearchItemRedesign/AdaptiveHSpacing';\nimport VacancyCompany from 'lux/components/VacancySearchItemRedesign/VacancyCompany';\nimport VacancyCompensation from 'lux/components/VacancySearchItemRedesign/VacancyCompensation';\nimport VacancyDescription from 'lux/components/VacancySearchItemRedesign/VacancyDescription';\nimport VacancyExperience from 'lux/components/VacancySearchItemRedesign/VacancyExperience';\nimport VacancyIsEmployerOnline from 'lux/components/VacancySearchItemRedesign/VacancyIsEmployerOnline';\nimport VacancyLabels from 'lux/components/VacancySearchItemRedesign/VacancyLabels';\nimport VacancyName from 'lux/components/VacancySearchItemRedesign/VacancyName';\nimport VacancyWatchersCount from 'lux/components/VacancySearchItemRedesign/VacancyWatchersCount';\nimport { useCardContainerClassNames } from 'lux/components/VacancySearchItemRedesign/useCardContainerClassNames';\n\nimport styles from './styles.less';\n\nconst Features = {\n    isPropertiesUsingEnabled: 'is_properties_using_enabled',\n};\n\nconst TrlKeys = {\n    archived: 'vacancySearch.vacancyCard.archived',\n};\n\ntype VacancySearchItemProps = {\n    vacancy: VacancySearchItem;\n    vacancySource: Source;\n    hhtmFromLabel?: string;\n    criteriaText: string;\n};\n\nconst VacancySearchItemRedesign: TranslatedComponent<VacancySearchItemProps> = ({\n    vacancy,\n    vacancySource,\n    hhtmFromLabel,\n    criteriaText,\n    trls,\n}) => {\n    const {\n        vacancyId,\n        '@isAdv': isAdv,\n        '@showContact': showContact,\n        area,\n        address,\n        'hr-brand': hrBrand,\n        name,\n        employerManager,\n        archived,\n        compensation,\n        workExperience,\n        immediateRedirectUrl: vrImmediateRedirectUrl,\n        chatWritePossibility,\n        properties,\n        isVacancyOfTheDay,\n        metallic,\n        type,\n        searchDebug,\n        snippet,\n        company,\n        clickUrl,\n        insider,\n        online_users_count: onlineUsersCount,\n    } = vacancy;\n    const vacancyLinkProps = {\n        vacancySource,\n        hhtmFromLabel,\n        criteriaText,\n        vacancy,\n    };\n    const { wideCardContainerClassName } = useCardContainerClassNames();\n    const isPropertiesUsingEnabled = useSelector(({ features }) => features[Features.isPropertiesUsingEnabled]);\n    const userType = useSelector((state) => state.userType);\n    const isEmployerOnline = employerManager.latestActivity === ACTIVITY_ONLINE;\n\n    const isEmployer = useSelector((state) => state.userType === UserType.Employer);\n    const shouldShowAdv = isAdv && isEmployer;\n\n    const isPremiumOrVacancyOfTheDay = isPropertiesUsingEnabled\n        ? Boolean(properties.isPremium || !!isVacancyOfTheDay)\n        : metallic === 'premium' || !!isVacancyOfTheDay;\n\n    const vacancyOfTheDayClickUrl = isVacancyOfTheDay && vacancy.clickUrl ? vacancy.clickUrl : null;\n    const hasCompensationAndExperience = (compensation.from || compensation.to) && workExperience;\n\n    return (\n        <div className={styles.vacancyCard}>\n            {Boolean(archived) && (\n                <div data-qa=\"vacancy-serp__vacancy_archived\" className={styles.vacancyArchived}>\n                    <Text importance={TextImportance.Tertiary}>{trls[TrlKeys.archived]}</Text>\n                    <VSpacing base={4} xs={3} />\n                </div>\n            )}\n\n            <div className={styles.vacancyLogoContainer}>\n                <VacancyLogo\n                    company={company}\n                    isPremiumOrVacancyOfTheDay={isPremiumOrVacancyOfTheDay}\n                    isVacancySnippetRedesignExp\n                />\n                <VacancyLogo\n                    company={company}\n                    isPremiumOrVacancyOfTheDay={isPremiumOrVacancyOfTheDay}\n                    isVacancySnippetRedesignExp\n                    forXs\n                />\n            </div>\n\n            <VacancyName\n                name={name}\n                vacancyLinkProps={vacancyLinkProps}\n                isPremiumOrVacancyOfTheDay={isPremiumOrVacancyOfTheDay}\n            />\n            <VSpacing base={4} xs={3} />\n            <VacancyCompensation compensation={compensation} />\n            {hasCompensationAndExperience && (\n                <span className={wideCardContainerClassName}>\n                    <AdaptiveHSpacing />\n                    <Divider />\n                    <AdaptiveHSpacing />\n                </span>\n            )}\n            <VacancyExperience workExperience={workExperience} />\n            <VSpacing base={5} xs={4} />\n\n            <VacancyCompany company={company} hrBrand={hrBrand} insider={insider} area={area} address={address} />\n            <VacancyLabels vacancy={vacancy} />\n            <VacancyDescription snippet={snippet} highlightedShort={vacancySource === Source.VacancySearch} />\n            <VacancyIsEmployerOnline isEmployerOnline={isEmployerOnline} />\n            <VacancyWatchersCount onlineUsersCount={onlineUsersCount} />\n            {shouldShowAdv && (\n                <>\n                    <VSpacing base={2} />\n                    <Advertising />\n                </>\n            )}\n            <VacancyCardButtons\n                vacancyId={vacancyId}\n                vacancySource={vacancySource}\n                companyId={company.id}\n                showContact={showContact}\n                chatWritePossibility={chatWritePossibility}\n                vrImmediateRedirectUrl={vrImmediateRedirectUrl ?? ''}\n                vacancyType={type}\n                clickUrl={clickUrl ?? ''}\n                vacancyOfTheDayClickUrl={vacancyOfTheDayClickUrl}\n                address={address}\n                isAdv={Boolean(isAdv)}\n                isArchived={Boolean(archived)}\n                isVacancySnippetRedesignExp\n            />\n            {searchDebug && <VacancySearchItemDebug {...searchDebug} />}\n            {userType === UserType.Applicant && (\n                <div className=\"serp-item-link-disable\">\n                    <RespondedSuccess vacancyId={vacancyId} defaultView=\"search\" isVacancySnippetRedesignExp />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default translation(VacancySearchItemRedesign);\n","import VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { UserType } from 'lux/models/userType';\nimport { VacancyEmployerManager, ACTIVITY_ONLINE } from 'lux/models/vacancySearch/vacancySearchItem.types';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport Advertising from 'lux/components/VacancySearchItem/Advertising';\n\ninterface ActivityAndAdvProps {\n    employerManager: VacancyEmployerManager;\n    isAdv: boolean;\n}\n\nconst TrlKeys = {\n    online: 'search.result.item.managerActivity.online',\n};\n\nconst ActivityAndAdv: TranslatedComponent<ActivityAndAdvProps> = ({ employerManager, isAdv, trls }) => {\n    const isEmployer = useSelector((state) => state.userType === UserType.Employer);\n    const isOnline = employerManager.latestActivity === ACTIVITY_ONLINE;\n    const shouldShowAdv = isAdv && isEmployer;\n\n    if (!isOnline && !shouldShowAdv) {\n        return null;\n    }\n    return (\n        <>\n            {isOnline && (\n                <div className=\"vacancy-serp-item-activity\" data-qa=\"vacancy-serp-item-activity\">\n                    {trls[TrlKeys.online]}\n                </div>\n            )}\n            {isOnline && shouldShowAdv && <VSpacing base={1} />}\n            {shouldShowAdv && <Advertising />}\n            <VSpacing base={4} />\n        </>\n    );\n};\n\nexport default translation(ActivityAndAdv);\n","import PropTypes from 'prop-types';\n\nimport Text, { TextSize, TextImportance } from 'bloko/blocks/text';\n\nimport MetroPoint from 'lux/components/MetroPoint';\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nconst Address = ({ area, address, trls }) => {\n    const metroList = address?.metroStations?.metro?.filter((metro) => metro['@cityId'] === area['@id']);\n\n    return (\n        <Text size={TextSize.Medium} importance={TextImportance.Primary} data-qa=\"vacancy-serp__vacancy-address\">\n            {area?.name}\n            {metroList?.length > 0 && (\n                <>\n                    {', '}\n                    <MetroPoint name={metroList[0].name} color={metroList[0].line.color} small />\n                    {metroList.length > 1 && (\n                        <>\n                            {' '}\n                            {trls[Address.trls.moreMetro]}\n                            {NON_BREAKING_SPACE}\n                            {metroList.length - 1}\n                            {NON_BREAKING_SPACE}\n                            {metroList.map((metro, index) => {\n                                if (index === 0) {\n                                    return null;\n                                }\n                                return <MetroPoint key={metro['@id']} color={metroList[index].line.color} small />;\n                            })}\n                        </>\n                    )}\n                </>\n            )}\n        </Text>\n    );\n};\n\nAddress.trls = {\n    moreMetro: 'search.result.item.metro.more',\n};\n\nAddress.propTypes = {\n    area: PropTypes.shape({\n        name: PropTypes.string,\n        '@id': PropTypes.number,\n    }),\n    address: PropTypes.shape({\n        metroStations: PropTypes.shape({\n            metro: PropTypes.arrayOf(\n                PropTypes.shape({\n                    '@cityId': PropTypes.number,\n                    name: PropTypes.string,\n                    line: PropTypes.shape({\n                        color: PropTypes.string,\n                    }),\n                })\n            ),\n        }),\n    }),\n    trls: PropTypes.object,\n};\n\nexport default translation(Address);\n","import PropTypes from 'prop-types';\n\nimport Text, { TextSize, TextImportance } from 'bloko/blocks/text';\n\nimport ItAccreditation from 'lux/components/Employer/ItAccreditation';\nimport TrustedEmployerCheck from 'lux/components/Employer/TrustedEmployerCheck';\nimport EmployerBadgesIconWrapper from 'lux/components/EmployerBadges/EmployerBadgesIconWrapper';\nimport PrepareEmployerHHRating, {\n    getEmployerHHRatingBadge,\n} from 'lux/components/EmployerHHRatingIcon/PrepareEmployerHHRating';\nimport translation from 'lux/components/translation';\n\nimport CompanyName from 'lux/components/VacancySearchItem/CompanyName';\nimport HRBrand from 'lux/components/VacancySearchItem/HRBrand';\n\nconst Company = ({ company, advClickUrl, hrBrand, trls, isEmployerLinkDisabled }) => {\n    if (!company?.visibleName) {\n        return null;\n    }\n\n    const employerHHRatingBadge = getEmployerHHRatingBadge(company?.badges);\n\n    return (\n        <Text size={TextSize.Medium} importance={TextImportance.Primary}>\n            {advClickUrl && <div className=\"mark\">{trls[Company.trls.advMark]}</div>}\n            <div className=\"vacancy-serp-item__meta-info-company\">\n                <CompanyName\n                    company={company}\n                    advClickUrl={advClickUrl}\n                    isEmployerLinkDisabled={isEmployerLinkDisabled}\n                />\n            </div>\n            <EmployerBadgesIconWrapper>\n                {company['@trusted'] && <TrustedEmployerCheck isServiceIcon />}\n                {company.accreditedITEmployer && <ItAccreditation />}\n                {hrBrand && <HRBrand hrBrand={hrBrand} isRedesignedSerp />}\n                {employerHHRatingBadge && (\n                    <PrepareEmployerHHRating\n                        badge={employerHHRatingBadge}\n                        isRedesignedSerp\n                        dataQa=\"vacancy-serp__vacancy_\"\n                    />\n                )}\n            </EmployerBadgesIconWrapper>\n        </Text>\n    );\n};\n\nCompany.trls = {\n    advMark: 'vacancyItem.advMark',\n};\n\nCompany.propTypes = {\n    company: PropTypes.shape({\n        id: PropTypes.number,\n        visibleName: PropTypes.string,\n        department: PropTypes.shape({\n            '@code': PropTypes.string,\n        }),\n        employerOrganizationFormId: PropTypes.number,\n        '@trusted': PropTypes.bool,\n        badges: PropTypes.object,\n        accreditedITEmployer: PropTypes.bool,\n    }),\n    hrBrand: PropTypes.shape({\n        type: PropTypes.string,\n        '@url': PropTypes.string,\n        '@year': PropTypes.number,\n    }),\n    advClickUrl: PropTypes.string,\n    trls: PropTypes.object,\n    isEmployerLinkDisabled: PropTypes.bool,\n};\n\nexport default translation(Company);\n","import { FC } from 'react';\n\nimport { H2Section } from 'bloko/blocks/header';\n\nimport Compensation from 'lux/components/Compensation';\nimport VacancyCompenstionType from 'lux/models/vacancy/compensation.type';\n\ninterface VacancyCompensationProps {\n    compensation: VacancyCompenstionType;\n}\n\nconst VacancyCompensation: FC<VacancyCompensationProps> = ({ compensation }) => {\n    if (!compensation.from && !compensation.to) {\n        return null;\n    }\n    return (\n        <H2Section Element=\"span\" data-qa=\"vacancy-serp__vacancy-compensation\">\n            <Compensation from={compensation.from} to={compensation.to} currencyCode={compensation.currencyCode} dash />\n        </H2Section>\n    );\n};\n\nexport default VacancyCompensation;\n","import PropTypes from 'prop-types';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Icon, { IconKind, IconScale, IconView, IconAppearance, IconShape } from 'bloko/blocks/icon';\nimport Text, { TextSize } from 'bloko/blocks/text';\n\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\nconst Insider = ({ insider, employerId, trls }) => {\n    if (!insider || !insider['@isVisible']) {\n        return null;\n    }\n    return (\n        <Link\n            className=\"interview-insider__link m-interview-insider__link-searchresult\"\n            to={`/interview/${insider.id}?employerId=${employerId}`}\n            data-qa=\"vacancy-serp__vacancy-interview-insider\"\n        >\n            <Text size={TextSize.Small}>\n                {trls[Insider.trls.interviewInsider]}\n                {NON_BREAKING_SPACE}\n                <Icon\n                    view={IconView.Bubble}\n                    kind={IconKind.Double}\n                    appearance={IconAppearance.Outlined}\n                    shape={IconShape.Round}\n                    scale={IconScale.Small}\n                />\n            </Text>\n        </Link>\n    );\n};\n\nInsider.trls = {\n    interviewInsider: 'vacancySearchResults.vacancy.interviewInsider',\n};\n\nInsider.propTypes = {\n    insider: PropTypes.shape({\n        id: PropTypes.number,\n        '@isVisible': PropTypes.bool,\n    }),\n    employerId: PropTypes.number,\n    trls: PropTypes.object,\n};\n\nexport default translation(Insider);\n","// extracted by mini-css-extract-plugin\nexport default {\"labels\":\"labels--CBiQJ5KZ2PKw9wf0Aizk\"};","import VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport Label, { LabelType } from 'lux/components/Label';\nimport translation from 'lux/components/translation';\nimport { VacancySearchItem } from 'lux/models/vacancySearch/vacancySearchItem.types';\n\nimport { useVacancyLabels } from 'lux/components/VacancySearchItem/Labels/useVacancyLabels';\n\nimport styles from './vacancy-labels.less';\n\nconst VacancyLabels: TranslatedComponent<{ vacancy: VacancySearchItem }> = ({ vacancy }) => {\n    const { isFewResponsesLabelShown, isNoResumeLabelShown, isRemoteAllowedLabelShown, isAnyLabelShown } =\n        useVacancyLabels({ vacancy });\n\n    if (!isAnyLabelShown) {\n        return null;\n    }\n\n    return (\n        <>\n            <div className={styles.labels}>\n                {isNoResumeLabelShown && (\n                    <Label type={LabelType.NoResume} dataQa={`vacancy-label-${LabelType.NoResume}`} />\n                )}\n                {isFewResponsesLabelShown && (\n                    <Label type={LabelType.BeFirst} dataQa={`vacancy-label-${LabelType.BeFirst}`} />\n                )}\n                {isRemoteAllowedLabelShown && (\n                    <Label\n                        type={LabelType.RemoteWorkSchedule}\n                        dataQa={`vacancy-label-${LabelType.RemoteWorkSchedule}`}\n                    />\n                )}\n            </div>\n            <VSpacing base={3} />\n        </>\n    );\n};\n\nexport default translation(VacancyLabels);\n","import { FC } from 'react';\n\nimport { H3Section } from 'bloko/blocks/header';\nimport { Service, ServiceView, ServiceKind, ServiceScale } from 'bloko/blocks/icon';\nimport VSpacing from 'bloko/blocks/vSpacing';\n\nimport LinkToVacancy, { LinkToVacancyProps } from 'lux/components/VacancySearchItem/LinkToVacancy';\n\ninterface NameProps {\n    vacancyLinkProps: LinkToVacancyProps;\n    name: string;\n    isPremiumOrVacancyOfTheDay: boolean;\n}\n\nconst Name: FC<NameProps> = ({ name, vacancyLinkProps, isPremiumOrVacancyOfTheDay }) => {\n    return (\n        <>\n            <H3Section>\n                <span data-page-analytics-event=\"vacancy_search_suitable_item\">\n                    <LinkToVacancy {...vacancyLinkProps}>{name}</LinkToVacancy>\n                </span>\n                {isPremiumOrVacancyOfTheDay && (\n                    <Service view={ServiceView.Label} kind={ServiceKind.Flame} scale={ServiceScale.Small} />\n                )}\n            </H3Section>\n            <VSpacing base={1} />\n        </>\n    );\n};\n\nexport default Name;\n","import { FC, PropsWithChildren } from 'react';\n\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\n\nimport AsyncHighlighter from 'lux/components/Markup/AsyncHighlighter';\nimport { VacancySnippet } from 'lux/models/vacancySearch/vacancySearchItem.types';\n\ninterface SnippetProps {\n    snippet?: VacancySnippet;\n    highlightedShort?: boolean;\n}\n\nconst Snippet: FC<SnippetProps & PropsWithChildren> = ({ snippet, highlightedShort }) => {\n    if (!snippet?.resp && !snippet?.req) {\n        return null;\n    }\n\n    return (\n        <div className=\"vacancy-serp-item__info\">\n            <div className=\"g-user-content\">\n                {snippet.resp && (\n                    <Text data-qa=\"vacancy-serp__vacancy_snippet_responsibility\">\n                        <AsyncHighlighter short={highlightedShort}>{snippet.resp}</AsyncHighlighter>\n                    </Text>\n                )}\n                {snippet.resp && snippet.req && <VSpacing base={2} />}\n                {snippet.req && (\n                    <Text data-qa=\"vacancy-serp__vacancy_snippet_requirement\">\n                        <AsyncHighlighter short={highlightedShort}>{snippet.req}</AsyncHighlighter>\n                    </Text>\n                )}\n            </div>\n            <VSpacing base={4} />\n        </div>\n    );\n};\n\nexport default Snippet;\n","// extracted by mini-css-extract-plugin\nexport default {\"onlineUsers\":\"online-users--tWT3_ck7eF8Iv5SpZ6WL\"};","import Conversion from 'bloko/blocks/conversion';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\n\nimport styles from './users-online.less';\n\nconst TrlKeys = {\n    titleZero: 'search.vacancy.userAreViewingCounter.zero',\n    titleOne: 'search.vacancy.userAreViewingCounter.one',\n    titleSome: 'search.vacancy.userAreViewingCounter.some',\n    titleMany: 'search.vacancy.userAreViewingCounter.many',\n};\n\ninterface UsersOnlineProps {\n    counter: number;\n}\n\nconst UsersOnline: TranslatedComponent<UsersOnlineProps> = ({ trls, counter }) => {\n    return (\n        <>\n            <div className={styles.onlineUsers}>\n                <Conversion\n                    value={counter}\n                    zero={trls[TrlKeys.titleZero]}\n                    one={trls[TrlKeys.titleOne]}\n                    some={trls[TrlKeys.titleSome]}\n                    many={trls[TrlKeys.titleMany]}\n                    hasValue={false}\n                    format={(trl) =>\n                        format(trl, {\n                            '{0}': counter,\n                        })\n                    }\n                />\n            </div>\n            <VSpacing base={1} />\n        </>\n    );\n};\n\nexport default translation(UsersOnline);\n","// extracted by mini-css-extract-plugin\nexport default {\"iconWrapper\":\"icon-wrapper--m8EPyssCb56xnYBhXKJX\"};","import HSpacing from 'bloko/blocks/hSpacing';\nimport HSpacingContainer from 'bloko/blocks/hSpacing/HSpacingContainer';\nimport Icon, { IconScale, IconView } from 'bloko/blocks/icon';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { format } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport { ExperienceOption } from 'lux/models/search/searchCriteria.types';\n\nimport styles from './work-experience.less';\n\nconst TrlKeys = {\n    experience: 'vacancy.experience.title',\n    [ExperienceOption.NoExperience]: 'vacancy.experience.noExperience',\n    [ExperienceOption.Between1And3]: 'experience.lowercase.between1And3',\n    [ExperienceOption.Between3And6]: 'experience.lowercase.between3And6',\n    [ExperienceOption.MoreThan6]: 'experience.lowercase.moreThan6',\n};\n\ninterface WorkExperienceProps {\n    workExperience: ExperienceOption;\n}\n\nconst WorkExperience: TranslatedComponent<WorkExperienceProps> = ({ trls, workExperience }) => {\n    if (!workExperience) {\n        return null;\n    }\n\n    return (\n        <>\n            <HSpacingContainer>\n                <div className={styles.iconWrapper}>\n                    <Icon view={IconView.Briefcase} scale={IconScale.Small} />\n                </div>\n                <HSpacing base={2} />\n                <Text data-qa=\"vacancy-serp__vacancy-work-experience\">\n                    {workExperience === ExperienceOption.NoExperience\n                        ? trls[TrlKeys[workExperience]]\n                        : format(trls[TrlKeys.experience], { '{0}': trls[TrlKeys[workExperience]] })}\n                </Text>\n            </HSpacingContainer>\n            <VSpacing base={4} />\n        </>\n    );\n};\n\nexport default translation(WorkExperience);\n","import { useRef, useCallback } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport VSpacingContainer from 'bloko/blocks/vSpacing/VSpacingContainer';\n\nimport RespondedSuccess from 'lux/components/Applicant/Response/RespondedSuccess';\nimport BrandedSnippet, { useBrandedSnippet } from 'lux/components/BrandedSnippet/BrandedSnippet';\nimport BrandedSnippetInject from 'lux/components/BrandedSnippet/BrandedSnippetInject';\nimport VacancySearchItemDebug from 'lux/components/Debug/SearchDebug';\nimport useVacancyOfTheDayAnalytics from 'lux/components/VacanciesOfTheDay/hooks/useVacancyOfTheDayViewAnalytics';\nimport VacancyPercentIndicator from 'lux/components/VacancyPercentIndicator';\nimport VacancySearchItemRedesign from 'lux/components/VacancySearchItemRedesign';\nimport translation from 'lux/components/translation';\nimport useExperiment from 'lux/hooks/useExperiment';\nimport { useIsZarplataPlatform } from 'lux/hooks/usePlatform';\nimport { UserType } from 'lux/models/userType';\nimport { VacancyOfTheDayLocation } from 'lux/modules/sendAdvSpyAnalytics';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport VacancySearchItemActivityAndAdv from 'lux/components/VacancySearchItem/ActivityAndAdv';\nimport VacancySearchItemAddress from 'lux/components/VacancySearchItem/Address';\nimport VacancySearchItemCompany from 'lux/components/VacancySearchItem/Company';\nimport VacancySearchItemCompensation from 'lux/components/VacancySearchItem/Compensation';\nimport VacancySearchItemInsider from 'lux/components/VacancySearchItem/Insider';\nimport VacancyLabels from 'lux/components/VacancySearchItem/Labels';\nimport VacancySearchItemLogo from 'lux/components/VacancySearchItem/Logo';\nimport VacancySearchItemName from 'lux/components/VacancySearchItem/Name';\nimport Snippet from 'lux/components/VacancySearchItem/Snippet';\nimport Source from 'lux/components/VacancySearchItem/Source';\nimport UsersOnline from 'lux/components/VacancySearchItem/UsersOnline';\nimport VacancyCardButtons from 'lux/components/VacancySearchItem/VacancyCardButtons';\nimport VacancyWorkExperience from 'lux/components/VacancySearchItem/WorkExperience';\n\nconst Features = {\n    isPropertiesUsingEnabled: 'is_properties_using_enabled',\n};\n\nconst VacancyOfTheDaySpyingProps = {\n    elementLockTime: 2000,\n    entryPercent: 0.5,\n};\n\nconst VacancySearchItem = ({ trls, vacancy, vacancySource, hhtmFromLabel, criteriaText, isXs, render }) => {\n    const {\n        '@click': advClickUrl,\n        '@isAdv': isAdv,\n        '@showContact': showContact,\n        'hr-brand': hrBrand,\n        address,\n        archived,\n        area,\n        chatWritePossibility,\n        clickUrl,\n        company,\n        compensation,\n        employerManager,\n        immediateRedirectUrl: vrImmediateRedirectUrl,\n        insider,\n        isVacancyOfTheDay,\n        metallic,\n        name,\n        online_users_count: onlineUsersCount,\n        searchDebug,\n        snippet,\n        type,\n        vacancyId,\n        workExperience,\n        properties,\n        vacancyProperties,\n    } = vacancy;\n    const vacancyLinkProps = {\n        vacancySource,\n        hhtmFromLabel,\n        criteriaText,\n        vacancy,\n    };\n    const userType = useSelector((state) => state.userType);\n    const vacancyRef = useRef();\n    const isPropertiesUsingEnabled = useSelector(({ features }) => features[Features.isPropertiesUsingEnabled]);\n    // tempexp_25841_start\n    const isNoStripExperimentBase = useExperiment('clickme_25841_no_strip');\n    const isNoStripWithLogoExperiment = useExperiment('clickme_25841_no_strip_with_logo');\n    const isNoStripExperiment = isNoStripExperimentBase || isNoStripWithLogoExperiment;\n    // tempexp_25841_end\n\n    const vacancyOfTheDayViewAnalyticsSubscribe = useVacancyOfTheDayAnalytics(\n        vacancy,\n        VacancyOfTheDayLocation.VacancySearchResult,\n        VacancyOfTheDaySpyingProps\n    );\n\n    const isZarplata = useIsZarplataPlatform();\n\n    // tempexp_27388_next_line\n    const { showBrandedSnippetVariantB, showBrandedSnippetVariantC, brandingData } = useBrandedSnippet(vacancy);\n\n    const isEmployerLinkDisabled =\n        isZarplata &&\n        vacancyProperties.properties &&\n        vacancyProperties.properties.flatMap((e) => e.property).some((e) => e.propertyType === 'ZP_CROSSPOSTING');\n\n    // tempexp_25841_start\n    let isPremiumOrVacancyOfTheDay = isPropertiesUsingEnabled\n        ? properties.isPremium || !!isVacancyOfTheDay\n        : metallic === 'premium' || !!isVacancyOfTheDay;\n    isPremiumOrVacancyOfTheDay ||= isAdv && isNoStripWithLogoExperiment;\n    // tempexp_25841_end\n\n    const vacancyOfTheDayClickUrl = isVacancyOfTheDay && vacancy.clickUrl ? vacancy.clickUrl : null;\n\n    const isVacancySnippetRedesignExp = useSelector((state) => state.isVacancySnippetRedesignExp);\n\n    const content = isVacancySnippetRedesignExp ? (\n        <VacancySearchItemRedesign\n            vacancy={vacancy}\n            vacancySource={vacancySource}\n            hhtmFromLabel={hhtmFromLabel}\n            criteriaText={criteriaText}\n        />\n    ) : (\n        <div className=\"vacancy-serp-item__layout\">\n            {/* tempexp_27388_next_line BrandedSnippet */}\n            <BrandedSnippetInject\n                vacancy={vacancy}\n                vacancySource={vacancySource}\n                vacancyOfTheDayClickUrl={vacancyOfTheDayClickUrl}\n            >\n                <div className=\"vacancy-serp-item-body\">\n                    <div className=\"vacancy-serp-item-body__main-info\">\n                        {onlineUsersCount > 0 && <UsersOnline counter={onlineUsersCount} />}\n                        <div\n                            className={classnames({\n                                'vacancy-serp-item-header': userType === UserType.Applicant && isXs,\n                            })}\n                        >\n                            <VacancySearchItemName\n                                name={name}\n                                vacancyLinkProps={vacancyLinkProps}\n                                isPremiumOrVacancyOfTheDay={isPremiumOrVacancyOfTheDay}\n                            />\n                            <VacancySearchItemCompensation compensation={compensation} />\n                            <VSpacing base={3} />\n                        </div>\n                        <div className=\"vacancy-serp-item-company\">\n                            <div className=\"vacancy-serp-item__info\">\n                                {!!archived && (\n                                    <div data-qa=\"vacancy-serp__vacancy_archived\">\n                                        {trls[VacancySearchItem.trls.archived]}\n                                    </div>\n                                )}\n                                <VSpacingContainer base={2}>\n                                    <VacancySearchItemCompany\n                                        company={company}\n                                        advClickUrl={advClickUrl}\n                                        hrBrand={hrBrand}\n                                        isEmployerLinkDisabled={isEmployerLinkDisabled}\n                                    />\n                                </VSpacingContainer>\n                                <VacancySearchItemAddress area={area} address={address} />\n                                <VacancySearchItemInsider insider={insider} employerId={company?.id} />\n                                <VSpacing base=\"3\" />\n                            </div>\n                            <VacancySearchItemLogo\n                                company={company}\n                                isPremiumOrVacancyOfTheDay={isPremiumOrVacancyOfTheDay}\n                                isEmployerLinkDisabled={isEmployerLinkDisabled}\n                                forXs\n                            />\n                        </div>\n                    </div>\n                    {/* tempexp_27388_next_line !brandingData */}\n                    {!brandingData && (\n                        <VacancySearchItemLogo\n                            company={company}\n                            isPremiumOrVacancyOfTheDay={isPremiumOrVacancyOfTheDay}\n                            isEmployerLinkDisabled={isEmployerLinkDisabled}\n                        />\n                    )}\n                </div>\n                <VacancyPercentIndicator vacancyId={vacancyId} />\n                <VacancyWorkExperience workExperience={workExperience} />\n                <VacancyLabels vacancy={vacancy} />\n                <Snippet snippet={snippet} highlightedShort={vacancySource === Source.VacancySearch} />\n                <VacancySearchItemActivityAndAdv employerManager={employerManager} isAdv={isAdv} />\n                {/* tempexp_27388_next_line !showBrandedSnippetVariantC */}\n                {!showBrandedSnippetVariantC && (\n                    <VacancyCardButtons\n                        vacancyId={vacancyId}\n                        vacancySource={vacancySource}\n                        companyId={company.id}\n                        showContact={showContact}\n                        chatWritePossibility={chatWritePossibility}\n                        vrImmediateRedirectUrl={vrImmediateRedirectUrl}\n                        vacancyType={type}\n                        clickUrl={clickUrl}\n                        vacancyOfTheDayClickUrl={vacancyOfTheDayClickUrl}\n                        address={address}\n                        isAdv={isAdv}\n                        isArchived={Boolean(archived)}\n                    />\n                )}\n                {searchDebug && <VacancySearchItemDebug {...searchDebug} />}\n                {userType === UserType.Applicant &&\n                    // tempexp_27388_next_line !brandingData\n                    !brandingData && (\n                        <div className=\"serp-item-link-disable\">\n                            <RespondedSuccess vacancyId={vacancyId} defaultView=\"search\" />\n                        </div>\n                    )}\n            </BrandedSnippetInject>\n        </div>\n    );\n\n    const handleAbortEvent = useCallback((e) => {\n        // Блокируем захват ссылок для корректной работы SwipeWrapper.\n        e.preventDefault();\n    }, []);\n\n    // tempexp_27388_start\n    if (showBrandedSnippetVariantC) {\n        return (\n            <BrandedSnippet vacancy={vacancy} isVariantC>\n                <div\n                    ref={(element) => {\n                        vacancyOfTheDayViewAnalyticsSubscribe(element);\n                        vacancyRef.current = element;\n                    }}\n                    className={classnames('serp-branded-item', 'serp-item_link', {\n                        'vacancy-serp-item_clickme': isAdv,\n                    })}\n                    data-qa={classnames('vacancy-serp__vacancy', {\n                        [`vacancy-serp__vacancy_${metallic}`]: metallic,\n                    })}\n                    onMouseDown={handleAbortEvent}\n                >\n                    {render ? render(content, vacancyRef) : content}\n                </div>\n            </BrandedSnippet>\n        );\n    }\n    // tempexp_27388_end\n\n    return (\n        <div\n            ref={(element) => {\n                vacancyOfTheDayViewAnalyticsSubscribe(element);\n                vacancyRef.current = element;\n            }}\n            className={classnames('serp-item', 'serp-item_link', {\n                // tempexp_25841_next-line\n                'vacancy-serp-item_clickme': isAdv && !isNoStripExperiment,\n                'serp-item-redesign': isVacancySnippetRedesignExp,\n                'serp-item-tempexp_27388': showBrandedSnippetVariantB,\n            })}\n            data-qa={classnames('vacancy-serp__vacancy', {\n                [`vacancy-serp__vacancy_${metallic}`]: metallic,\n            })}\n            onMouseDown={handleAbortEvent}\n        >\n            {render ? render(content, vacancyRef) : content}\n        </div>\n    );\n};\n\nVacancySearchItem.trls = {\n    archived: 'vacancy.view.archived.title',\n};\n\nVacancySearchItem.propTypes = {\n    vacancy: PropTypes.shape({\n        // eslint-disable-next-line camelcase\n        online_users_count: PropTypes.number,\n        vacancyProperties: PropTypes.shape({\n            properties: PropTypes.array,\n        }),\n        vacancyId: PropTypes.number,\n        '@isAdv': PropTypes.bool,\n        isVacancyOfTheDay: PropTypes.bool,\n        '@click': PropTypes.string,\n        'hr-brand': PropTypes.shape({\n            type: PropTypes.string,\n            '@url': PropTypes.string,\n            '@year': PropTypes.number,\n        }),\n        '@showContact': PropTypes.bool,\n        name: PropTypes.string,\n        compensation: PropTypes.shape({\n            from: PropTypes.number,\n            to: PropTypes.number,\n            currencyCode: PropTypes.string,\n        }),\n        metallic: PropTypes.string,\n        clickUrl: PropTypes.string,\n        archived: PropTypes.shape({\n            '@hidden': PropTypes.bool,\n        }),\n        company: PropTypes.shape({\n            id: PropTypes.number,\n            visibleName: PropTypes.string,\n            department: PropTypes.shape({\n                '@code': PropTypes.string,\n            }),\n            employerOrganizationFormId: PropTypes.number,\n            '@trusted': PropTypes.bool,\n            logos: PropTypes.shape({\n                '@showInSearch': PropTypes.bool,\n                logo: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        '@type': PropTypes.string,\n                        '@url': PropTypes.string,\n                    })\n                ),\n            }),\n        }),\n        '@advClickUrl': PropTypes.string,\n        area: PropTypes.shape({\n            name: PropTypes.string,\n            '@id': PropTypes.number,\n        }),\n        address: PropTypes.shape({\n            metroStations: PropTypes.shape({\n                metro: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        '@cityId': PropTypes.number,\n                        name: PropTypes.string,\n                        line: PropTypes.shape({\n                            color: PropTypes.string,\n                        }),\n                    })\n                ),\n            }),\n        }),\n        '@hrBrand': PropTypes.shape({\n            type: PropTypes.string,\n            '@url': PropTypes.string,\n            '@year': PropTypes.number,\n        }),\n        insider: PropTypes.shape({\n            id: PropTypes.number,\n            '@isVisible': PropTypes.bool,\n        }),\n        snippet: PropTypes.shape({\n            resp: PropTypes.string,\n            req: PropTypes.string,\n        }),\n        '@howContact': PropTypes.bool,\n        type: PropTypes.string,\n        employerManager: PropTypes.shape({\n            latestActivity: PropTypes.string,\n        }),\n        searchDebug: PropTypes.shape({\n            score: PropTypes.number,\n            explanation: PropTypes.string,\n        }),\n        immediateRedirectUrl: PropTypes.string,\n        chatWritePossibility: PropTypes.string,\n        workExperience: PropTypes.string,\n        viewUrl: PropTypes.string,\n        properties: PropTypes.object,\n    }),\n    vacancySource: PropTypes.oneOf(Object.values(Source)),\n    hhtmFromLabel: PropTypes.string,\n    criteriaText: PropTypes.string,\n    isXs: PropTypes.bool.isRequired,\n    trls: PropTypes.object,\n    render: PropTypes.func,\n};\n\nexport default translation(VacancySearchItem);\n","import { VacancyCompany } from 'lux/models/vacancySearch/vacancySearchItem.types';\n\nconst useGetCompanyUrl = (company: VacancyCompany, advClickUrl?: string): string => {\n    let companyUrl = `/employer/${company.id}`;\n\n    if (company.department || advClickUrl) {\n        companyUrl += '?';\n        if (company.department) {\n            companyUrl += `dpt=${company.department?.['@code']}`;\n        }\n        if (advClickUrl) {\n            companyUrl += '&from=vacancySearchAds&hhtmFromLabel=vacancySearchAds';\n        }\n    }\n\n    return companyUrl;\n};\n\nexport default useGetCompanyUrl;\n"],"names":["initialValue","getBranding","BrandedSnippetContext","createContext","useBrandedSnippetContext","useContext","SearchDebug","score","explanation","visible","toggleVisible","useToggleState","base","appearance","LinkAppearance","onClick","className","classnames","scale","ButtonScale","kind","ButtonKind","ButtonAppearance","navigator","clipboard","writeText","EmployerHHRatingIcon","employerHHRating","size","ServiceScale","dataQa","isRedesignedSerp","isRedesignedVacancy","isVacancySnippetRedesignExp","Link","to","url","target","rel","type","render","description","placement","TipPlacement","layer","TipLayer","host","document","body","Service","view","ServiceView","ServiceKind","getEmployerHHRatingBadge","badges","badge","filter","badgeItem","PrepareEmployerHHRating","isVacancyPage","anyProps","urlParams","useSelector","state","userType","data","TrlKeys","winners","nominees","HrBrandContent","hrBrand","trls","Object","keys","map","hrBrandType","year","translation","HrBrandIcon","isRedesignedIcon","dataQaSpecific","join","LabelColor","LabelType","CustomContent","Popular","Recommend","New","SkillsPercentage","Active","Pause","NoMoney","LimitReached","NoResume","BeFirst","RemoteWorkSchedule","defaultLabelColors","Green","LightYellow","LightGreen","Yellow","Gray","LightViolet","Label","color","withCircle","Content","spanProps","labelColor","styles","Orange","LightOrange","Violet","LightRed","LightBlue","RelatedVacanciesType","RELATED_VACANCIES_TYPES","SIMILAR","Similar","SUITABLE","Suitable","Divider","DOT","profileVisibilityAgreementAction","makeSetStoreField","ARTICLES","uzbekistan","conditions","rules","common","CountriesProfileVisibilityAgreementPopup","vacancyId","dispatch","useDispatch","countriesProfileVisibilityAgreement","isCommon","countryType","titleTrl","descriptionTrl","articles","show","onClose","addNotification","APPLICANT_RESPONSE_ABORT","confirmed","useBottomSheet","ModalHeader","ModalTitle","ModalContent","formatToReactComponent","disableVisited","Element","ModalFooter","relocationWarningAction","RelocationWarningPopup","relocationWarning","dismiss","regionTrl","FormSpacer","ResumeDeliveredForm","responseData","readPercent","topicId","hasResponseLetter","isLetterTextEmpty","letterMaxLength","showLetterForm","setShowLetterForm","useState","isLetterFormSuccessSend","setLetterFormSuccessSend","TextSize","strong","format","FormItem","importance","TextImportance","italic","setSuccessSend","Number","submitButtonStretched","stretched","ResumeWithPhoto","resume","children","photo","photoUrls","preview","gender","string","CdnImg","loading","path","alt","Gender","ResumeSelectForm","selectedResume","resumes","setSelectedResume","H2Section","index","area","title","salary","Fragment","name","defaultChecked","id","Analytics","resumeHash","_attributes","hash","resumesCount","length","onResumeClick","reversed","numberFormatter","String","amount","groupSeparator","NON_BREAKING_SPACE","Currency","value","currency","ResponseStep","Header","allowClick","outlined","IconView","initial","IconColor","IconKind","IconScale","PopupHeader","isXs","onXsClick","responseStatus","applicantVacancyResponseStatuses","isFirstResponse","usedResumeIds","vacancyName","shortVacancy","Popup","vacancyBodyFooterNodeRef","vacancySource","submitting","setSubmitting","vacancy","responseErrorCode","setResponseErrorCode","responseImpossible","unusedResumeIds","lastResumeHash","lastVacancyResponseInfo","useMemo","getUserResumes","find","responseStep","setResponseStep","Initial","setResponseData","postponedActions","useRef","handleModalClose","Done","setTimeout","current","forEach","action","renderModalInner","renderForm","formId","ResumeSelect","ModalError","VacancyResponseError","code","cancel","form","ButtonType","disabled","LoadingColor","LoadingScale","submit","default","repeat","xs","VacancyResponseForm","onResponse","errorCode","onError","isBottomSheet","closeButtonShow","propTypes","PropTypes","values","Source","vacancyResponsePopupVisibleAction","VacancyResponsePopup","isPopupVisible","vacancyResponsePopupVisible","responsePopup","vacancyResponsePopup","popupType","closePopup","isCancel","onCancelCallback","PopupType","AdvertisingPopup","useBrandedSnippet","brandingData","showBrandedSnippetVariantB","showVariantC","showBrandedSnippetVariantC","BrandedSnippet","isVariantC","company","companyUrl","useGetCompanyUrl","ref","useElementShown","brandySnippetElementShown","Debug","desktopLogoC","xsLogo","desktopImageC","background","backgroundDeskC","desktopLogo","desktopImage","backgroundDesk","style","backgroundImage","undefined","visibleName","brandySnippetCompanyButtonClick","src","hasPictureB","Boolean","AdvAnalyticsTypes","sendAdvSearchVacancyAnalytics","params","isAdv","clickUrl","analyticsType","fetcher","updateUrl","clickType","BlacklistStatus","BlacklistButton","employerId","withFavorite","onFavoriteStateChanged","wideCardContainerClassName","narrowCardContainerClassName","useCardContainerClassNames","useBreakpoint","Breakpoint","isFavoritesPage","router","location","pathname","startsWith","isClient","useIsClient","BlacklistMenu","vacancyType","status","flexible","IconAppearance","crossed","Favorite","isFavoriteVacancy","toggleIsFavoriteVacancy","isAvailableChangeFavoriteState","useFavorite","isSendUxFeedback","isLargeButton","addToFavorite","getDataQa","Actions","onFavoriteButtonClick","UserType","ResponseButton","vrImmediateRedirectUrl","vacancyOfTheDayClickUrl","userLabels","userLabelsForVacancies","isHrZarplataDomain","useIsHrZarplataDomain","isResponded","includes","UserLabel","isInvited","isDiscarded","showWorkflowStatus","respondedState","text","linkKind","LinkKind","enclosed","workflowState","responded","invited","discard","toUrl","hhtmFromLabel","adVacancyClickUrl","chat","toChat","VacancyResponseLink","enableRelocationWarning","onResponseComplete","incrementApplicantInvitationsCount","isFetching","response","place","VacancySearchItemContacts","contactInfo","address","callTrackingEnabled","chatButtonInfo","chatWritePossibility","isZarplata","useIsZarplataPlatform","onClickPhone","from","vacancy_id","onClickEmail","onClickAddress","addressMapButtonClick","hhtmSourceLabel","fio","email","phones","displayName","onPhoneClick","onEmailClick","onAddressClick","phone","country","city","number","comment","href","paths","ShowContactsButton","showContact","asyncContacts","setAsyncContacts","contactsVisible","setContactsVisible","setChatButtonInfo","loadContacts","setLoadContacts","searchLoading","userLabel","isAnonymous","registerInteraction","useRegisterInteraction","handleClick","async","contactsJson","axios","error","VACANCY_SEARCH_ITEM_CONTACTS_ERROR","fetchResponseType","fetchContacts","initialRender","useEffect","then","chatInfo","showCloseButton","RegistrationAction","DownPlacement","collapsible","Features","VacancyCardButtons","companyId","isArchived","hideInterfaceForModerators","features","isVacanciesMap","userId","shouldHideInterfaceForModerators","split","isAnonymousOnXs","onShowContactsButtonClick","useCallback","ContactsButton","favoriteState","FavoriteButton","showWorkflowStatusRedesign","BrandedSnippetInject","archived","immediateRedirectUrl","spyParams","unsubscribe","isVacancyOfTheDay","viewUrl","useLayoutEffect","element","sendAnythingViewAnalytics","ScreenTypes","VacancyPercentIndicator","usedResumeId","resumeId","matchingResultMap","isSuitableSearch","searchCounts","percent","match_percentage","analyticsData","matchedKeySkillPercent","screenType","Simple","ElementShownAnchor","fn","vacancyKeySkillResumeMatchElementShown","Advertising","withSeparator","LogoVariants","Logo","isPremiumOrVacancyOfTheDay","forXs","isEmployerLinkDisabled","isMapVacancySearch","logos","logoVariants","logo","reduce","variant","visibleLogoUrl","customVacancyLogo","medium","cdnImage","ACTIVITY_ONLINE","AdaptiveHSpacing","CompanyName","advClickUrl","OrganizationForm","organizationFormId","employerOrganizationFormId","HRBrand","VacancyAddress","metroList","metroStations","metro","separateLineOnNarrowCardClassName","MetroPoint","line","small","VacancyCompany","insider","employerHHRatingBadge","hasAtLeastOneBadge","accreditedITEmployer","hasInsiderLink","isVisible","EmployerBadgesIconWrapper","TrustedEmployerCheck","isServiceIcon","ItAccreditation","InsiderInterviewLink","VacancyCompensation","compensation","Compensation","currencyCode","dash","gross","VacancyDescription","snippet","highlightedShort","resp","req","AsyncHighlighter","short","experience","ExperienceOption","VacancyExperience","workExperience","VacancyIsEmployerOnline","isEmployerOnline","useVacancyLabels","workSchedule","totalResponsesCount","acceptIncompleteResumes","isFewResponsesLabelShown","isNoResumeLabelShown","isRemoteAllowedLabelShown","ScheduleLowerCase","matchedKeySkillAnalyticsData","isKeySkillPercentLabelShown","isAnyLabelShown","VacancyLabels","fixedQueryStringify","queryObject","resultQueryString","paramKey","newQueryParam","str","encodeURIComponent","replace","c","charCodeAt","toString","toUpperCase","LinkToVacancy","criteriaText","links","vacancyView","isBot","isSearchCatalog","isSeoLink","desktopLink","queryParams","query","createSearchVacancyOfTheDayClickUrl","computeUrl","desktop","additionalQueryParams","sendAnythingClickAnalytics","VacancyOfTheDayLocation","vacancySuitableItemButtonClick","vacancyTargetId","vacancySimilarItemForEmployerButtonClick","recommendationType","relatedVacancyId","brandySnippetButtonClick","VacancyName","vacancyLinkProps","H3Section","LabelFlameFilledSize16","LabelFlameFilledSize24","one","some","many","VacancyWatchersCount","onlineUsersCount","hasValue","trl","VacancySearchItemRedesign","employerManager","properties","metallic","searchDebug","online_users_count","isPropertiesUsingEnabled","latestActivity","isEmployer","shouldShowAdv","isPremium","hasCompensationAndExperience","RespondedSuccess","defaultView","ActivityAndAdv","isOnline","Address","moreMetro","Company","advMark","department","Insider","interviewInsider","shape","IconShape","Name","Snippet","UsersOnline","counter","zero","WorkExperience","VacancyOfTheDaySpyingProps","elementLockTime","entryPercent","VacancySearchItem","vacancyProperties","vacancyRef","isNoStripExperimentBase","useExperiment","isNoStripWithLogoExperiment","isNoStripExperiment","vacancyOfTheDayViewAnalyticsSubscribe","useVacancyOfTheDayAnalytics","flatMap","e","property","propertyType","content","handleAbortEvent","preventDefault","onMouseDown"],"sourceRoot":""}