{"version":3,"file":"96271.07304e9677ca47372c2b.js","mappings":"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","sources":["xhh/./webapp-static/lux/components/Applicant/PhoneVerification/PhoneVerificationError.jsx","xhh/./webapp-static/lux/components/Applicant/PhoneVerification/PhoneVerification.jsx","xhh/./webapp-static/lux/components/Applicant/PhoneVerification/getError.jsx","xhh/./webapp-static/lux/components/Applicant/PhoneVerification/PhoneVerificationFirstStep.jsx","xhh/./webapp-static/lux/components/Applicant/PhoneVerification/PhoneVerificationFlow.jsx","xhh/./webapp-static/lux/components/RowContent/index.tsx","xhh/./webapp-static/lux/hooks/useInitialFormFields.js","xhh/./webapp-static/lux/modules/analytics/formatAnalyticErrors.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport FormItem from 'bloko/blocks/form/FormItem';\nimport { format } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport { arrayToHumanReadableList } from 'lux/modules/humanReadableList';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst PhoneVerificationError = ({ trls, error }) => {\n    const countriesList = useSelector((state) => state.allowedSMSCountries);\n\n    const formErrorReasonText = (error) => {\n        let reasonText = trls[PhoneVerificationError.trls[error] || PhoneVerificationError.trls.UNKNOWN];\n        if (error === 'COUNTRY_BLACKLISTED' && countriesList) {\n            const countriesTrls = countriesList.map((country) => trls[PhoneVerificationError.trls.country[country]]);\n            reasonText = format(trls[PhoneVerificationError.trls.countries], {\n                '{0}': arrayToHumanReadableList(countriesTrls, trls[PhoneVerificationError.trls.and]),\n            });\n        }\n        return reasonText;\n    };\n\n    const renderError = () => {\n        if (!error) {\n            return null;\n        }\n        const reasonText = formErrorReasonText(error);\n\n        return (\n            <FormItem>\n                <span\n                    className=\"validation-error validation-error_small\"\n                    data-qa=\"resumes-page-verification__error-message\"\n                >\n                    {reasonText}\n                </span>\n            </FormItem>\n        );\n    };\n\n    return <div className=\"verification-page__error-wrapper\">{renderError()}</div>;\n};\n\nPhoneVerificationError.trls = {\n    UNKNOWN: 'phoneVerificationPage.error.unknown',\n    BAD_LOGIN: 'phoneVerificationPage.error.BAD_PHONE',\n    NULL_PHONE: 'phoneVerificationPage.error.NULL_PHONE',\n    EMPTY: 'phoneVerificationPage.error.NULL_PHONE',\n    NEED_PHONE: 'phoneVerificationPage.needPhone',\n    COUNTRY_BLACKLISTED: 'phoneVerificationPage.error.restrictedCountry',\n    CODE_SEND_BLOCKED: 'rb.edit.contacts.phone.verify.send.error.CODE_SEND_BLOCKED',\n    countries: 'applicant.resumes.phoneVerification.countries',\n    and: 'applicant.resumes.phoneVerification.countries.and',\n    country: {\n        RU: 'applicant.resumes.phoneVerification.countries.RU',\n        UA: 'applicant.resumes.phoneVerification.countries.UA',\n        BY: 'applicant.resumes.phoneVerification.countries.BY',\n        UZ: 'applicant.resumes.phoneVerification.countries.UZ',\n        AZ: 'applicant.resumes.phoneVerification.countries.AZ',\n        KZ: 'applicant.resumes.phoneVerification.countries.KZ',\n        GE: 'applicant.resumes.phoneVerification.countries.GE',\n        KG: 'applicant.resumes.phoneVerification.countries.KG',\n    },\n};\n\nPhoneVerificationError.propTypes = {\n    trls: PropTypes.object,\n    error: PropTypes.string,\n};\n\nexport default translation(PhoneVerificationError);\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Analytics from '@hh.ru/analytics-js';\nimport { makeSetStoreField } from '@hh.ru/redux-create-reducer';\n\nimport Verification from 'lux/components/Verification/Verification';\nimport formatAnalyticErrors from 'lux/modules/analytics/formatAnalyticErrors';\nimport fetcher from 'lux/modules/fetcher';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nimport getError from 'lux/components/Applicant/PhoneVerification/getError';\n\nconst setRecaptcha = makeSetStoreField('recaptcha');\n\nconst sendAnalytics = (err, phone) =>\n    Analytics.sendHHEventButtonClick(\n        'form_submit',\n        {\n            error: formatAnalyticErrors('otp-code-input', err),\n        },\n        { phone }\n    );\n\nconst PhoneVerification = ({ next, login, loginFormatted, isOnResumeListPage, ...props }) => {\n    const dispatch = useDispatch();\n\n    const onSubmit = async (setIsSending, setVerification, code) => {\n        let response;\n        setIsSending(true);\n\n        try {\n            response = await fetcher.postFormData('/shards/phone/set_verified_phone', {\n                code,\n                phone: login,\n                verificationSource: isOnResumeListPage ? 'applicant_resumes' : 'verification_page',\n            });\n        } catch (error) {\n            setIsSending(false);\n            const err = error.response || showDefaultError(error);\n            sendAnalytics(err, login);\n            dispatch(showDefaultError(error));\n            return;\n        }\n        const data = response.data;\n        const err = getError(data);\n        sendAnalytics(err, login);\n\n        setIsSending(false);\n        if ('recaptcha' in data) {\n            dispatch(setRecaptcha(data.recaptcha));\n\n            if (data.recaptcha.isBot) {\n                return;\n            }\n        }\n\n        if (response?.data?.verification?.success) {\n            next();\n            return;\n        }\n\n        setVerification(response?.data?.verification);\n    };\n\n    return (\n        <Verification\n            authType={'phone'}\n            login={loginFormatted}\n            url={'/shards/otp_generate'}\n            onSubmit={onSubmit}\n            {...props}\n        />\n    );\n};\n\nPhoneVerification.propTypes = {\n    next: PropTypes.func,\n    login: PropTypes.string,\n    loginFormatted: PropTypes.string,\n    isOnResumeListPage: PropTypes.bool,\n};\nexport default PhoneVerification;\n","export default (data) => {\n    const err =\n        (data.recaptcha?.isBot && data.recaptcha) ||\n        (data.verification?.success !== 'true' && data.verification) ||\n        null;\n    return err;\n};\n","import { useState, useRef } from 'react';\nimport { Field as FinalField, Form as FinalForm } from 'react-final-form';\nimport { useDispatch } from 'react-redux';\nimport { matchPath } from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport { useCaptcha } from '@hh.ru/hhcaptcha';\nimport { makeSetStoreField } from '@hh.ru/redux-create-reducer';\nimport Column from 'bloko/blocks/column';\nimport { FormSeparator, FormItem } from 'bloko/blocks/form';\nimport Gap from 'bloko/blocks/gap';\nimport InputText from 'bloko/blocks/inputText';\n\nimport Form from 'lux/components/Form';\nimport FormSubmit from 'lux/components/Forms/Submit';\nimport Hhcaptcha from 'lux/components/Hhcaptcha';\nimport Recaptcha from 'lux/components/Recaptcha';\nimport useInitialFields from 'lux/hooks/useInitialFormFields';\nimport fetcher from 'lux/modules/fetcher';\nimport paths from 'lux/modules/routePaths';\nimport { useSelector } from 'lux/modules/useSelector';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nimport PhoneVerificationError from 'lux/components/Applicant/PhoneVerification/PhoneVerificationError';\n\nconst formFields = ['phone'];\n\nconst requiredValidator = (value) => (value?.trim?.() ? undefined : 'EMPTY');\nconst otpAction = makeSetStoreField('otp');\n\nconst PhoneVerificationFirstStep = ({ placeholder, submitText, next, hideCaptcha }) => {\n    const [isFetching, setFetching] = useState(false);\n    const formElement = useRef(null);\n    const submitRef = useRef(null);\n    const initialFields = useInitialFields(formElement, formFields);\n    const { pathname } = useSelector(({ router }) => router.location);\n    const [fieldsVerification, setFieldsVerification] = useState({});\n    const dispatch = useDispatch();\n    const captcha = useCaptcha();\n\n    const isPhoneVerificationPath = [paths.applicantResumes, paths.applicantPhoneVerification].some((path) =>\n        matchPath(pathname, {\n            path,\n            exact: true,\n            strict: true,\n        })\n    );\n\n    const autoCompleteLogin = isPhoneVerificationPath ? { autoComplete: 'off' } : {};\n\n    const submitVerifyPhone = async () => {\n        setFetching(true);\n        const formData = new FormData(formElement.current);\n        captcha.addCaptchaParams(formData);\n        let data;\n        try {\n            const response = await fetcher.postFormData('/shards/otp_generate', formData);\n            data = response.data;\n        } catch (error) {\n            const err = error.response?.data?.key;\n            if (err) {\n                setFieldsVerification({ error: err });\n            } else {\n                dispatch(showDefaultError(error));\n            }\n            setFetching(false);\n            return;\n        }\n\n        setFetching(false);\n\n        captcha.updateCaptcha(data);\n        if (data.recaptcha?.isBot || data.hhcaptcha?.isBot) {\n            return;\n        }\n\n        dispatch(otpAction(data.otp));\n\n        if (data.success || data.key === 'CODE_SEND_BLOCKED') {\n            next(data.otp);\n        } else {\n            setFieldsVerification({ error: data.key });\n        }\n    };\n\n    const renderInputWithIcon = ({ input, meta }) => (\n        <>\n            <FormItem>\n                <InputText {...input} name={'login'} invalid={!!meta.error} {...autoCompleteLogin} />\n            </FormItem>\n            <PhoneVerificationError error={meta.error} />\n        </>\n    );\n\n    return (\n        <FinalForm\n            onSubmit={submitVerifyPhone}\n            initialValues={{\n                login: initialFields.phone || placeholder,\n            }}\n            render={({ handleSubmit }) => {\n                return (\n                    <Form data-qa={'resume-phone-verification'} onSubmit={handleSubmit} ref={formElement}>\n                        <input type=\"hidden\" name=\"operationType\" value=\"RESUME_PHONE_VERIFICATION\" />\n                        <input type=\"hidden\" name=\"otpType\" value=\"phone\" />\n                        <Column xs=\"4\" s=\"3\" m=\"3\" l=\"3\" container>\n                            <FinalField\n                                data-qa={'resumes-verify-phone'}\n                                validate={requiredValidator}\n                                name={'login'}\n                                placeholder={placeholder}\n                                error={fieldsVerification.error}\n                                render={renderInputWithIcon}\n                            />\n                            <Gap bottom />\n                            {!hideCaptcha && (\n                                <>\n                                    <Recaptcha className=\"resume-recaptcha\" />\n                                    <Hhcaptcha />\n                                </>\n                            )}\n                        </Column>\n                        <FormSeparator />\n                        <div ref={submitRef}>\n                            <div className={'applicant-phone-submit'}>\n                                <FormSubmit data-qa={'phone-verify-submit'} isFetching={isFetching} stretched>\n                                    {submitText}\n                                </FormSubmit>\n                            </div>\n                        </div>\n                    </Form>\n                );\n            }}\n        />\n    );\n};\n\nPhoneVerificationFirstStep.propTypes = {\n    placeholder: PropTypes.string,\n    submitText: PropTypes.string,\n    next: PropTypes.func,\n    trls: PropTypes.object,\n    hideCaptcha: PropTypes.bool,\n};\n\nexport default PhoneVerificationFirstStep;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport Button, { ButtonKind, ButtonAppearance } from 'bloko/blocks/button';\nimport Gap from 'bloko/blocks/gap';\nimport { H3Section } from 'bloko/blocks/header';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { formatToReactComponent } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nimport PhoneVerification from 'lux/components/Applicant/PhoneVerification/PhoneVerification';\nimport PhoneVerificationFirstStep from 'lux/components/Applicant/PhoneVerification/PhoneVerificationFirstStep';\n\nconst STEPS = {\n    VERIFICATION: 'VERIFICATION',\n    CODE_CONFIRM: 'CODE_CONFIRM',\n    SUCCESS: 'SUCCESS',\n    INFO: 'INFO',\n    DONE: 'DONE',\n};\n\nconst PhoneVerificationFlow = ({ initialPhone, initialPhoneFormatted, isOnResumeListPage, resumes, trls }) => {\n    const authPhone = useSelector(({ authPhone }) => authPhone?.raw);\n    const authPhoneFormatted = useSelector(({ authPhone }) => authPhone?.formatted);\n    const isAuthPhoneInResume =\n        resumes.filter((resume) => {\n            if (Array.isArray(resume.phone)) {\n                return resume.phone[0]?.raw === authPhone;\n            }\n            return resume.phone.value[0]?.raw === authPhone;\n        }).length > 0;\n    const [step, setStep] = useState(STEPS.VERIFICATION);\n    const isFirstPhone = !authPhone;\n    const [phone, setPhone] = useState(initialPhone);\n    const [phoneFormatted, setPhoneFormatted] = useState(initialPhoneFormatted);\n    const dispatch = useDispatch();\n\n    const placeholder = initialPhoneFormatted;\n    let title = trls[PhoneVerificationFlow.trls.resumeToAuth.header];\n    let text = trls[PhoneVerificationFlow.trls.authToResume.subheader];\n    let submitText = isOnResumeListPage\n        ? trls[PhoneVerificationFlow.trls.authToResume.submit]\n        : trls[PhoneVerificationFlow.trls.resumeToAuth.submit];\n    const cancelText = trls[PhoneVerificationFlow.trls.resumeToAuth.info.cancel];\n\n    const submitSetVerifiedPhoneToResume = async (newphone) => {\n        try {\n            let allResumePhones;\n            if (isOnResumeListPage) {\n                allResumePhones = resumes\n                    .filter((resume) => resume.phone?.[0]?.raw === initialPhone)\n                    .map((resume) => {\n                        return {\n                            hash: resume._attributes.hash,\n                            phones: resume.phone.map((phone) => ({\n                                formatted: phone.type === 'cell' ? newphone : phone.formatted,\n                                type: phone.type,\n                                comment: phone.comment,\n                            })),\n                        };\n                    });\n            } else {\n                allResumePhones = [\n                    {\n                        hash: resumes[0].hash,\n                        phones: resumes[0].phone.value.map((phone) => ({\n                            formatted: phone.type === 'cell' ? newphone : phone.formatted,\n                            type: phone.type,\n                            comment: phone.comment,\n                        })),\n                    },\n                ];\n            }\n            allResumePhones = JSON.stringify(allResumePhones);\n            const source = isOnResumeListPage ? 'resume_list' : 'resume_phone_verification';\n            await fetcher.postFormData('/shards/phone/set_verified_phone_to_resumes', { allResumePhones, source });\n        } catch (error) {\n            dispatch(showDefaultError(error));\n            return;\n        }\n        setStep(STEPS.SUCCESS);\n    };\n\n    const setNextStep = ({ phone, phoneFormatted }) => {\n        setPhone(phoneFormatted.raw || phone);\n        setPhoneFormatted(phoneFormatted.formatted || phone);\n        if (phoneFormatted === authPhoneFormatted) {\n            submitSetVerifiedPhoneToResume(phoneFormatted);\n            setStep(STEPS.SUCCESS);\n        } else {\n            setStep(STEPS.CODE_CONFIRM);\n        }\n    };\n\n    const setInfoStep = () => {\n        if (isFirstPhone || !isAuthPhoneInResume) {\n            setStep(STEPS.INFO);\n        } else {\n            setStep(STEPS.DONE);\n            if (!isOnResumeListPage) {\n                window.location.assign('/applicant/resumes');\n            }\n        }\n    };\n\n    if (step === STEPS.SUCCESS) {\n        title = trls[PhoneVerificationFlow.trls.resumeToAuth.success.title];\n        text = trls[PhoneVerificationFlow.trls.resumeToAuth.success.text];\n        submitText = trls[PhoneVerificationFlow.trls.authToResume.success];\n    } else if (step === STEPS.INFO) {\n        title = trls[PhoneVerificationFlow.trls.resumeToAuth.info.title];\n        const str = trls[PhoneVerificationFlow.trls.resumeToAuth.info.textFirst];\n        text = formatToReactComponent(str, {\n            '{0}': (\n                <Text Element=\"span\" strong>\n                    {phoneFormatted}\n                </Text>\n            ),\n        });\n        submitText = trls[PhoneVerificationFlow.trls.resumeToAuth.info.submit];\n    }\n\n    if (step === STEPS.DONE) {\n        return null;\n    }\n\n    return (\n        <div className={'applicant-phone-container'}>\n            {step !== STEPS.CODE_CONFIRM && (\n                <>\n                    <H3Section data-qa={'verify-phone-tile'}>{title}</H3Section>\n                    <VSpacing base={4} />\n                    <Gap bottom>{text}</Gap>\n                </>\n            )}\n            <div className={classnames({ 'g-hidden': step !== STEPS.VERIFICATION })}>\n                <PhoneVerificationFirstStep\n                    placeholder={placeholder}\n                    submitText={submitText}\n                    next={setNextStep}\n                    hideCaptcha={step !== STEPS.VERIFICATION}\n                />\n            </div>\n            {step === STEPS.CODE_CONFIRM && (\n                <PhoneVerification\n                    next={() => {\n                        submitSetVerifiedPhoneToResume(phone);\n                    }}\n                    login={phone}\n                    loginFormatted={phoneFormatted}\n                    onCancel={() => setStep(STEPS.VERIFICATION)}\n                    cancelText={trls[PhoneVerificationFlow.trls.cancel]}\n                    codePlaceholder={trls[PhoneVerificationFlow.trls.resumeToAuth.verify]}\n                    isOnResumeListPage={isOnResumeListPage}\n                />\n            )}\n            {step === STEPS.SUCCESS && (\n                <Button kind={ButtonKind.Primary} onClick={setInfoStep} data-qa=\"verify-phone-complete\">\n                    {submitText}\n                </Button>\n            )}\n            {step === STEPS.INFO && (\n                <>\n                    <div className={'applicant-phone-infostep-button'}>\n                        <Button\n                            kind={ButtonKind.Primary}\n                            data-qa=\"set-verify-phone-auth-method\"\n                            onClick={() => window.location.assign('/applicant/settings#phone')}\n                        >\n                            {submitText}\n                        </Button>\n                    </div>\n                    <Button\n                        kind={ButtonKind.Primary}\n                        appearance={ButtonAppearance.Outlined}\n                        data-qa=\"verify-phone-finish\"\n                        onClick={() => {\n                            setStep(STEPS.DONE);\n                            if (!isOnResumeListPage) {\n                                window.location.assign('/applicant/resumes');\n                            }\n                        }}\n                    >\n                        {cancelText}\n                    </Button>\n                </>\n            )}\n        </div>\n    );\n};\n\nPhoneVerificationFlow.propTypes = {\n    initialPhone: PropTypes.string,\n    initialPhoneFormatted: PropTypes.string,\n    isOnResumeListPage: PropTypes.bool,\n    resumes: PropTypes.arrayOf(PropTypes.object),\n    trls: PropTypes.object,\n};\n\nPhoneVerificationFlow.trls = {\n    cancel: 'resumes.phoneVerification.cancel',\n    resumeToAuth: {\n        header: 'resumes.phoneVerification.resumeToAuth.header',\n        subheader: 'resumes.phoneVerification.resumeToAuth.subheader',\n        submit: 'resumes.phoneVerification.resumeToAuth.submit',\n        verify: 'resumes.phoneVerification.resumeToAuth.verify',\n        success: {\n            title: 'resumes.phoneVerification.resumeToAuth.success.title',\n            text: 'resumes.phoneVerification.resumeToAuth.success.text',\n        },\n        info: {\n            title: 'resumes.phoneVerification.resumeToAuth.info.title',\n            textFirst: 'resumes.phoneVerification.resumeToAuth.info.text.first',\n            submit: 'resumes.phoneVerification.resumeToAuth.info.submit',\n            cancel: 'resumes.phoneVerification.resumeToAuth.info.cancel',\n        },\n    },\n    authToResume: {\n        submit: 'resumes.phoneVerification.authToResume.many.submit',\n        subheader: 'resumes.phoneVerification.authToResume.subheader',\n        success: 'resumes.phoneVerification.authToResume.success',\n    },\n};\n\nexport default translation(PhoneVerificationFlow);\n","import { FC, PropsWithChildren } from 'react';\n\nconst RowContent: FC<\n    {\n        isShrinked?: boolean;\n    } & PropsWithChildren\n> = ({ children, isShrinked }) => {\n    const cls = isShrinked ? 'row-content_schrinked' : 'row-content';\n    return <div className={cls}>{children}</div>;\n};\n\nexport default RowContent;\n","import { useState, useEffect } from 'react';\n\n// Позволяет задать значения полей формы, которые были добавлены пользователем до инициализации js\nexport default (formElement, fields) => {\n    const [initialFormData, setInitialFormData] = useState(Object.fromEntries(fields.map((field) => [field, ''])));\n\n    useEffect(() => {\n        if (!formElement.current) {\n            return;\n        }\n        const formData = new FormData(formElement.current);\n        setInitialFormData(\n            fields.reduce((result, item) => {\n                result[item] = formData.get ? formData.get(item) : '';\n                return result;\n            }, {})\n        );\n    }, [fields, formElement]);\n\n    return initialFormData;\n};\n","const formatAnalyticErrors = (field, errors, [fieldKey, descriptionKey] = []) => {\n    let formattedErrors = [];\n    if (typeof errors === 'string') {\n        formattedErrors.push({ field, description: errors });\n    } else if (Array.isArray(errors) && errors.length) {\n        formattedErrors = errors.map((error) => ({ field: error[fieldKey], description: error[descriptionKey] }));\n    } else if (errors) {\n        formattedErrors.push({ field, description: errors });\n    }\n    return formattedErrors.length ? JSON.stringify(formattedErrors) : null;\n};\n\nexport default formatAnalyticErrors;\n"],"names":["PhoneVerificationError","trls","error","countriesList","useSelector","state","allowedSMSCountries","className","reasonText","UNKNOWN","countriesTrls","map","country","format","countries","arrayToHumanReadableList","and","formErrorReasonText","renderError","BAD_LOGIN","NULL_PHONE","EMPTY","NEED_PHONE","COUNTRY_BLACKLISTED","CODE_SEND_BLOCKED","RU","UA","BY","UZ","AZ","KZ","GE","KG","propTypes","PropTypes","translation","setRecaptcha","makeSetStoreField","sendAnalytics","err","phone","Analytics","formatAnalyticErrors","PhoneVerification","next","login","loginFormatted","isOnResumeListPage","props","dispatch","useDispatch","Verification","authType","url","onSubmit","async","setIsSending","setVerification","code","response","fetcher","verificationSource","showDefaultError","data","recaptcha","isBot","verification","success","getError","formFields","requiredValidator","value","trim","undefined","otpAction","PhoneVerificationFirstStep","placeholder","submitText","hideCaptcha","isFetching","setFetching","useState","formElement","useRef","submitRef","initialFields","useInitialFields","pathname","router","location","fieldsVerification","setFieldsVerification","captcha","useCaptcha","autoCompleteLogin","paths","some","path","matchPath","exact","strict","autoComplete","renderInputWithIcon","input","meta","FormItem","name","invalid","formData","FormData","current","addCaptchaParams","key","updateCaptcha","hhcaptcha","otp","initialValues","render","handleSubmit","Form","ref","type","xs","s","m","l","container","validate","bottom","Recaptcha","Hhcaptcha","FormSeparator","stretched","STEPS","PhoneVerificationFlow","initialPhone","initialPhoneFormatted","resumes","authPhone","raw","authPhoneFormatted","formatted","isAuthPhoneInResume","filter","resume","Array","isArray","length","step","setStep","isFirstPhone","setPhone","phoneFormatted","setPhoneFormatted","title","resumeToAuth","header","text","authToResume","subheader","submit","cancelText","info","cancel","submitSetVerifiedPhoneToResume","allResumePhones","hash","_attributes","phones","newphone","comment","JSON","stringify","source","str","textFirst","formatToReactComponent","Element","strong","H3Section","base","classnames","onCancel","codePlaceholder","verify","kind","ButtonKind","onClick","window","assign","appearance","ButtonAppearance","RowContent","children","isShrinked","cls","fields","initialFormData","setInitialFormData","Object","fromEntries","field","useEffect","reduce","result","item","get","errors","fieldKey","descriptionKey","formattedErrors","push","description"],"sourceRoot":""}