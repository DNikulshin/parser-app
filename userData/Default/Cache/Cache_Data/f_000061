{"version":3,"file":"92291.d8dec71fd1e0a72aceff.js","mappings":";;;gaA+EMA,EAAY,CAAC,EAAyDC,KAAyB,IAAlF,OAAEC,EAAM,QAAEC,EAAO,OAAEC,GAAoC,EAAzBC,GAAK,YAClD,MAAMC,EAAOC,SAASC,cAAc,UAEpCC,OAAOC,QAAQL,GAAOM,SAAQ,IAAmB,IAAjBC,EAAMC,GAAM,EAExCP,EADaM,GACAC,KAGbT,GACAE,EAAKQ,iBAAiB,OAAQV,GAG9BD,GACAG,EAAKQ,iBAAiB,SAAS,IAAMX,EAAQE,EAAMU,OAGnDb,IACAI,EAAKU,QAAQC,QAAUf,GAG3BD,EAAQiB,YAAYZ,IAGlBa,EAA8BjB,GACEkB,OAAOlB,GAIvCmB,EAAqBnB,GAClBA,EAGEK,SAASe,cAAe,kBAAiBpB,OAFrC,KAKTqB,EAAoD,GA2FpDC,EAA8E,GAE9EC,EAAkBC,MACpBxB,EACAyB,EACAC,KAEA,GAAI1B,GAAUyB,EAAK,CACf,SAjGgBD,OACpBxB,EACA2B,EACAC,EACAF,KACC,MACD,MAAMG,EAAY,IAAIC,SAAeC,IACjC,MAAMC,EAAiBb,EAAkBnB,GACnCE,EAASsB,gBAILS,EAAAA,EAAyB,WAC/B,MAAMC,EAA4BjB,EAA2BjB,GAEzDkC,EAA0BC,eAOxBD,EAA0BE,KAAKC,EAAAA,EAAyBV,IAC9DO,EAA0BC,QAAS,GAP/BJ,KAWFO,EAAWzB,IAAiB,YAC9B,IAAI0B,EAEmB,QAAvB,EAAIC,2BAAmB,OAAqB,QAArB,EAAnB,EAAqBC,2BAAmB,OAAU,QAAV,EAAxC,EAA0CC,gBAAQ,OAAlD,SAAqD,cACrDH,EAAuBI,YAAYC,iBAAiB,YAAYC,QAAQC,KAC7DjC,GAAMiC,EAAMC,KAAKL,SAAS7B,MAIzC,MAAMmC,EAAmD,QAAvB,EAAGT,SAAoB,aAApB,EAAsBU,QAAO,CAACC,EAAMC,IAASD,EAAOC,EAAKC,UAAU,GAEpF,IAAIC,EAAAA,GAAY,MAAOnC,OAAOoC,WAAY,SAElDC,YAAY,CACpBC,OAAQ,gBACR7C,MAAOqC,KAkBThD,KAAUkB,OASPhB,IARD8B,EACKX,EAAmBrB,GAAQyD,MAAK,KAC5BvD,OAhBbJ,EACI,CACIe,IAAKe,EACL8B,KAAM,kBACNC,YAAa,YACbzD,OAAAA,EACAD,QAASqC,EACTtC,OAAAA,GAEJ0B,MAkBZ,OADAL,EAAmBrB,GAAoC,QAA7B,EAAGqB,EAAmBrB,UAAO,QAAI6B,EACpDA,GAwBO+B,CAAgB5D,EAAQ,UAAWyB,EAAKC,GAChD,MAAOmC,GACL,OAAO,KAEX,MAAM3B,EAA4BjB,EAA2BjB,GAGvD8D,SAFgB5B,EAA0B6B,IAAI,YASpD,OALAzC,EAAcI,EAAUsC,UAAUrD,OAAS,CACvCsD,YAAY,EACZC,YAAaJ,EAAOK,QAAQC,WAAWC,QAGpCP,EAAOK,QAGlB,OAAO,MAGLG,EAAuB9C,MACzBxB,EACAuE,EACA9C,EACAC,EACA8C,KAC8B,UAC9B,IAAIC,QAAgBlD,MAAAA,OAAe,EAAfA,EAAkBvB,EAAQyB,EAAKC,IAQnD,OAN4B,QAAxB,EAAAR,OAAOwD,yBAAiB,OAAqB,QAArB,EAAxB,EAA2BH,UAAkB,OAA7C,EAA+CI,wBAA0BF,IAGzEA,EAAUA,KAEP,QAAP,EAAAA,SAAO,OAAP,EAAU,CAAEG,YAAY,EAAOlD,UAAAA,EAAW8C,WAAAA,IACnCC,GASLI,EAA4C,CAC9CC,kBAAmB,CAACC,EAAUpE,KAC1BoE,GAASC,EAAAA,EAAAA,IAAqBrE,MAgJtC,EAjIyBa,MACrByD,EACAC,EACAxD,EACA8C,EACAW,KACmD,MACnD,QAAoBC,IAAhBF,EACA,OAAO,KAEX,MAAMG,EAAc7D,MAAAA,IAAmF,QACnG,GAAkB,OAAdE,EACA,OAAO,KAKX,GAFAA,EAAUsC,UAAUsB,IAAK,iCAAgCC,EAAKhB,qBAE1DgB,EAAKC,cAAsC,KAAtBD,EAAKE,cAAuBF,EAAKG,kBAAmB,CACrEH,EAAKI,cACL7F,EACI,CACI4D,KAAM,kBACNkC,UAAWL,EAAKI,cAEpBjE,GAWR,MAAO,OAPiB4C,EACpBiB,EAAKG,kBACLH,EAAKhB,kBACLgB,EAAKM,YACLnE,EACA8C,GAEee,EAAKhB,mBAG5B7C,EAAUkE,UAAY,GACtB,MAAME,EAAgBzF,SAASC,cAAc,OAwB7C,GAvBAwF,EAAcF,UAAYL,EAAKE,aAC/B/D,EAAUV,YAAY8E,GAEX,QAAX,EAAAP,EAAKQ,cAAM,OAAX,EAAatF,SAASuF,IAhQd,EAAC7F,EAAuBJ,KACpC,MAAMK,EAAOC,SAASC,cAAc,QAE9B2F,EAAU,IAAInE,SAAeC,IAC/B3B,EAAKQ,iBAAiB,QAAQ,KAC1BmB,UAIRxB,OAAO2F,KAAK/F,GAAOM,SAASC,IACxBN,EAAKM,GAAQP,EAAMO,MAGvBX,EAAQiB,YAAYZ,IAqPP+F,CADwB,CAAEH,KAAAA,EAAMtC,KAAM,WAAY0C,IAAK,cACzC1E,MAGnB6D,EAAKI,cACL7F,EACI,CACI4D,KAAM,kBACNkC,UAAWL,EAAKI,cAEpBjE,GAII,QAAZ,EAAA6D,EAAKc,eAAO,OAAZ,EAAc5F,SAASI,IACnBf,EAAU,CAAEe,IAAM,GAAEA,IAAO6C,KAAM,kBAAmBC,YAAa,aAAejC,MAIhF6D,EAAKM,YAAa,CAClB,MAAMS,EAAkBnF,EAAkBoE,EAAKG,mBAM3CY,IACAA,EAAgBxF,QAAQC,QAAU,IAUtC,MAAO,OAPiBuD,EACpBiB,EAAKG,kBACLH,EAAKhB,kBACLgB,EAAKM,YACLnE,EACA8C,GAEee,EAAKhB,mBAG5B,OAAO,MAGLkB,EAAmC,QAAvB,EAAG/D,MAAAA,OAAS,EAATA,EAAWkE,iBAAS,QAAI,GAEsC,QAAnF,GAAKV,EAAYM,cAAiC,KAAjBC,GAAwBP,EAAYqB,aACjE,OAAOlB,EAAY,CACfgB,QAA4B,QAArB,EAAEnB,EAAYmB,eAAO,QAAI,GAChCN,OAA0B,QAApB,EAAEb,EAAYa,cAAM,QAAI,GAC9BxB,kBAAmBW,EAAYX,kBAC/BmB,kBAAmBR,EAAYQ,kBAC/BC,aAAcT,EAAYS,aAC1BE,YAAaX,EAAYW,YACzBJ,aAAcA,MAAAA,EAAAA,EAAgB,GAC9BD,aAAcN,EAAYM,eAIlC,IAAID,EACJ,IACIA,QAAaiB,EAAAA,EAAAA,IAA2BtB,EAAYzD,IAAK,CACrDgF,QAAS,CACL,iBAAkBtB,EAAa,GAAK,YACpC,kBAAmBF,EACnB,sBAAuB/D,OAAOoC,WAAWoD,SACzC,wBAAyBxF,OAAOoC,WAAWqD,gBAAgBC,WAC3D,mBAAoB1F,OAAOoC,WAAWuD,OAE1CC,OAAQ,KAEd,MAAOjD,GAEL,OADAkD,QAAQlD,MAAMA,GACP,KAGX,GAAI0B,EAAKyB,UAAW,CAGhB,aAFoBC,EAAAA,EAAAA,MACdlC,UAASmC,EAAAA,EAAAA,IAAoBjC,IAC5B,KAIX,MAzIwBzD,OAAAA,IACxB,MAAM2F,QAAcF,EAAAA,EAAAA,KACpB1G,OAAO2F,KAAKrB,GAAuBpE,SAAS2G,IACxC,MAAMzG,EAAQ0G,EAAaD,GACrBE,EAASzC,EAAsBuC,QACvBhC,IAAVzE,GAAuB2G,GACtBA,EAAwCH,EAAMpC,SAAUpE,OAkI5D4G,CAAoBhC,EAAK8B,cAAgB,IACvChC,EAAYE,K;;;ybChZvB,QAAiC,wCAAjC,EAAsG,qDAAtG,EAA8K,0CAA9K,EAAsS,uC,eCUtS,MAAMiC,EACsB,+CADtBA,EAEK,6BAFLA,EAGS,iCAGTC,EAAkC,IAAc,IAAb,KAAEC,GAAM,EAC7C,OACI,UAAC,EAAAC,SAAQ,YACL,SAAC,IAAI,UAAED,EAAKF,MACZ,SAAC,IAAQ,CAACI,KAAM,KAChB,iBAAKC,UAAW9B,EAAkC,WAC9C,gBAAK8B,UAAW9B,EAAwB,SAAE2B,EAAKF,MAC/C,SAAC,IAAQ,CAACI,KAAM,KAChB,gBAAKC,UAAW9B,EAAwB,SAAE2B,EAAKF,SAEnD,SAAC,IAAQ,CAACI,KAAM,QAVtBH,EAA+B,mEAerC,SAAeK,EAAAA,EAAAA,GAAYL,G,8CC/B3B,QAAyC,iDAAzC,EAA8G,4CCiBxGD,EACY,4CADZA,EAES,yCAGTO,EAA2C,IAAkD,IAAjD,KAAEL,EAAI,aAAEM,EAAY,qBAAEC,GAAsB,EAC1F,MAAMC,IAAWD,EACjB,OACI,UAAC,EAAAN,SAAQ,YACL,SAAC,IAAI,UAAED,EAAKQ,EAASV,EAAuBA,MAC5C,SAAC,IAAQ,CAACI,KAAM,KAChB,iBAAKC,UAAW9B,EAA8B,WAC1C,SAACoC,EAAA,EAAa,CACVC,MAAOJ,EAAaK,EAAAA,GAAAA,OACpBC,KAAMN,EAAaK,EAAAA,GAAAA,QAEtBH,IACG,gBAAKL,UAAW9B,EAAyB,UACrC,SAAC,EAAAwC,SAAQ,CAACC,QAASP,EAAqB,UACpC,SAAC,IAAI,CAACQ,KAAMC,EAAAA,SAAAA,UAAoBC,MAAOC,EAAAA,UAAAA,MAAiBC,QAASC,EAAAA,UAAAA,oBAdvFf,EAAwC,2DAuB9C,UAAeD,EAAAA,EAAAA,GAAYC,G,2BClC3B,MAAMP,GACkB,2CADlBA,GAEI,oCAGJuB,GAA+B,IAAc,IAAb,KAAErB,GAAM,EAC1C,OACI,UAAC,EAAAC,SAAQ,YACL,SAAC,IAAI,CAACqB,QAAQ,OAAM,SAAEtB,EAAKF,MAAoC,KAC/D,SAAC,KAAI,CACDgB,QAAS,IAAMS,GAAAA,CAAc,CAAEC,cAAeC,EAAAA,GAAAA,eAC9CnD,MAAMoD,EAAAA,EAAAA,IAAe,iBACrBC,OAAO,SACPjD,IAAI,sBACJkD,gBAAc,WAEb5B,EAAKF,OAEV,SAAC,IAAQ,CAACI,KAAM,QAbtBmB,GAA4B,6DAkBlC,UAAejB,EAAAA,EAAAA,GAAYiB,I,gqBCR3B,MAAMvB,GAEK,CACHY,MAAO,wCACPE,KAAM,wCAWRiB,GAAuC,IAMvC,IANwC,KAC1C7B,EAAI,aACJM,EAAY,eACZwB,EAAc,gBACdC,EAAe,kBACfC,GACH,EACG,MAAMtB,EAAQJ,EAAaK,EAAAA,GAAAA,OACrBC,EAAON,EAAaK,EAAAA,GAAAA,MACpBsB,EAAaH,EAAenB,EAAAA,GAAAA,OAC5BuB,EAAYJ,EAAenB,EAAAA,GAAAA,MAC3BwB,EAAqC,IAAyB,IAAxB,UAAEC,EAAS,KAAEvE,GAAM,EAE3D,GADAkE,EAAgB,GAAD,MAAMzB,GAAY,IAAE,CAAC8B,GAAYvE,KAC5ChF,OAAO2F,KAAKsD,GAAgBnF,OAAS,GAAKyF,KAAaN,EAAgB,CACvE,MAAMO,EAAoB,GAAH,GAAQP,UACxBO,EAAkBD,GACzBJ,EAAkBK,KAI1B,OACI,UAAC,EAAApC,SAAQ,YACL,SAAC,IAAI,CAACqC,QAAM,WAAEtC,EAAKF,GAAcY,UACjC,SAAC,IAAQ,CAACR,KAAM,KAChB,SAAC,GAAAqC,SAAQ,WACL,SAAC,KAAS,CACNtJ,MAAOyH,EACP8B,SAAWvJ,GAAUkJ,EAAiB,CAAEC,UAAWzB,EAAAA,GAAAA,MAAyB9C,KAAM5E,IAClFwJ,UAAWR,OAGnB,SAAC,GAAAS,UAAS,CAACC,OAAQV,EAAW,SAAEA,KAC9BA,IACE,UAAC,EAAAhC,SAAQ,YACL,SAAC2C,GAAA,EAAa,CAACC,QAASnC,EAAOoC,aAAcC,EAAAA,GAAAA,SAC7C,SAAC,IAAQ,CAAC7C,KAAM,QAGxB,SAAC,IAAQ,CAACA,KAAM,KAChB,SAAC,IAAI,CAACoC,QAAM,WAAEtC,EAAKF,GAAcc,SACjC,SAAC,IAAQ,CAACV,KAAM,KAChB,SAAC,GAAAqC,SAAQ,WACL,SAAC,KAAQ,CACLtJ,MAAO2H,EACP4B,SAAWQ,GACPb,EAAiB,CAAEC,UAAWzB,EAAAA,GAAAA,KAAwB9C,KAAMmF,EAAMrB,OAAO1I,QAE7EwJ,UAAWP,OAGnB,SAAC,GAAAQ,UAAS,CAACC,OAAQT,EAAU,SAAEA,KAC7BA,IACE,UAAC,EAAAjC,SAAQ,YACL,SAAC2C,GAAA,EAAa,CAACC,QAASjC,EAAMkC,aAAcC,EAAAA,GAAAA,QAC5C,SAAC,IAAQ,CAAC7C,KAAM,QAGxB,SAAC,IAAQ,CAACA,KAAM,QAzDtB2B,GAAoC,uDA8D1C,UAAezB,EAAAA,EAAAA,GAAYyB,I,gBC/F3B,MAAM/B,GACU,mCAOVmD,GAAyC,IAAuB,IAAtB,KAAEjD,EAAI,QAAEkD,GAAS,EAC7D,OACI,UAAC,EAAAjD,SAAQ,YACL,SAAC,IAAI,CAACqB,QAAQ,OAAO6B,KAAMC,EAAAA,SAAAA,MAAe,SACrCpD,EAAKF,MACF,KACR,SAAC,IAAI,CAACwB,QAAQ,OAAO6B,KAAMC,EAAAA,SAAAA,MAAgBd,QAAM,YAC7C,SAACe,GAAA,EAAW,CAACC,SAAUJ,EAAQI,SAAUC,SAAO,WAC3CL,EAAQM,cARvBP,GAAsC,yDAe5C,UAAe7C,EAAAA,EAAAA,GAAY6C,I,qmBClB3B,MAAMnD,GACY,qCADZA,GAEO,CACL,CAAC2D,EAAAA,GAAAA,IAAgB,kCACjB,CAACA,EAAAA,GAAAA,UAAsB,wCACvB,CAACA,EAAAA,GAAAA,gBAA4B,+CAS/BC,GAA6C,IAA6C,IAA5C,KAAE1D,EAAI,aAAEM,EAAY,gBAAEyB,GAAiB,EACvF,MAAM4B,GAAkBC,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,oBAAoBH,mBAEnE,gBAAEI,GAAoBJ,GAAmB,GAE/C,OAAKI,GAKD,iCACI,SAAC,IAAI,UAAE/D,EAAKF,MACXiE,EAAgBC,KAAI,IAA8B,IAA7B,WAAEC,EAAU,SAAEC,GAAU,EAC1C,MAAMhB,EAAUgB,EAASC,SAAS,GAClC,OACI,4BACI,SAAC,IAAQ,CAACjE,KAAM,KAChB,SAAC,KAAK,CACF7E,KAAK,UACLmH,SAAWQ,IACP,MAAMoB,EAAoBpB,EAAMrB,OAAO1I,MACvC8I,EAAgB,SAAKzB,GAAY,IAAE,CAACK,EAAAA,GAAAA,YAA+ByD,MAEvEC,QAASJ,IAAe3D,EAAaK,EAAAA,GAAAA,YACrC1H,MAAOgL,EAAW,UAElB,iBAAK9D,UAAW9B,EAAqB,WACjC,SAAC,IAAI,CAACiD,QAAQ,OAAM,SAAEtB,EAAKF,GAAgBmE,MAAqB,KAChE,SAAC,IAAI,CAAC3C,QAAQ,OAAOgD,WAAYC,EAAAA,eAAAA,SAAwB,UACrD,SAAClB,GAAA,EAAW,CAACC,SAAUJ,EAAQI,SAAUC,SAAO,WAC3CL,EAAQM,iBAfnBS,SATf,MANTP,GAA0C,6DA0ChD,UAAetD,EAAAA,EAAAA,GAAYsD,ICzBO,IAE7Bc,IAAU,SAAVA,GAAAA,EAAU,uDAAVA,EAAU,4DAAVA,KAAAA,GAAU,KAwBf,MAAM1E,GACK,CACH2E,MAAO,mCACPC,QAAS,qCACTC,0BAA2B,uDAC3BC,eAAgB,6CALlB9E,GAOW,CACT6E,0BAA2B,6DAC3BD,QAAS,2CACTE,eAAgB,mDAVlB9E,GAYO,CACL2E,MAAO,6BACPI,KAAM,4BACNC,IAAK,2BACLC,KAAM,4BACNC,UAAW,iCACXC,SAAU,gCACVC,KAAM,6BAnBRpF,GAqBY,oCAGZqF,GAAgD,IAAc,UAAb,KAAEnF,GAAM,EAC3D,MAAM,UAAEoF,EAAS,gBAAEzB,EAAe,YAAE0B,IAAgBzB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,sBAC3EzG,GAAWiI,EAAAA,EAAAA,gBAEVC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAwBhE,EAAAA,GAAAA,QAC3DnB,EAAcyB,IAAmB0D,EAAAA,EAAAA,UAAuBC,EAAAA,KACxD5D,EAAgBE,IAAqByD,EAAAA,EAAAA,UAAyB,KAE9DE,EAAkBC,EAAiBC,IAAqBC,EAAAA,EAAAA,IAAc,GAEvE3B,EAAWR,MAAAA,GAEhB,QAF+B,EAAfA,EAAiBI,gBAAgBgC,MAC9C,QAAC,WAAE9B,GAAY,SAAKA,IAAe3D,EAAaK,EAAAA,GAAAA,sBACnD,WAF+B,EAAf,EAEduD,SAASC,SAEN6B,EAAUC,EAAAA,GAAe3F,EAAaK,EAAAA,GAAAA,cAE5CuF,EAAAA,EAAAA,YAAU,KACFvC,IACA6B,EAAiB/D,EAAAA,GAAAA,OACjBO,EAAkB,IAClBD,EAAgB,CACZ,CAACpB,EAAAA,GAAAA,OAA0BgD,EAAgBjD,MAC3C,CAACC,EAAAA,GAAAA,MAAyBgD,EAAgB/C,KAC1C,CAACD,EAAAA,GAAAA,YAA+B8C,EAAAA,GAAAA,QAGzC,CAACE,IAEJ,MAAMwC,GAAgBC,EAAAA,EAAAA,cAClBtM,MAAAA,IACI,GAAI6J,GAAmBQ,EAAU,CAC7B,MAAMkC,EAAmB,CAAC5E,EAAAA,GAAAA,MAAqBA,EAAAA,GAAAA,SAAuBzG,SAASsL,GACzEC,EAAY5C,EAAgB4C,UAGlC,IAAIC,EAFJC,GAAAA,CAAU,CAAEC,WAAYC,EAAAA,EAAiBL,GAAcM,KAAMZ,QAASA,EAAQa,KAAK,OAGnF,IACIL,QAAiB1H,EAAAA,EAAAA,KAAauH,EAAmB7B,GAAWsC,SAAWtC,GAAWuC,OAAQ,CACtFR,UAAAA,EACA7F,MAAOJ,EAAaK,EAAAA,GAAAA,OACpBC,KAAMN,EAAaK,EAAAA,GAAAA,MACnBqF,SAASgB,EAAAA,EAAAA,IAAwBhB,GACjCiB,OAAQ9C,EAAS,GAAG+C,QAE1B,MAAO/K,GAEL,YADAyJ,IAIJJ,EAAiBgB,EAAS3I,KAAK0H,eAC/B,MAAM4B,EAASX,EAAS3I,KAAKuJ,iBACzBD,GACAnF,EAAkBmF,GAEtBE,GAAAA,CAAW,CACPC,SAAUX,EAAAA,EAAiBL,GAAciB,KACzChB,UAAAA,EACAP,QAASA,EAAQa,KAAK,KACtBM,OAAQK,KAAKC,UAAUN,QAInC,CAAC7G,EAAcqD,EAAiBQ,EAAUyB,EAAiBI,IAG/D,IAAKrC,IAAoBQ,EACrB,OAAO,KAGX,MAAMuD,EAAU,KACZrK,GAASsK,EAAAA,EAAAA,IAA6B,CAAEvC,WAAW,EAAOC,YAAa,SAGrEuC,EAAgB,CAClB,CAACnG,EAAAA,GAAAA,OAAsB,CACnBf,MAAOV,EAAKF,GAAc2E,OAC1B5B,SACI,UAAC,EAAA5C,SAAQ,YACL,SAAC,EAAU,KACX,SAAC,GAAM,CACHK,aAAcA,EACdC,qBAAsB,KAClBsH,GAAAA,GACArC,EAAiB/D,EAAAA,GAAAA,aAGzB,SAAC,IAAQ,CAACvB,KAAM,KAChB,SAAC,GAAO,CAACI,aAAcA,EAAcyB,gBAAiBA,OAG9D+F,QACI,UAAC,EAAA7H,SAAQ,YACL,SAAC,IAAM,CACH8H,KAAMC,EAAAA,WAAAA,QACNC,WAAYC,EAAAA,iBAAAA,SACZpH,QAAS,KACLqH,GAAAA,CAAU,CAAE3G,cAAeC,EAAAA,GAAAA,QAC3BiG,IACArC,MAAAA,GAAAA,KACF,SAEDrF,EAAKF,GAAgBoF,SAE1B,SAAC,IAAQ,CAAChF,KAAM,KAChB,SAAC,IAAM,CAAC6H,KAAMC,EAAAA,WAAAA,QAAoBlH,QAAS,IAAMqF,EAAc1E,EAAAA,GAAAA,OAAqB,SAC/EzB,EAAKF,GAAgB2E,aAKtC,CAAChD,EAAAA,GAAAA,SAAwB,CACrBf,MAAOV,EAAKF,GAAc2E,OAC1B5B,SACI,UAAC,EAAA5C,SAAQ,YACL,SAAC,EAAU,KACX,SAAC,GAAI,CACDK,aAAcA,EACdwB,eAAgBA,EAChBC,gBAAiBA,EACjBC,kBAAmBA,KAEvB,SAAC,GAAO,CAAC1B,aAAcA,EAAcyB,gBAAiBA,OAG9D+F,QACI,UAAC,EAAA7H,SAAQ,YACL,SAAC,IAAM,CACH8H,KAAMC,EAAAA,WAAAA,QACNC,WAAYC,EAAAA,iBAAAA,SACZpH,QAAS,KACD6E,GACAE,IAEJsC,GAAAA,CAAU,CAAE3G,cAAeC,EAAAA,GAAAA,UAC3B+D,EAAiB/D,EAAAA,GAAAA,QACnB,SAEDzB,EAAKF,GAAgBoF,SAE1B,SAAC,IAAQ,CAAChF,KAAM,KAChB,SAAC,IAAM,CAAC6H,KAAMC,EAAAA,WAAAA,QAAoBlH,QAAS,IAAMqF,EAAc1E,EAAAA,GAAAA,SAAuB,SACjFzB,EAAKF,GAAgB+E,YAKtC,CAACpD,EAAAA,GAAAA,cAA6B,CAC1Bf,MAAOV,EAAKF,GAAc2E,OAC1B5B,SACI,UAAC,EAAA5C,SAAQ,YACL,SAAC,GAAM,CAACK,aAAcA,KACtB,SAAC,IAAQ,CAACJ,KAAM,KAChB,SAAC,GAAO,KACR,SAAC,GAAK,CAACgD,QAASiB,EAAS,QAGjC2D,QACI,UAAC,EAAA7H,SAAQ,YACL,SAAC,IAAM,CACH8H,KAAMC,EAAAA,WAAAA,QACNC,WAAYC,EAAAA,iBAAAA,SACZpH,QAAS,KACD6E,GACAE,IAEJsC,GAAAA,CAAU,CAAE3G,cAAeC,EAAAA,GAAAA,eAC3B+D,EAAiB/D,EAAAA,GAAAA,QACnB,SAEDzB,EAAKF,GAAgBoF,SAE1B,SAAC,IAAQ,CAAChF,KAAM,KAChB,SAAC,IAAM,CAAC6H,KAAMC,EAAAA,WAAAA,QAAoBlH,QAAS,IAAMqF,EAAc1E,EAAAA,GAAAA,cAA4B,SACtFzB,EAAKF,GAAgBgF,WAKtC,CAACrD,EAAAA,GAAAA,2BAA0C,CACvCf,MAAOV,EAAKF,GAAc6E,2BAC1B9B,SAAS,SAAC,IAAI,UAAE7C,EAAKF,GAAoB6E,6BACzCmD,QACI,SAAC,IAAM,CACHC,KAAMC,EAAAA,WAAAA,QACNlH,QAAS,KACLsH,GAAAA,CAAS,CAAEpC,QAASA,EAAQa,KAAK,OAC5BxJ,GACDgL,EAAAA,EAAAA,IAAWlE,EAAU,CACjBmE,OAAQ,mBAGlB,SAEDtI,EAAKF,GAAgBiF,SAIlC,CAACtD,EAAAA,GAAAA,SAAwB,CACrBf,MAAOV,EAAKF,GAAc4E,SAC1B7B,SACI,UAAC,EAAA5C,SAAQ,YACL,SAAC,IAAI,UAAED,EAAKF,GAAoB4E,YAChC,SAAC,IAAQ,CAACxE,KAAM,KAChB,SAAC,GAAM,CAACI,aAAcA,OAG9BwH,QACI,SAAC,IAAM,CACHC,KAAMC,EAAAA,WAAAA,QACN1G,QAAQ,IACRK,OAAO,SACPrD,MAAMoD,EAAAA,EAAAA,IAAe,iBACrBZ,QAAS,IAAMS,GAAAA,CAAc,CAAEC,cAAeC,EAAAA,GAAAA,UAAyB,SAEtEzB,EAAKF,GAAgBkF,cAIlC,CAACvD,EAAAA,GAAAA,gBAA+B,CAC5Bf,MAAOV,EAAKF,GAAc8E,gBAC1B/B,SAAS,SAAC,IAAI,UAAE7C,EAAKF,GAAoB8E,kBACzCkD,QACI,SAAC,IAAM,CACHC,KAAMC,EAAAA,WAAAA,QACN1G,QAAQ,IACRK,OAAO,SACPrD,MAAMoD,EAAAA,EAAAA,IAAe,iBACrBZ,QAAS,IAAMS,GAAAA,CAAc,CAAEC,cAAeC,EAAAA,GAAAA,iBAAgC,SAE7EzB,EAAKF,GAAgBmF,cAMtC,OACI,UAAC,IAAK,CACFsD,QAASnD,EACTsC,QAAS,KACLc,GAAAA,CAAW,CAAEhH,cAAe+D,IAC5BmC,KACF,WAEF,SAAC,EAAAe,YAAW,WACR,SAAC,EAAAC,WAAU,UAAEd,EAAcrC,GAAe7E,WAE9C,SAAC,EAAAiI,aAAY,WACT,gBAAKxI,UAAW9B,EAAsB,SAAEuJ,EAAcrC,GAAe1C,aAEzE,SAAC,EAAA+F,WAAU,CAACL,QAAS5C,EAAiB,SAAE3F,EAAKF,OAC7C,SAAC,EAAA+I,YAAW,CAACC,eAAa,WAAElB,EAAcrC,GAAeuC,aA1P/D3C,GAA6C,4EA+PnD,UAAe/E,EAAAA,EAAAA,GAAY+E,K;;;m+BCjU3B,IAAI4D,EAAK,EAET,MAAMC,EAAmF,IAKnF,YALoF,eACtFC,GAAiB,SAAC,IAAO,CAAChI,MAAOiI,EAAAA,aAAAA,QAAsB,YACvD1L,EAAW,MACXD,EAAK,WACLE,GAAa,GAChB,EACG,MAAM0L,GAAeC,EAAAA,EAAAA,QAAuB,MAEtCC,IADsBC,EAAAA,EAAAA,YAAWC,EAAAA,IAXrBhM,CAAAA,GAAmB,gCAA+BA,IAY7CiM,CAAajM,IACpC,IAAIsF,EAA6B,QAAnB,EAAArF,EAAYiM,eAAO,OAAnB,EAAqB3L,aAAe,KAAOmL,EAErD/K,EAAY,GAMT,GAAuB,QAAvB,EAAIV,EAAYiM,eAAO,OAAnB,EAAqB3L,aAAc,OAC1C,MAAM9D,EAC0C,QADV,EAClCrB,SAASe,cAAe,IAAG2P,YAAiB,QAC5C1Q,SAASe,cAAe,wCAAuC6D,KAEnEW,EAAY,CACRwL,wBAAyB,CACrBC,OAAQ3P,MAAAA,OAAS,EAATA,EAAWkE,YA2C/B,OAtCAgI,EAAAA,EAAAA,YAAU,KACN,MAAMlM,EAAYmP,EAAaM,QAC/B,IAAI5M,EACA+M,EAA0B,KAE9Bb,GAAM,EACN,MAAMjM,EAAc,GAAES,KAASwL,IAU/B,OARKc,EAAAA,EAAAA,SAAiBtM,EAAOC,EAAYiM,QAASzP,EAAW8C,EAAYW,GAAY1B,MAAM8B,IACvF,GAAIA,GAAQ7D,EAAW,CACnB,MAAO8P,EAAWC,GAA0BlM,EAC5C+L,EAAME,EACNjN,EAAoBkN,MAIrB,KAIHC,YAAW,KAAM,QACb,IAAKnN,EACD,OAGJ,MAAMoN,EAA2C,QAA3B,EAAGzQ,OAAOwD,yBAAiB,OAAqB,QAArB,EAAxB,EAA2BH,UAAkB,WAArB,EAAxB,EAA+CI,uBACrC,MAA/BjD,GAAaiQ,IACV,QAAH,EAAAL,SAAG,OAAH,EAAM,CACF1M,YAAY,EACZlD,UAAAA,EACA8C,WAAAA,IAEJ8M,EAAM,QAEX,MAER,CAACrM,EAAOE,EAAYD,IAElBA,EAAYiM,SAKb,oBAAKS,IAAKf,EAAchJ,UAAWkJ,GAAoBnL,GAAS,aAC3D2E,KALE,MApETmG,EAAgF,0FAoFtF,MAAMmB,EAA4F,IAG5F,IAH6F,MAC/F5M,EAAK,eACL0L,GACH,EACG,MAAMzL,GAAcoG,EAAAA,EAAAA,IAAY,QAAC,eAAEwG,GAAgB,SAAKA,EAAe7M,OAChE8M,EAAcC,IAAmB7E,EAAAA,EAAAA,UAASlI,GAC3CgN,GAAyBnB,EAAAA,EAAAA,QAAO5L,GAStC,OAPA0I,EAAAA,EAAAA,YAAU,KACFqE,EAAuBd,UAAYjM,IACnC+M,EAAuBd,QAAUjM,EACjC8M,EAAiB,GAAE/M,KAASiN,KAAKC,YAEtC,CAAClN,EAAOC,IAENA,GAQD,SAACwL,EAAyB,CAEtBC,eAAgBA,EAChBzL,YAAa+M,EACbhN,MAAOA,GAHF8M,GARF,MAhBTF,EAAyF,iGAgC/F,SAAeO,EAAAA,EAAAA,MAAKP,GAAkC,KAAM,K;;;yYClI5D,MAAMQ,EAAe,UAKfC,EAAa,IAAwD,gBAAvD,KAAE5K,EAAI,UAAEuG,EAAS,iBAAEsE,EAAgB,YAAExF,GAAa,EAClE,MAAM1B,GAAkBC,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,oBAAoBH,kBAEnEtG,GAAWiI,EAAAA,EAAAA,gBAETvB,gBAAiB+G,EAAQ,eAAElG,GAAmBjB,GAAmB,GACnEH,EAAQsH,MAAAA,GAAgE,QAAxD,EAARA,EAAU/E,MAAK,QAAC,WAAE9B,GAAY,SAAKA,IAAeR,EAAAA,GAAAA,aAAc,OAAU,QAAV,EAAhE,EAAkES,gBAAQ,OAAU,QAAV,EAA1E,EAA4EC,gBAAQ,OAAK,QAAL,EAApF,EAAuF,UAAE,WAAjF,EAAR,EAA2F+C,MAEnG6D,GAAiB3E,EAAAA,EAAAA,cAClB4E,IACGC,GAAAA,CAA0B,CACtBjP,KAAM2O,EACNO,eAAgB,YAChB3E,UAAAA,EACA4E,mBAAoBvG,IAGpBoG,IACAH,IACAxN,GACIsK,EAAAA,EAAAA,IAA6B,CACzBvC,WAAW,EACXC,YAAAA,QAKhB,CAACkB,EAAW3B,EAAgBiG,EAAkBxN,EAAUgI,IAc5D,OAXAa,EAAAA,EAAAA,YAAU,KACF1C,IACA4H,EAAAA,EAAAA,+BAA8B,CAC1BpP,KAAM2O,EACNO,eAAgB,YAChB3E,UAAAA,EACA4E,mBAAoBvG,MAG7B,CAACA,EAAgBpB,EAAO+C,IAEtB/C,GAKD,iCACI,SAAC,IAAQ,CAACtD,KAAM,KAChB,SAAC,IAAI,CAACoC,QAAM,WAAEtC,EAAK4K,EAAW5K,KAAKqL,UACnC,iBAAKlL,UAAU,+BAA8B,WACzC,gBAAKA,UAAU,mCAAkC,SAAEH,EAAK4K,EAAW5K,KAAKsL,YACxE,gBAAKnL,UAAU,iCAAgC,SAC1CyE,GACG,SAAC,IAAM,CACHmD,KAAMC,EAAAA,WAAAA,QACNlH,QAAS,IAAMiK,GAAe,GAC9BzJ,QAAQ,IACRK,OAAO,SACP,UAAQ,uCACRrD,KA7DxB,uGA6D2D,SAElC0B,EAAK4K,EAAW5K,KAAK4E,mBAG1B,SAAC,IAAM,CACHmD,KAAMC,EAAAA,WAAAA,QACNlH,QAAS,IAAMiK,GAAe,GAC9B,UAAQ,uCAAsC,UAE7CQ,EAAAA,EAAAA,QAAOvL,EAAK4K,EAAW5K,KAAKwL,kBAAmB,CAC5C,MAAOC,IAAAA,OAAuBC,OAAOlI,GAAQ,CACzCmI,cAAe,EACfC,eAAgBC,EAAAA,iBA9BrC,MA1CTjB,EAAU,+DAmFhBA,EAAW5K,KAAO,CACdsL,QAAS,wCACTD,MAAO,gCACPS,WAAY,oCACZN,iBAAkB,0CAClB5G,eAAgB,oCAGpBgG,EAAWmB,UAAY,CACnB/L,KAAMgM,IAAAA,OACNzF,UAAWyF,IAAAA,OACX3G,YAAa2G,IAAAA,KACbnB,iBAAkBmB,IAAAA,MAGtB,SAAe5L,EAAAA,EAAAA,GAAYwK,G,8CCtHEoB,IAAAA,OACHA,IAAAA,OADnB,MAEMC,EAAeD,IAAAA,OACfE,EAAeF,IAAAA,OACfG,EAAkBH,IAAAA,OAEJA,IAAAA,MAAgB,CACvCI,KAAMD,EACN7I,SAAU4I,EAEVG,OAAQL,IAAAA,OACRxI,MAAOwI,IAAAA,OACP7H,SAAU6H,IAAAA,MAAgB,CACtBI,KAAMD,EAENjF,MAAO8E,IAAAA,SAEXM,cAAeN,IAAAA,QAAkBA,IAAAA,QACjCO,OAAQN,I,opBCdZ,MAAMO,GAAwBC,EAAAA,EAAAA,mBAAkB,mB,8CCChD,MCgBMC,EAAkB,UAClBC,GAAmB,WAEnBC,GAAa,CAACC,EAAOtG,KACvB,GAAsB,KAAlBsG,MAAAA,OAAK,EAALA,EAAOlQ,QAAc,CACrB,MAAMmQ,EAAYC,GAAAA,CATP,4BAYX,OAFAD,EAAU1N,OAAO4N,OAASH,EAAM,GAAGG,OACnCF,EAAU1N,OAAO6N,QAAW,YAAW1G,YAChCuG,EAAUxO,KAErB,MAbc,mBAgBZ4O,GAAkB,IAWlB,IAXmB,+BACrBC,EAA8B,WAC9B9E,EAAU,OACV7H,EAAM,iBACN4M,EAAgB,eAChBC,EAAc,QACdJ,EAAO,UACP1G,EAAS,WACT+G,EAAU,YACVC,EAAW,KACXvN,GACH,EAqBG,IApBAkG,EAAAA,EAAAA,YAAU,KACNkH,MAAAA,GAAAA,EAAkBrU,SAASyU,IACvB,IAAItC,EA5BI,MA6BJsC,EAAgBC,aAChBvC,EAAiBwB,GAEjBc,EAAgBE,cAChBxC,EAAiByB,IAEjBa,EAAgBG,kBAGpBvC,EAAAA,EAAAA,+BAA8B,CAC1BpP,KAAMwR,EAAgBI,SACtBrH,UAAAA,EACA2E,eAAAA,SAGT,CAACkC,EAAkB7G,KAEjB6G,EACD,OAAO,KAGX,MA6DMS,EAAgBL,IAClB,MAAMM,EAAiB5C,IACnBD,GAAAA,CAA0B,CACtBjP,KAAMwR,EAAgBI,SACtBrH,UAAAA,EACA2E,eAAAA,KAIR,OAAIsC,EAAgBC,WA1DI,EAACG,EAAUE,KACnC,SAAC,IAAM,CACH/F,KAAMC,EAAAA,WAAAA,QACNlH,QAAS,KACLgN,EAAcpB,GACdW,EAAe,CACXF,+BAAAA,EACA3M,SAAUA,EACVpB,OAAQ,CAAEmH,UAAAA,EAAWqH,SAAAA,KAEpB7R,KAAKwR,GACLQ,MAAM1O,QAAQlD,QAEvB,UAAQ,uCAAsC,SAE7C6D,EAAKkN,GAAgBlN,KAAKgO,UA4CpBC,CAAoBT,EAAgBI,SAAUE,GAErDN,EAAgBE,YAzEK,EAACb,EAAOtG,EAAWuH,KAC5C,SAAC,IAAM,CACH/F,KAAMC,EAAAA,WAAAA,QACN1G,QAAS4M,EAAAA,KACTC,GAAIvB,GAAWC,EAAOtG,GACtB,UAAQ,wCACRzF,QAAS,IAAMgN,EAAcnB,IAAkB,SAE9C3M,EAAKkN,GAAgBlN,KAAKoO,YAkEpBC,CAAqBb,EAAgBX,MAAOtG,EAAWuH,GAE9DN,EAAgBG,iBAEZ,iBAAM,UAAQ,yCAAwC,SACjD3N,EAAKkN,GAAgBlN,KAAK2N,mBAhDnB,EAACzJ,EAAU4J,KAwB3B,SAAC,IAAM,CAAC/F,KAAMC,EAAAA,WAAAA,QAAoBlH,QAdb,KACrBgN,EA5FQ,OA6FRzF,EACInE,EAASC,SACT,CACI8I,QAASA,EAAQqB,IACjBhG,OAAQ,eACR9G,cAAe,yBAEnB8L,EAAa5B,OAAO4B,QAAc5P,IAKuB,UAAQ,mCAAkC,SAClGwG,MAAAA,GAAAA,EAAUqK,YAvBfC,EAAAA,EAAAA,wBAAuBxO,EAAKkN,GAAgBlN,KAAKyO,QAAS,CACtD,OACI,SAACpL,EAAA,EAAW,CAACE,SAAS,EAAMD,SAAUY,EAASZ,SAAS,SACnDY,EAASqK,eAoBsBvO,EAAKkN,GAAgBlN,KAAKsO,OA2BnEI,CAAgBlB,EAAgBtJ,SAAU4J,IAGrD,OACI,SAAC,EAAA7N,SAAQ,UACJmN,EAAiBpJ,KAAKwJ,IACnB,iBAAoC,UAAU,2BAA0BA,EAAgBI,WAAW,WAC/F,SAAC,IAAQ,CAAC1N,KAAM,KAChB,SAAC,IAAI,CAACoC,QAAM,WAAEtC,EAAKkN,GAAgBlN,KAAM,GAAEwN,EAAgBI,wBAC3D,iBAAKzN,UAAU,+BAA8B,WACzC,gBAAKA,UAAU,mCAAkC,SAC5CH,EAAKkN,GAAgBlN,KAAKwN,EAAgBI,cAE/C,gBAAKzN,UAAU,iCAAgC,SAAE0N,EAAaL,UAP5DA,EAAgBI,eA7HpCV,GAAe,yEA4IrBA,GAAgBnB,UAAY,CACxBoB,+BAAgCnB,IAAAA,KAChC3D,WAAY2D,IAAAA,KACZhM,KAAMgM,IAAAA,OACNxL,OAAQwL,IAAAA,KACRoB,iBAAkBpB,IAAAA,QACdA,IAAAA,MAAgB,CAEZ4B,SAAU5B,IAAAA,OAAAA,WACVyB,WAAYzB,IAAAA,KAAAA,WACZ0B,YAAa1B,IAAAA,KAAAA,WACb2C,OAAQ3C,IAAAA,KAAAA,WACR2B,gBAAiB3B,IAAAA,KAAAA,WACjBa,MAAOb,IAAAA,QACHA,IAAAA,MAAgB,CACZgB,OAAQhB,IAAAA,UAIhB9H,SAAU8H,IAAAA,MAAgB,CAEtBuC,WAAYvC,IAAAA,OAAAA,WACZ1I,SAAU0I,IAAAA,OAEV7H,SAAU6H,IAAAA,QACNA,IAAAA,MAAgB,CACZI,KAAMD,EACNjF,MAAO8E,IAAAA,OACP1I,SAAU4I,EAEVG,OAAQL,IAAAA,OACRxI,MAAOwI,IAAAA,OACP4C,YAAa5C,IAAAA,OACb7H,SAAU6H,IAAAA,MAAgB,CACtBI,KAAMD,EACNjF,MAAO8E,IAAAA,SAEXM,cAAeN,IAAAA,QAAkBA,IAAAA,QACjCO,OAAQN,UAM5BgB,QAASjB,IAAAA,OACTzF,UAAWyF,IAAAA,OACXsB,WAAYtB,IAAAA,OACZqB,eAAgBrB,IAAAA,KAChBuB,YAAavB,IAAAA,MAGjBkB,GAAgBlN,KAAO,CACnB2N,gBAAiB,wCACjBkB,sBAAuB,sCACvBC,gBAAiB,gCACjBC,iBAAkB,iCAClBC,QAAS,yCACTC,cAAe,+CACfC,SAAU,0CACVT,OAAQ,+BACRH,IAAK,4BACLN,OAAQ,qBACRI,SAAU,iCAGP,MAAMe,IAAqB/O,EAAAA,EAAAA,GAAY8M,IAE9C,IAAekC,EAAAA,EAAAA,UACX,CAAC,EAAD,iBAAC,gBAAEC,GAAiB,GAAE,UAAE9I,GAAW,QAAM,CACrC6G,iBAA4C,QAA5B,EAAEiC,EAAgB9I,UAAU,aAA1B,EAA4B6G,iBAC9CH,QAAmC,QAA5B,EAAEoC,EAAgB9I,UAAU,aAA1B,EAA4B0G,WAEzC,CAAE5E,WAAU,KAAEgF,eChPH,QAAC,+BAAEF,EAA8B,OAAE3M,EAAM,OAAEpB,GAAQ,SAC9DtF,MAAOuD,EAAUiS,KACb,MAAM,SAAEC,GAAaD,IAAWE,OAChC,IAAIhJ,EACJ,IACIA,QAAiB1H,EAAAA,EAAAA,aAAqB,qCAAsCM,GAC5E+N,MAAAA,GAAAA,IACF,MAAOhR,GACLkB,GAASsI,EAAAA,EAAAA,GAAiBxJ,IAE1BoT,EAASE,SAASC,MAAM,aACxBrS,GAASsS,EAAAA,EAAAA,MAAM,GAAEJ,EAASE,WAAWjJ,EAAS3I,KAAK+R,UAKnDvS,EADAmD,EHfZ,CAAgBpB,GAAWtF,MAAOuD,EAAUiS,KACxC,MAAM,kBAAEO,GAAsBP,IAAWQ,yBACzC,IAAIC,EACJ,IACIA,QAAqBjR,EAAAA,EAAAA,IAAY,mDAAoD,CACjFM,OAAQ,EAAF,KAAOA,GAAM,IAAEyQ,kBAAAA,MAE3B,MAAOG,GAEL,YADArK,EAAAA,EAAAA,GAAiBqK,GAIrB3S,EAAS,CACLmP,EAAsBuD,EAAaE,kBACnCC,EAAAA,EAAAA,IAA+BH,EAAaI,6BGE/BC,CAAoBhR,GFjBzC,CAAgBA,GAAWtF,MAAAA,IACvB,IAAIuW,EACJ,IACIA,SAAiBvR,EAAAA,EAAAA,IAAY,8CAA+C,CAAEM,OAAAA,KAAWiR,QAC3F,MAAOlU,GACLkB,GAASsI,EAAAA,EAAAA,GAAiBxJ,IAE9BkB,EAAS,EAACiT,EAAAA,EAAAA,IAAiBlR,EAAOmH,YAAYgK,EAAAA,EAAAA,IAAsB,CAAEF,QAAAA,MACtEhT,GACImT,EAAAA,EAAAA,GAAgBC,EAAAA,GAAyB,CACrCpV,KAAMgV,EAAQhV,KACduS,SAAUyC,EAAQzC,aEQT8C,CAAuBtR,ODyN5C,CAME+P,IE5OIwB,GAAe,QAAC,+BAClBxD,EAA8B,iBAC9BtC,EAAgB,UAChBtE,EAAS,WACT+G,EAAU,UACVlI,EAAS,OACT5E,EAAM,KACNR,EAAI,KACJ4Q,EAAI,cACJC,EAAa,UACbC,GACH,SACG,SAAC,IAAK,CAACvI,QAASnD,EAAWsC,QAASmD,EAAiB,UACjD,UAAC,EAAA5K,SAAQ,YACL,SAAC,EAAAwI,YAAW,CAACsI,UAAQ,YACjB,SAAC,EAAArI,WAAU,UAAE1I,EAAK2Q,GAAa3Q,KAAKgR,mBAExC,UAAC,EAAArI,aAAY,YACT,iBAAKxI,UAAU,gCAAgC,UAAQ,uBAAsB,WACzE,uBAAIH,EAAK2Q,GAAa3Q,KAAKiR,SAC3B,iBAAK9Q,UAAU,4BAA2B,WACtC,SAAC,GAAe,CACZgN,+BAAgCA,EAChC3M,OAAQA,EACR+F,UAAWA,EACX+G,WAAYA,EACZC,YAAa1C,KAEjB,SAAC,EAAU,CACPtE,UAAWA,EACXsE,iBAAkBA,EAClBxF,YAAa,IACTwL,EACMA,EAAc,CACV7U,KAAMkV,EAAAA,GACNC,QAAS,CACLC,UAAWC,EAAAA,GACXxT,KAAM,CAAE0I,UAAAA,EAAW+G,WAAAA,EAAYsD,KAAAA,MAGvCE,aAKtB,SAAC,IAAG,CAACQ,KAAG,YACJ,gBAAKnR,UAAU,0BAAyB,SAAEH,EAAK2Q,GAAa3Q,KAAKuR,2BAGzE,SAAC,EAAA1I,YAAW,WACR,SAAC,IAAM,CAAC/H,QAAS+J,EAAiB,SAAE7K,EAAK2Q,GAAa3Q,KAAKwR,kBAlDrEb,GAAY,4DAwDlBA,GAAa5E,UAAY,CACrBoB,+BAAgCnB,IAAAA,KAChCxL,OAAQwL,IAAAA,KACRnB,iBAAkBmB,IAAAA,KAClBqD,gBAAiBrD,IAAAA,OACjBzF,UAAWyF,IAAAA,OACXsB,WAAYtB,IAAAA,OACZ5G,UAAW4G,IAAAA,KACX4E,KAAM5E,IAAAA,OACN6E,cAAe7E,IAAAA,KACf8E,UAAW9E,IAAAA,KACXhM,KAAMgM,IAAAA,QAGV2E,GAAa3Q,KAAO,CAChBiR,KAAM,sBACND,aAAc,8BACdQ,OAAQ,mCACRD,kBAAmB,gCAGvB,UAAenR,EAAAA,EAAAA,GAAYuQ,K;;;mQC1FpB,MAAMO,EAAY,WACZO,EAAc,aAEdC,EAAuB,kBACvBC,EAAmB,aACnBC,EAAgB,UAChBP,EAAgB,UAChBQ,EAAiB,WACjBC,EAAqB,eACrBC,EAAoB,cACpBC,EAA4B,4BAC5BC,EAA4B,sBAC5BC,EAA2B,qBAC3BC,EAAyB,kBACzBC,EAAiC,2BACjCC,EAAiC,2BACjCC,EAAmB,qBACnBC,EAAoB,cACpBC,EAAwB,kBACxBC,EAAuB,kB;;;qFCnB7B,IAAKC,EAYAC,E,kBAFX,SAVWD,GAAAA,EAAmB,oBAAnBA,EAAmB,6BAAnBA,EAAmB,kBAAnBA,EAAmB,YAAnBA,EAAmB,uCAAnBA,EAAmB,gDAAnBA,EAAmB,qCAAnBA,EAAmB,2CAAnBA,EAAmB,yCAU9B,CAVWA,IAAAA,EAAmB,KAsB9B,SAVWC,GAAAA,EAAwB,oBAAxBA,EAAwB,6BAAxBA,EAAwB,kBAAxBA,EAAwB,YAAxBA,EAAwB,uCAAxBA,EAAwB,gDAAxBA,EAAwB,qCAAxBA,EAAwB,2CAAxBA,EAAwB,yCAUnC,CAVWA,IAAAA,EAAwB,KAahCD,EAAoBE,kBACpBF,EAAoBG,sBACpBH,EAAoBI,iBAEUJ,EAAoBK,oBAAqBL,EAAoBM,mBALxF,MAOP,K;;;gQCvBA,QAAe,QAAG5T,QAAQ,WAAEkO,EAAU,UAAE/G,IAAa,SACjDzM,MAAAA,IACIuD,GAAS4V,EAAAA,EAAAA,IAA0B1M,IAEnC,IACI,MAAM,QAAE0G,EAAO,iBAAEG,EAAgB,YAAE8F,SAAsBpU,EAAAA,EAAAA,IACrD,8CACA,CACIM,OAAQ,CACJkO,WAAAA,EACA/G,UAAAA,KAKZlJ,GAAS8V,EAAAA,EAAAA,IAA4B,CAAEpK,GAAIxC,EAAW1I,KAAM,CAAEoP,QAAAA,EAASG,iBAAAA,MAEnE8F,GACA7V,GAAS+V,EAAAA,EAAAA,IAA2BF,IAE1C,MAAOlD,GAGL,MAFA3S,GAASgW,EAAAA,EAAAA,IAA2B9M,IAE9ByJ","sources":["xhh/./webapp-static/js/Modules/ProxyExternalServiceLoader.ts","webpack://xhh/./webapp-static/lux/components/ClickmeAutoCampaign/index.less?8382","xhh/./webapp-static/lux/components/ClickmeAutoCampaign/Advantages.tsx","webpack://xhh/./webapp-static/lux/components/ClickmeAutoCampaign/Banner/Banner.less?8133","xhh/./webapp-static/lux/components/ClickmeAutoCampaign/Banner/Banner.tsx","xhh/./webapp-static/lux/components/ClickmeAutoCampaign/Control.tsx","xhh/./webapp-static/lux/components/ClickmeAutoCampaign/Form.tsx","xhh/./webapp-static/lux/components/ClickmeAutoCampaign/Price.tsx","xhh/./webapp-static/lux/components/ClickmeAutoCampaign/Sources.tsx","xhh/./webapp-static/lux/components/ClickmeAutoCampaign/index.tsx","xhh/./webapp-static/lux/components/CodeInjector/ContainerForMicroFrontend.tsx","xhh/./webapp-static/lux/components/VacancyModals/UpgradeModal/BuyClickme.jsx","xhh/./webapp-static/lux/modules/price/propTypes.js","xhh/./webapp-static/lux/requests/vacancyUpgrades/getUpgradedEditBody.js","xhh/./webapp-static/lux/requests/vacancyUpgrades/getUpgradedFullVacancy.js","xhh/./webapp-static/lux/components/VacancyModals/UpgradeModal/UpgradeVariants.jsx","xhh/./webapp-static/lux/requests/vacancyUpgrades/upgradeVacancy.js","xhh/./webapp-static/lux/components/VacancyModals/UpgradeModal/index.jsx","xhh/./webapp-static/lux/components/VacancyModals/constants.ts","xhh/./webapp-static/lux/models/vacancy/metallicVacancyType.types.ts","xhh/./webapp-static/lux/requests/vacancyUpgrades/fetchVacancyUpgrades.js"],"sourcesContent":["import { Dispatch } from 'react';\nimport { DefaultRootState } from 'react-redux';\n\nimport { Action } from '@hh.ru/redux-create-reducer';\nimport StatsSender from '@hh.ru/stats-sender';\n\nimport {\n    MicroFrontendServiceName,\n    SerivceInfo,\n    RemoteServiceName,\n    deleteMicroFrontend,\n} from 'lux/models/microFrontends';\nimport { addUserNotifications } from 'lux/models/userNotifications';\nimport fetcher from 'lux/modules/fetcher';\nimport { getStore } from 'lux/modules/typedStore';\n\ninterface ServiceResponse {\n    renderResult: string;\n    inlineScript?: string;\n    styles?: string[];\n    scripts: string[];\n    globalServiceName: MicroFrontendServiceName;\n    remoteServiceName?: RemoteServiceName;\n    remoteEntry?: string;\n    isSuccessSSR: boolean;\n    proxiedState?: Partial<DefaultRootState>;\n    noContent?: boolean;\n}\n\ninterface RemoteWebpackModule {\n    init: (moduleName: string) => Promise<() => { default: () => void }>;\n    get: (moduleName: string) => Promise<() => { default: () => void }>;\n    inited: boolean;\n}\n\ndeclare global {\n    interface FetcherGetApi {\n        [`SERVICE_URL`]: {\n            response: ServiceResponse;\n            queryParams: unknown;\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-interface\n    interface Window extends Record<RemoteServiceName, RemoteWebpackModule> {}\n}\n\ninterface ScriptAttributes {\n    src?: string;\n    type: string;\n    innerHTML?: string;\n    crossOrigin?: string;\n    onload?: () => void;\n    onerror?: (src?: string) => void;\n    remote?: RemoteServiceName;\n}\n\ninterface LinkAttributes {\n    href: string;\n    type: string;\n    rel: string;\n}\n\nconst putLink = (props: LinkAttributes, context: HTMLElement) => {\n    const node = document.createElement('link');\n\n    const promise = new Promise<void>((resolve) => {\n        node.addEventListener('load', () => {\n            resolve();\n        });\n    });\n\n    Object.keys(props).forEach((prop) => {\n        node[prop] = props[prop];\n    });\n\n    context.appendChild(node);\n    return promise;\n};\n\nconst putScript = ({ remote, onerror, onload, ...props }: ScriptAttributes, context: HTMLElement) => {\n    const node = document.createElement('script');\n\n    Object.entries(props).forEach(([prop, value]) => {\n        const attr = prop as Exclude<keyof ScriptAttributes, 'onload' | 'onerror' | 'remote'>;\n        node[attr] = value;\n    });\n\n    if (onload) {\n        node.addEventListener('load', onload);\n    }\n\n    if (onerror) {\n        node.addEventListener('error', () => onerror(props.src));\n    }\n\n    if (remote) {\n        node.dataset.webpack = remote;\n    }\n\n    context.appendChild(node);\n};\n\nconst getRemoteWebpackModuleLink = (remote: RemoteServiceName) => {\n    const linkToRemoteWebpackModule = window[remote];\n    return linkToRemoteWebpackModule;\n};\n\nconst getExistingRemote = (remote: RemoteServiceName | undefined): HTMLScriptElement | null => {\n    if (!remote) {\n        return null;\n    }\n    return document.querySelector(`[data-webpack=\"${remote}\"]`);\n};\n\nconst loadingRemoteEntry: Record<string, Promise<void>> = {};\n\nconst getOrLoadRemote = async (\n    remote: RemoteServiceName,\n    shareScope: string,\n    remoteFallbackUrl: string,\n    container: HTMLElement\n) => {\n    const loadEntry = new Promise<void>((resolve) => {\n        const existingRemote = getExistingRemote(remote);\n        const onload = async () => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            await __webpack_init_sharing__('default');\n            const linkToRemoteWebpackModule = getRemoteWebpackModuleLink(remote);\n\n            if (linkToRemoteWebpackModule.inited) {\n                resolve();\n                return;\n            }\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            // eslint-disable-next-line camelcase,@typescript-eslint/no-unsafe-member-access\n            await linkToRemoteWebpackModule.init(__webpack_share_scopes__[shareScope] as string);\n            linkToRemoteWebpackModule.inited = true;\n            resolve();\n        };\n\n        const onError = (src?: string) => {\n            let remoteScriptResource: PerformanceEntry[] | undefined;\n\n            if (PerformanceObserver?.supportedEntryTypes?.includes?.('resource')) {\n                remoteScriptResource = performance.getEntriesByType('resource').filter((entry) => {\n                    return src ? entry.name.includes(src) : false;\n                });\n            }\n\n            const remoteScriptResourceDuration = remoteScriptResource?.reduce((prev, item) => prev + item.duration, 0);\n\n            const statsSender = new StatsSender('xhh', window.globalVars, '/stat');\n\n            statsSender.sendMetrics({\n                report: 'mf-load-error',\n                value: remoteScriptResourceDuration,\n            });\n        };\n\n        function loadScript() {\n            putScript(\n                {\n                    src: remoteFallbackUrl,\n                    type: 'text/javascript',\n                    crossOrigin: 'anonymous',\n                    onload,\n                    onerror: onError,\n                    remote,\n                },\n                container\n            );\n        }\n\n        if (!(remote in window)) {\n            if (existingRemote) {\n                void loadingRemoteEntry[remote].then(() => {\n                    void onload();\n                });\n            } else {\n                loadScript();\n            }\n        } else {\n            void onload();\n        }\n    });\n\n    loadingRemoteEntry[remote] = loadingRemoteEntry[remote] ?? loadEntry;\n    return loadEntry;\n};\n\ninterface AppOptions {\n    unmountApp?: boolean;\n    container: HTMLDivElement;\n    identifier: string;\n}\n\nexport interface RemoteModule {\n    (options: AppOptions): void;\n}\nexport type RemoteModuleOrNull = RemoteModule | null;\nexport type RemoteModuleWithGlobalServiceNameOrNull = [RemoteModuleOrNull, MicroFrontendServiceName] | null;\n\nconst loggingPlaces: Record<string, { hasDefault: boolean; moduleValue: number }> = {};\n\nconst getRemoteModule = async (\n    remote: RemoteServiceName | undefined,\n    url: string | undefined,\n    container: HTMLDivElement\n): Promise<RemoteModuleOrNull> => {\n    if (remote && url) {\n        try {\n            await getOrLoadRemote(remote, 'default', url, container);\n        } catch (error) {\n            return null;\n        }\n        const linkToRemoteWebpackModule = getRemoteWebpackModuleLink(remote);\n        const factory = await linkToRemoteWebpackModule.get('./App');\n\n        const Module = factory();\n\n        loggingPlaces[container.classList.value] = {\n            hasDefault: true,\n            moduleValue: Module.default.toString().length,\n        };\n\n        return Module.default;\n    }\n\n    return null;\n};\n\nconst getAndLoadARemoteApp = async (\n    remote: RemoteServiceName | undefined,\n    globalServiceName: MicroFrontendServiceName,\n    url: string | undefined,\n    container: HTMLDivElement,\n    identifier: string\n): Promise<RemoteModuleOrNull> => {\n    let initApp = await getRemoteModule?.(remote, url, container);\n\n    if (window.globalServiceVars?.[globalServiceName]?.hasSupportToDestroyApp && initApp) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        initApp = initApp();\n    }\n    initApp?.({ unmountApp: false, container, identifier });\n    return initApp;\n};\n\ntype StateLoaderMapping = {\n    [K in keyof DefaultRootState]?: LoaderFunction<DefaultRootState[K]>;\n};\ntype LoaderFunction<T> = (dispatch: Dispatch<Action>, value: T) => void;\ntype ProxiedState = Partial<DefaultRootState>;\n\nconst STATE_LOADERS_MAPPING: StateLoaderMapping = {\n    userNotifications: (dispatch, value) => {\n        dispatch(addUserNotifications(value));\n    },\n} as const;\n\nconst processProxiedState = async (proxiedState: ProxiedState) => {\n    const store = await getStore();\n    Object.keys(STATE_LOADERS_MAPPING).forEach((storeFieldName) => {\n        const value = proxiedState[storeFieldName];\n        const loader = STATE_LOADERS_MAPPING[storeFieldName];\n        if (value !== undefined && loader) {\n            (loader as LoaderFunction<typeof value>)(store.dispatch, value);\n        }\n    });\n};\n\nconst loadProxyService = async (\n    place: string,\n    serviceInfo: SerivceInfo,\n    container: HTMLDivElement | null,\n    identifier: string,\n    isFullPage?: boolean\n): Promise<RemoteModuleWithGlobalServiceNameOrNull> => {\n    if (serviceInfo === undefined) {\n        return null;\n    }\n    const loadService = async (data: ServiceResponse): Promise<RemoteModuleWithGlobalServiceNameOrNull> => {\n        if (container === null) {\n            return null;\n        }\n\n        container.classList.add(`HH-ProxyExternalServiceLoader-${data.globalServiceName}`);\n\n        if (data.isSuccessSSR && data.renderResult !== '' && data.remoteServiceName) {\n            if (data.inlineScript) {\n                putScript(\n                    {\n                        type: 'text/javascript',\n                        innerHTML: data.inlineScript,\n                    },\n                    container\n                );\n            }\n\n            const moduleApp = await getAndLoadARemoteApp(\n                data.remoteServiceName,\n                data.globalServiceName,\n                data.remoteEntry,\n                container,\n                identifier\n            );\n            return [moduleApp, data.globalServiceName];\n        }\n\n        container.innerHTML = '';\n        const ssrRenderNode = document.createElement('div');\n        ssrRenderNode.innerHTML = data.renderResult;\n        container.appendChild(ssrRenderNode);\n\n        data.styles?.forEach((href) => {\n            const attr: LinkAttributes = { href, type: 'text/css', rel: 'stylesheet' };\n            void putLink(attr, container);\n        });\n\n        if (data.inlineScript) {\n            putScript(\n                {\n                    type: 'text/javascript',\n                    innerHTML: data.inlineScript,\n                },\n                container\n            );\n        }\n\n        data.scripts?.forEach((src) => {\n            putScript({ src: `${src}`, type: 'text/javascript', crossOrigin: 'anonymous' }, container);\n        });\n\n        // TODO Удалить все условие после перехода фронтов на front-static-app >= 1.1.2\n        if (data.remoteEntry) {\n            const notLoadedScript = getExistingRemote(data.remoteServiceName);\n\n            /**\n             * Скрипт, который был вставлен через innerHTML загружен не будет, нужно отличать от случая, когда скрипт\n             * кладет SSR. В случае с SSR мы используем уже загруженный скрипт\n             */\n            if (notLoadedScript) {\n                notLoadedScript.dataset.webpack = '';\n            }\n\n            const moduleApp = await getAndLoadARemoteApp(\n                data.remoteServiceName,\n                data.globalServiceName,\n                data.remoteEntry,\n                container,\n                identifier\n            );\n            return [moduleApp, data.globalServiceName];\n        }\n\n        return null;\n    };\n\n    const renderResult = container?.innerHTML ?? '';\n\n    if ((serviceInfo.isSuccessSSR && renderResult !== '') || serviceInfo.useSSRResult) {\n        return loadService({\n            scripts: serviceInfo.scripts ?? [],\n            styles: serviceInfo.styles ?? [],\n            globalServiceName: serviceInfo.globalServiceName,\n            remoteServiceName: serviceInfo.remoteServiceName,\n            inlineScript: serviceInfo.inlineScript,\n            remoteEntry: serviceInfo.remoteEntry,\n            renderResult: renderResult ?? '',\n            isSuccessSSR: serviceInfo.isSuccessSSR,\n        });\n    }\n\n    let data;\n    try {\n        data = await fetcher.get<'SERVICE_URL'>(serviceInfo.url, {\n            headers: {\n                'X-Proxied-Type': isFullPage ? '' : 'Component',\n                'X-Proxied-Place': place,\n                'X-Proxied-Page-Name': window.globalVars.pageName,\n                'X-Proxied-Hhtm-Source': window.globalVars.analyticsParams.hhtmSource,\n                'X-Static-Version': window.globalVars.build,\n            },\n            params: {},\n        });\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n\n    if (data.noContent) {\n        const store = await getStore();\n        store.dispatch(deleteMicroFrontend(place));\n        return null;\n    }\n\n    void processProxiedState(data.proxiedState || {});\n    return loadService(data);\n};\n\nexport default loadProxyService;\n","// extracted by mini-css-extract-plugin\nexport default {\"clickmeContent\":\"clickme-content--z9gwQQccPzb5FLVEkEJa\",\"clickmeAdvantagesContainer\":\"clickme-advantages-container--Yta5MiqYaMywLMjt5shC\",\"clickmeAdvantage\":\"clickme-advantage--jD2DbsYUQJ4SGchehPDb\",\"clickmeFormError\":\"clickme-form-error--TPMnkW92u08Aj6ar9Gpb\",\"clickmeSource\":\"clickme-source--OokYqhn6Z9US9XfUZj8A\"};","import { Fragment } from 'react';\n\nimport HSpacing from 'bloko/blocks/hSpacing';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\n\nimport styles from './index.less';\n\nconst TrlKeys = {\n    descriptionPublication: 'clickme.autoCampaign.description.publication',\n    views: 'clickme.autoCampaign.views',\n    responses: 'clickme.autoCampaign.responses',\n};\n\nconst Advantages: TranslatedComponent = ({ trls }) => {\n    return (\n        <Fragment>\n            <Text>{trls[TrlKeys.descriptionPublication]}</Text>\n            <VSpacing base={2} />\n            <div className={styles.clickmeAdvantagesContainer}>\n                <div className={styles.clickmeAdvantage}>{trls[TrlKeys.views]}</div>\n                <HSpacing base={5} />\n                <div className={styles.clickmeAdvantage}>{trls[TrlKeys.responses]}</div>\n            </div>\n            <VSpacing base={6} />\n        </Fragment>\n    );\n};\n\nexport default translation(Advantages);\n","// extracted by mini-css-extract-plugin\nexport default {\"clickmeBannerContainer\":\"clickme-banner-container--Vrrp99kvKI7OBpCRQ2Wp\",\"clickmeBannerEdit\":\"clickme-banner-edit--_aLR0i0Ha6LR0hI1w90z\"};","import { Fragment } from 'react';\n\nimport Icon, { IconScale, IconView, IconLink, IconColor } from 'bloko/blocks/icon';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport BannerContent from 'lux/components/Clickme/AutoCampaign/common/BannerContent/BannerContent';\nimport { CampaignData, CampaignDataField } from 'lux/components/ClickmeAutoCampaign/utils';\nimport translation from 'lux/components/translation';\n\nimport styles from './Banner.less';\n\ninterface BannerProps {\n    campaignData: CampaignData;\n    switchToEditingState?: () => void;\n}\n\nconst TrlKeys = {\n    titlePreview: 'clickme.autoCampaign.banner.title.preview',\n    titleView: 'clickme.autoCampaign.banner.title.view',\n};\n\nconst Banner: TranslatedComponent<BannerProps> = ({ trls, campaignData, switchToEditingState }) => {\n    const isEdit = !!switchToEditingState;\n    return (\n        <Fragment>\n            <Text>{trls[isEdit ? TrlKeys.titlePreview : TrlKeys.titleView]}</Text>\n            <VSpacing base={2} />\n            <div className={styles.clickmeBannerContainer}>\n                <BannerContent\n                    title={campaignData[CampaignDataField.Title]}\n                    text={campaignData[CampaignDataField.Text]}\n                />\n                {isEdit && (\n                    <div className={styles.clickmeBannerEdit}>\n                        <IconLink onClick={switchToEditingState}>\n                            <Icon view={IconView.PenSquare} scale={IconScale.Small} initial={IconColor.Gray60} />\n                        </IconLink>\n                    </div>\n                )}\n            </div>\n        </Fragment>\n    );\n};\n\nexport default translation(Banner);\n","import { Fragment } from 'react';\n\nimport openDashboard from '@hh.ru/analytics-js-events/build/xhh/employer/clickme/auto_campaign_open_dashboard_button_click';\nimport Link from 'bloko/blocks/link';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\n\nimport { CampaignState, getClickmeLink } from 'lux/components/ClickmeAutoCampaign/utils';\n\nconst TrlKeys = {\n    descriptionControl: 'clickme.autoCampaign.description.control',\n    link: 'clickme.autoCampaign.clickme.link',\n};\n\nconst Control: TranslatedComponent = ({ trls }) => {\n    return (\n        <Fragment>\n            <Text Element=\"span\">{trls[TrlKeys.descriptionControl]}</Text>{' '}\n            <Link\n                onClick={() => openDashboard({ hhtmFromLabel: CampaignState.Confirmation })}\n                href={getClickmeLink('autorun_mod_1')}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                disableVisited\n            >\n                {trls[TrlKeys.link]}\n            </Link>\n            <VSpacing base={4} />\n        </Fragment>\n    );\n};\n\nexport default translation(Control);\n","import { Fragment } from 'react';\n\nimport { FormError, FormItem } from 'bloko/blocks/form';\nimport InputText from 'bloko/blocks/inputText';\nimport Text from 'bloko/blocks/text';\nimport Textarea from 'bloko/blocks/textarea';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport FormErrorHint from 'lux/components/Clickme/AutoCampaign/common/FormErrorHint/FormErrorHint';\nimport translation from 'lux/components/translation';\n\nimport {\n    CampaignData,\n    CampaignDataField,\n    CampaignErrors,\n    LimitBannerContent,\n    ValidationField,\n} from 'lux/components/ClickmeAutoCampaign/utils';\n\ninterface Field {\n    fieldName: ValidationField;\n    data: string;\n}\n\ntype SetCampaignField = (field: Field) => void;\n\nconst TrlKeys = {\n    formInputHint: 'clickme.autoCampaign.form.input.hint',\n    label: {\n        title: 'clickme.autoCampaign.form.label.title',\n        text: 'clickme.autoCampaign.form.label.text',\n    },\n};\n\ninterface FormProps {\n    campaignData: CampaignData;\n    campaignErrors: CampaignErrors;\n    setCampaignData: (campaignData: CampaignData) => void;\n    setCampaignErrors: (campaignErrors: CampaignErrors) => void;\n}\n\nconst Form: TranslatedComponent<FormProps> = ({\n    trls,\n    campaignData,\n    campaignErrors,\n    setCampaignData,\n    setCampaignErrors,\n}) => {\n    const title = campaignData[CampaignDataField.Title];\n    const text = campaignData[CampaignDataField.Text];\n    const errorTitle = campaignErrors[CampaignDataField.Title];\n    const errorText = campaignErrors[CampaignDataField.Text];\n    const setCampaignField: SetCampaignField = ({ fieldName, data }) => {\n        setCampaignData({ ...campaignData, [fieldName]: data });\n        if (Object.keys(campaignErrors).length > 0 && fieldName in campaignErrors) {\n            const newCampaignErrors = { ...campaignErrors };\n            delete newCampaignErrors[fieldName];\n            setCampaignErrors(newCampaignErrors);\n        }\n    };\n\n    return (\n        <Fragment>\n            <Text strong>{trls[TrlKeys.label.title]}</Text>\n            <VSpacing base={2} />\n            <FormItem>\n                <InputText\n                    value={title}\n                    onChange={(value) => setCampaignField({ fieldName: CampaignDataField.Title, data: value })}\n                    invalid={!!errorTitle}\n                />\n            </FormItem>\n            <FormError show={!!errorTitle}>{errorTitle}</FormError>\n            {!errorTitle && (\n                <Fragment>\n                    <FormErrorHint content={title} contentLimit={LimitBannerContent.Title} />\n                    <VSpacing base={2} />\n                </Fragment>\n            )}\n            <VSpacing base={3} />\n            <Text strong>{trls[TrlKeys.label.text]}</Text>\n            <VSpacing base={2} />\n            <FormItem>\n                <Textarea\n                    value={text}\n                    onChange={(event) =>\n                        setCampaignField({ fieldName: CampaignDataField.Text, data: event.target.value })\n                    }\n                    invalid={!!errorText}\n                />\n            </FormItem>\n            <FormError show={!!errorText}>{errorText}</FormError>\n            {!errorText && (\n                <Fragment>\n                    <FormErrorHint content={text} contentLimit={LimitBannerContent.Text} />\n                    <VSpacing base={2} />\n                </Fragment>\n            )}\n            <VSpacing base={4} />\n        </Fragment>\n    );\n};\n\nexport default translation(Form);\n","import { Fragment } from 'react';\n\nimport Text, { TextSize } from 'bloko/blocks/text';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport FormatMoney from 'lux/components/FormatMoney';\nimport translation from 'lux/components/translation';\nimport { ClickmeProductType } from 'lux/models/price/product.types';\n\nconst TrlKeys = {\n    priceTitle: 'clickme.autoCampaign.price.title',\n};\n\ninterface PriceProps {\n    product: ClickmeProductType;\n}\n\nconst Price: TranslatedComponent<PriceProps> = ({ trls, product }) => {\n    return (\n        <Fragment>\n            <Text Element=\"span\" size={TextSize.Large}>\n                {trls[TrlKeys.priceTitle]}\n            </Text>{' '}\n            <Text Element=\"span\" size={TextSize.Large} strong>\n                <FormatMoney currency={product.currency} inCents>\n                    {product.price}\n                </FormatMoney>\n            </Text>\n        </Fragment>\n    );\n};\n\nexport default translation(Price);\n","import Radio from 'bloko/blocks/radio';\nimport Text, { TextImportance } from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport FormatMoney from 'lux/components/FormatMoney';\nimport translation from 'lux/components/translation';\nimport { SourceCode } from 'lux/models/clickmeAutoCampaign';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport { CampaignData, CampaignDataField } from 'lux/components/ClickmeAutoCampaign/utils';\n\nimport styles from './index.less';\n\nconst TrlKeys = {\n    sourcesTitle: 'clickme.autoCampaign.sources.title',\n    sources: {\n        [SourceCode.Hh]: 'clickme.autoCampaign.sources.hh',\n        [SourceCode.HhYandex]: 'clickme.autoCampaign.sources.hhYandex',\n        [SourceCode.HhYandexSocial]: 'clickme.autoCampaign.sources.hhYandexSocial',\n    },\n};\n\ninterface SourcesProps {\n    campaignData: CampaignData;\n    setCampaignData: (campaignData: CampaignData) => void;\n}\n\nconst Sources: TranslatedComponent<SourcesProps> = ({ trls, campaignData, setCampaignData }) => {\n    const initClickmeInfo = useSelector((state) => state.clickmeAutoCampaign.initClickmeInfo);\n\n    const { clickmeUpgrades } = initClickmeInfo || {};\n\n    if (!clickmeUpgrades) {\n        return null;\n    }\n\n    return (\n        <>\n            <Text>{trls[TrlKeys.sourcesTitle]}</Text>\n            {clickmeUpgrades.map(({ sourceCode, purchase }) => {\n                const product = purchase.products[0];\n                return (\n                    <div key={sourceCode}>\n                        <VSpacing base={2} />\n                        <Radio\n                            name=\"sources\"\n                            onChange={(event) => {\n                                const currentSourceCode = event.target.value as SourceCode;\n                                setCampaignData({ ...campaignData, [CampaignDataField.SourceCode]: currentSourceCode });\n                            }}\n                            checked={sourceCode === campaignData[CampaignDataField.SourceCode]}\n                            value={sourceCode}\n                        >\n                            <div className={styles.clickmeSource}>\n                                <Text Element=\"span\">{trls[TrlKeys.sources[sourceCode]]}</Text>{' '}\n                                <Text Element=\"span\" importance={TextImportance.Tertiary}>\n                                    <FormatMoney currency={product.currency} inCents>\n                                        {product.price}\n                                    </FormatMoney>\n                                </Text>\n                            </div>\n                        </Radio>\n                    </div>\n                );\n            })}\n        </>\n    );\n};\n\nexport default translation(Sources);\n","import { Fragment, useCallback, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport clickBack from '@hh.ru/analytics-js-events/build/xhh/employer/clickme/auto_campaign_back_button_click';\nimport clickClose from '@hh.ru/analytics-js-events/build/xhh/employer/clickme/auto_campaign_close_button_click';\nimport clickEdit from '@hh.ru/analytics-js-events/build/xhh/employer/clickme/auto_campaign_edit_button_click';\nimport formSubmit from '@hh.ru/analytics-js-events/build/xhh/employer/clickme/auto_campaign_form_submit';\nimport clickNext from '@hh.ru/analytics-js-events/build/xhh/employer/clickme/auto_campaign_next_button_click';\nimport openCart from '@hh.ru/analytics-js-events/build/xhh/employer/clickme/auto_campaign_open_cart_button_click';\nimport openDashboard from '@hh.ru/analytics-js-events/build/xhh/employer/clickme/auto_campaign_open_dashboard_button_click';\nimport Button, { ButtonAppearance, ButtonKind } from 'bloko/blocks/button';\nimport HSpacing from 'bloko/blocks/hSpacing';\nimport Modal, { ModalContent, ModalError, ModalFooter, ModalHeader, ModalTitle } from 'bloko/blocks/modal';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport useOnOffState from 'lux/hooks/useOnOffState';\nimport { setClickmeAutoCampaignConfig, SourceCode } from 'lux/models/clickmeAutoCampaign';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\nimport { createCart } from 'lux/requests/price/cart';\n\nimport Advantages from 'lux/components/ClickmeAutoCampaign/Advantages';\nimport Banner from 'lux/components/ClickmeAutoCampaign/Banner/Banner';\nimport Control from 'lux/components/ClickmeAutoCampaign/Control';\nimport Form from 'lux/components/ClickmeAutoCampaign/Form';\nimport Price from 'lux/components/ClickmeAutoCampaign/Price';\nimport Sources from 'lux/components/ClickmeAutoCampaign/Sources';\nimport {\n    ANALYTICS_PARAMS,\n    CampaignData,\n    CampaignDataField,\n    CampaignErrors,\n    CampaignState,\n    getClickmeLink,\n    INIT_STATE_CAMPAIGN_DATA,\n    SOURCES_CONFIG,\n    StartOrValidationCampaignState,\n    ValidationField,\n    mapOutgoingSourceConfig,\n    OutgoingSourceConfig,\n} from 'lux/components/ClickmeAutoCampaign/utils';\n\nimport styles from './index.less';\n\nenum ClickmeUrl {\n    Create = '/shards/employer/clickme_auto_campaign/create',\n    Validate = '/shards/employer/clickme_auto_campaign/validate',\n}\n\ninterface ClickmeData {\n    queryParams: void;\n    body: {\n        vacancyId: number;\n        title: string;\n        text: string;\n        sources: OutgoingSourceConfig[];\n        budget: string;\n    };\n    response: { campaignState: CampaignState; validationErrors?: Record<ValidationField, string> };\n}\n\ndeclare global {\n    interface FetcherPostApi {\n        [ClickmeUrl.Create]: ClickmeData;\n        [ClickmeUrl.Validate]: ClickmeData;\n    }\n}\n\nconst TrlKeys = {\n    title: {\n        start: 'clickme.autoCampaign.start.title',\n        created: 'clickme.autoCampaign.created.title',\n        createdButPaymentRequired: 'clickme.autoCampaign.createdButPaymentRequired.title',\n        alreadyCreated: 'clickme.autoCampaign.alreadyCreated.title',\n    },\n    description: {\n        createdButPaymentRequired: 'clickme.autoCampaign.description.createdButPaymentRequired',\n        created: 'clickme.autoCampaign.description.created',\n        alreadyCreated: 'clickme.autoCampaign.description.alreadyCreated',\n    },\n    buttons: {\n        start: 'clickme.autoCampaign.start',\n        save: 'clickme.autoCampaign.save',\n        pay: 'clickme.autoCampaign.pay',\n        fill: 'clickme.autoCampaign.fill',\n        goClickme: 'clickme.autoCampaign.goClickme',\n        goBanner: 'clickme.autoCampaign.goBanner',\n        back: 'clickme.autoCampaign.back',\n    },\n    defaultError: 'clickme.autoCampaign.defaultError',\n};\n\nconst ClickmeAutoCampaignModal: TranslatedComponent = ({ trls }) => {\n    const { isVisible, initClickmeInfo, onClickBack } = useSelector((state) => state.clickmeAutoCampaign);\n    const dispatch = useDispatch();\n\n    const [campaignState, setCampaignState] = useState<CampaignState>(CampaignState.Start);\n    const [campaignData, setCampaignData] = useState<CampaignData>(INIT_STATE_CAMPAIGN_DATA);\n    const [campaignErrors, setCampaignErrors] = useState<CampaignErrors>({});\n\n    const [showDefaultError, setDefaultError, resetDefaultError] = useOnOffState(false);\n\n    const products = initClickmeInfo?.clickmeUpgrades.find(\n        ({ sourceCode }) => sourceCode === campaignData[CampaignDataField.SourceCode]\n    )?.purchase.products;\n\n    const sources = SOURCES_CONFIG[campaignData[CampaignDataField.SourceCode]];\n\n    useEffect(() => {\n        if (initClickmeInfo) {\n            setCampaignState(CampaignState.Start);\n            setCampaignErrors({});\n            setCampaignData({\n                [CampaignDataField.Title]: initClickmeInfo.title,\n                [CampaignDataField.Text]: initClickmeInfo.text,\n                [CampaignDataField.SourceCode]: SourceCode.Hh,\n            });\n        }\n    }, [initClickmeInfo]);\n\n    const startCampaign = useCallback(\n        async (currentState: StartOrValidationCampaignState) => {\n            if (initClickmeInfo && products) {\n                const isOnlyValidation = [CampaignState.Start, CampaignState.Editing].includes(currentState);\n                const vacancyId = initClickmeInfo.vacancyId;\n                clickNext({ buttonName: ANALYTICS_PARAMS[currentState].next, sources: sources.join(',') });\n\n                let response;\n                try {\n                    response = await fetcher.post(isOnlyValidation ? ClickmeUrl.Validate : ClickmeUrl.Create, {\n                        vacancyId,\n                        title: campaignData[CampaignDataField.Title],\n                        text: campaignData[CampaignDataField.Text],\n                        sources: mapOutgoingSourceConfig(sources),\n                        budget: products[0].count,\n                    });\n                } catch (error) {\n                    setDefaultError();\n                    return;\n                }\n\n                setCampaignState(response.data.campaignState);\n                const errors = response.data.validationErrors;\n                if (errors) {\n                    setCampaignErrors(errors);\n                }\n                formSubmit({\n                    formName: ANALYTICS_PARAMS[currentState].form,\n                    vacancyId,\n                    sources: sources.join(','),\n                    errors: JSON.stringify(errors),\n                });\n            }\n        },\n        [campaignData, initClickmeInfo, products, setDefaultError, sources]\n    );\n\n    if (!initClickmeInfo || !products) {\n        return null;\n    }\n\n    const onClose = () => {\n        dispatch(setClickmeAutoCampaignConfig({ isVisible: false, onClickBack: null }));\n    };\n\n    const BLOCK_CONTENT = {\n        [CampaignState.Start]: {\n            title: trls[TrlKeys.title.start],\n            content: (\n                <Fragment>\n                    <Advantages />\n                    <Banner\n                        campaignData={campaignData}\n                        switchToEditingState={() => {\n                            clickEdit();\n                            setCampaignState(CampaignState.Editing);\n                        }}\n                    />\n                    <VSpacing base={6} />\n                    <Sources campaignData={campaignData} setCampaignData={setCampaignData} />\n                </Fragment>\n            ),\n            footer: (\n                <Fragment>\n                    <Button\n                        kind={ButtonKind.Primary}\n                        appearance={ButtonAppearance.Outlined}\n                        onClick={() => {\n                            clickBack({ hhtmFromLabel: CampaignState.Start });\n                            onClose();\n                            onClickBack?.();\n                        }}\n                    >\n                        {trls[TrlKeys.buttons.back]}\n                    </Button>\n                    <HSpacing base={2} />\n                    <Button kind={ButtonKind.Primary} onClick={() => startCampaign(CampaignState.Start)}>\n                        {trls[TrlKeys.buttons.start]}\n                    </Button>\n                </Fragment>\n            ),\n        },\n        [CampaignState.Editing]: {\n            title: trls[TrlKeys.title.start],\n            content: (\n                <Fragment>\n                    <Advantages />\n                    <Form\n                        campaignData={campaignData}\n                        campaignErrors={campaignErrors}\n                        setCampaignData={setCampaignData}\n                        setCampaignErrors={setCampaignErrors}\n                    />\n                    <Sources campaignData={campaignData} setCampaignData={setCampaignData} />\n                </Fragment>\n            ),\n            footer: (\n                <Fragment>\n                    <Button\n                        kind={ButtonKind.Primary}\n                        appearance={ButtonAppearance.Outlined}\n                        onClick={() => {\n                            if (showDefaultError) {\n                                resetDefaultError();\n                            }\n                            clickBack({ hhtmFromLabel: CampaignState.Editing });\n                            setCampaignState(CampaignState.Start);\n                        }}\n                    >\n                        {trls[TrlKeys.buttons.back]}\n                    </Button>\n                    <HSpacing base={2} />\n                    <Button kind={ButtonKind.Primary} onClick={() => startCampaign(CampaignState.Editing)}>\n                        {trls[TrlKeys.buttons.save]}\n                    </Button>\n                </Fragment>\n            ),\n        },\n        [CampaignState.Confirmation]: {\n            title: trls[TrlKeys.title.start],\n            content: (\n                <Fragment>\n                    <Banner campaignData={campaignData} />\n                    <VSpacing base={6} />\n                    <Control />\n                    <Price product={products[0]} />\n                </Fragment>\n            ),\n            footer: (\n                <Fragment>\n                    <Button\n                        kind={ButtonKind.Primary}\n                        appearance={ButtonAppearance.Outlined}\n                        onClick={() => {\n                            if (showDefaultError) {\n                                resetDefaultError();\n                            }\n                            clickBack({ hhtmFromLabel: CampaignState.Confirmation });\n                            setCampaignState(CampaignState.Start);\n                        }}\n                    >\n                        {trls[TrlKeys.buttons.back]}\n                    </Button>\n                    <HSpacing base={2} />\n                    <Button kind={ButtonKind.Primary} onClick={() => startCampaign(CampaignState.Confirmation)}>\n                        {trls[TrlKeys.buttons.pay]}\n                    </Button>\n                </Fragment>\n            ),\n        },\n        [CampaignState.CreatedButPaymentRequired]: {\n            title: trls[TrlKeys.title.createdButPaymentRequired],\n            content: <Text>{trls[TrlKeys.description.createdButPaymentRequired]}</Text>,\n            footer: (\n                <Button\n                    kind={ButtonKind.Primary}\n                    onClick={() => {\n                        openCart({ sources: sources.join(',') });\n                        void dispatch(\n                            createCart(products, {\n                                source: 'upgradePopup',\n                            })\n                        );\n                    }}\n                >\n                    {trls[TrlKeys.buttons.fill]}\n                </Button>\n            ),\n        },\n        [CampaignState.Created]: {\n            title: trls[TrlKeys.title.created],\n            content: (\n                <Fragment>\n                    <Text>{trls[TrlKeys.description.created]}</Text>\n                    <VSpacing base={6} />\n                    <Banner campaignData={campaignData} />\n                </Fragment>\n            ),\n            footer: (\n                <Button\n                    kind={ButtonKind.Primary}\n                    Element=\"a\"\n                    target=\"_blank\"\n                    href={getClickmeLink('autorun_mod_2')}\n                    onClick={() => openDashboard({ hhtmFromLabel: CampaignState.Created })}\n                >\n                    {trls[TrlKeys.buttons.goClickme]}\n                </Button>\n            ),\n        },\n        [CampaignState.AlreadyCreated]: {\n            title: trls[TrlKeys.title.alreadyCreated],\n            content: <Text>{trls[TrlKeys.description.alreadyCreated]}</Text>,\n            footer: (\n                <Button\n                    kind={ButtonKind.Primary}\n                    Element=\"a\"\n                    target=\"_blank\"\n                    href={getClickmeLink('autorun_mod_3')}\n                    onClick={() => openDashboard({ hhtmFromLabel: CampaignState.AlreadyCreated })}\n                >\n                    {trls[TrlKeys.buttons.goBanner]}\n                </Button>\n            ),\n        },\n    };\n\n    return (\n        <Modal\n            visible={isVisible}\n            onClose={() => {\n                clickClose({ hhtmFromLabel: campaignState });\n                onClose();\n            }}\n        >\n            <ModalHeader>\n                <ModalTitle>{BLOCK_CONTENT[campaignState].title}</ModalTitle>\n            </ModalHeader>\n            <ModalContent>\n                <div className={styles.clickmeContent}>{BLOCK_CONTENT[campaignState].content}</div>\n            </ModalContent>\n            <ModalError visible={showDefaultError}>{trls[TrlKeys.defaultError]}</ModalError>\n            <ModalFooter alignmentLeft>{BLOCK_CONTENT[campaignState].footer}</ModalFooter>\n        </Modal>\n    );\n};\n\nexport default translation(ClickmeAutoCampaignModal);\n","import {\n    MutableRefObject,\n    FC,\n    PropsWithChildren,\n    ReactNode,\n    useEffect,\n    useContext,\n    useState,\n    useRef,\n    memo,\n} from 'react';\n\nimport Loading, { LoadingScale } from 'bloko/blocks/loading';\n\nimport loadProxyService, { RemoteModuleOrNull } from 'Modules/ProxyExternalServiceLoader';\nimport { SerivceInfo, MicroFrontendServiceName } from 'lux/models/microFrontends';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport { CodeInjectorContext } from 'lux/components/CodeInjector';\n\ninterface ContainerForMicroFrontendProps {\n    preloadContent?: ReactNode;\n    place: string;\n    isFullPage?: boolean;\n    serviceInfo: MutableRefObject<SerivceInfo>;\n}\n\nconst getClassName = (place: string) => `HH-ContainerForMicroFrontend-${place}`;\n\nlet id = 0;\n\nconst ContainerForMicroFrontend: FC<PropsWithChildren<ContainerForMicroFrontendProps>> = ({\n    preloadContent = <Loading scale={LoadingScale.Small} />,\n    serviceInfo,\n    place,\n    isFullPage = false,\n}) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const codeInjectorContext = useContext(CodeInjectorContext);\n    const classNameForJS = getClassName(place);\n    let content = serviceInfo.current?.isSuccessSSR ? null : preloadContent;\n\n    let innerHTML = {};\n\n    if (process.env.LUX_SERVER) {\n        codeInjectorContext.placesNamesForMicroFrontends.push(place);\n        const MicrofrontendDelimeter = place;\n        content = <MicrofrontendDelimeter />;\n    } else if (serviceInfo.current?.isSuccessSSR) {\n        const container: HTMLDivElement | null =\n            document.querySelector(`.${classNameForJS}`) ??\n            document.querySelector(`.HH-ContainerForMicroFrontend-Hidden-${place}`);\n\n        innerHTML = {\n            dangerouslySetInnerHTML: {\n                __html: container?.innerHTML,\n            },\n        };\n    }\n\n    useEffect(() => {\n        const container = containerRef.current;\n        let globalServiceName: MicroFrontendServiceName;\n        let app: RemoteModuleOrNull = null;\n\n        id += 1;\n        const identifier = `${place}-${id}`;\n\n        void loadProxyService(place, serviceInfo.current, container, identifier, isFullPage).then((data) => {\n            if (data && container) {\n                const [appModule, globalServiceNameValue] = data;\n                app = appModule;\n                globalServiceName = globalServiceNameValue;\n            }\n        });\n\n        return () => {\n            /* Destroy надо делать в micro || macro таске, иначе получаем гонку между unmount\n             * microfrontend и xhh\n             * */\n            setTimeout(() => {\n                if (!globalServiceName) {\n                    return;\n                }\n\n                const isSupportDestroy = window.globalServiceVars?.[globalServiceName]?.hasSupportToDestroyApp;\n                if (container && isSupportDestroy) {\n                    app?.({\n                        unmountApp: true,\n                        container,\n                        identifier,\n                    });\n                    app = null;\n                }\n            }, 0);\n        };\n    }, [place, isFullPage, serviceInfo]);\n\n    if (!serviceInfo.current) {\n        return null;\n    }\n\n    return (\n        <div ref={containerRef} className={classNameForJS} {...innerHTML}>\n            {content}\n        </div>\n    );\n};\n\ninterface ContainerForMicroFrontendWrapper {\n    preloadContent?: ReactNode;\n    place: string;\n    isFullPage?: boolean;\n}\n\nconst ContainerForMicroFrontendWrapper: FC<PropsWithChildren<ContainerForMicroFrontendWrapper>> = ({\n    place,\n    preloadContent,\n}) => {\n    const serviceInfo = useSelector(({ microFrontends }) => microFrontends[place]);\n    const [keyComponent, setKeyComponent] = useState(place);\n    const previousServiceInfoRef = useRef(serviceInfo);\n\n    useEffect(() => {\n        if (previousServiceInfoRef.current !== serviceInfo) {\n            previousServiceInfoRef.current = serviceInfo;\n            setKeyComponent(`${place}-${Date.now()}`);\n        }\n    }, [place, serviceInfo]);\n\n    if (!serviceInfo) {\n        return null;\n    }\n\n    /* Идея в уничтожении компонента если serviceInfo возвращает новую ссылку\n     * это поможет корректно инициализировать приложение всегда на новой DOM ноде\n     * */\n    return (\n        <ContainerForMicroFrontend\n            key={keyComponent}\n            preloadContent={preloadContent}\n            serviceInfo={previousServiceInfoRef}\n            place={place}\n        />\n    );\n};\n\nexport default memo(ContainerForMicroFrontendWrapper, () => true);\n","import { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport vacancyUpgradeButtonClick from '@hh.ru/analytics-js-events/build/xhh/employer/vacancy/vacancy_upgrade_button_click';\nimport { vacancyUpgradeElementShownRaw } from '@hh.ru/analytics-js-events/build/xhh/employer/vacancy/vacancy_upgrade_element_shown';\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport NumberFormatter from 'bloko/common/numberFormatter';\nimport { format } from 'bloko/common/trl';\n\nimport translation from 'lux/components/translation';\nimport { setClickmeAutoCampaignConfig, SourceCode } from 'lux/models/clickmeAutoCampaign';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst TYPE_CLICKME = 'CLICKME';\n\nconst CLICKME_LINK_ALREADY_CREATED =\n    'https://clickme.hh.ru/new/dashboard/?utm_source=hh.ru&utm_medium=banner&utm_campaign=autorun_mod_end';\n\nconst BuyClickme = ({ trls, vacancyId, handleCloseModal, onClickBack }) => {\n    const initClickmeInfo = useSelector((state) => state.clickmeAutoCampaign.initClickmeInfo);\n\n    const dispatch = useDispatch();\n\n    const { clickmeUpgrades: upgrades, alreadyCreated } = initClickmeInfo || {};\n    const price = upgrades?.find(({ sourceCode }) => sourceCode === SourceCode.Hh)?.purchase?.products?.[0]?.count;\n\n    const onClickmeClick = useCallback(\n        (showPopup) => {\n            vacancyUpgradeButtonClick({\n                type: TYPE_CLICKME,\n                currentUpgrade: 'PROMOTION',\n                vacancyId,\n                isAlreadyCreated: !!alreadyCreated,\n            });\n\n            if (showPopup) {\n                handleCloseModal();\n                dispatch(\n                    setClickmeAutoCampaignConfig({\n                        isVisible: true,\n                        onClickBack,\n                    })\n                );\n            }\n        },\n        [vacancyId, alreadyCreated, handleCloseModal, dispatch, onClickBack]\n    );\n\n    useEffect(() => {\n        if (price) {\n            vacancyUpgradeElementShownRaw({\n                type: TYPE_CLICKME,\n                currentUpgrade: 'PROMOTION',\n                vacancyId,\n                isAlreadyCreated: !!alreadyCreated,\n            });\n        }\n    }, [alreadyCreated, price, vacancyId]);\n\n    if (!price) {\n        return null;\n    }\n\n    return (\n        <>\n            <VSpacing base={5} />\n            <Text strong>{trls[BuyClickme.trls.promo]}</Text>\n            <div className=\"vacancy-upgrade-variant-info\">\n                <div className=\"vacancy-upgrade-variant-benefits\">{trls[BuyClickme.trls.clickme]}</div>\n                <div className=\"vacancy-upgrade-variant-button\">\n                    {alreadyCreated ? (\n                        <Button\n                            kind={ButtonKind.Primary}\n                            onClick={() => onClickmeClick(false)}\n                            Element=\"a\"\n                            target=\"_blank\"\n                            data-qa=\"vacancy-upgrade-popup-submit_clickme\"\n                            href={CLICKME_LINK_ALREADY_CREATED}\n                        >\n                            {trls[BuyClickme.trls.alreadyCreated]}\n                        </Button>\n                    ) : (\n                        <Button\n                            kind={ButtonKind.Primary}\n                            onClick={() => onClickmeClick(true)}\n                            data-qa=\"vacancy-upgrade-popup-submit_clickme\"\n                        >\n                            {format(trls[BuyClickme.trls.promotionClickme], {\n                                '{0}': NumberFormatter.format(String(price), {\n                                    decimalLength: 0,\n                                    groupSeparator: NON_BREAKING_SPACE,\n                                }),\n                            })}\n                        </Button>\n                    )}\n                </div>\n            </div>\n        </>\n    );\n};\n\nBuyClickme.trls = {\n    clickme: 'vacancy.tools.improve.clickme.benefit',\n    promo: 'vacancy.tools.improve.clickme',\n    runClickme: 'vacancy.tools.improve.buy.clickme',\n    promotionClickme: 'vacancy.tools.improve.promotion.clickme',\n    alreadyCreated: 'vacancy.tools.improve.go.clickme',\n};\n\nBuyClickme.propTypes = {\n    trls: PropTypes.object,\n    vacancyId: PropTypes.number,\n    onClickBack: PropTypes.func,\n    handleCloseModal: PropTypes.func,\n};\n\nexport default translation(BuyClickme);\n","import PropTypes from 'prop-types';\n\nexport const productIdType = PropTypes.string;\nexport const periodType = PropTypes.number;\nexport const regionIdType = PropTypes.string;\nexport const currencyType = PropTypes.string;\nexport const productCodeType = PropTypes.string;\n\nexport const productType = PropTypes.shape({\n    code: productCodeType,\n    currency: currencyType,\n    // Должен быть periodType, но бэк отдаёт так\n    period: PropTypes.string,\n    price: PropTypes.number,\n    products: PropTypes.shape({\n        code: productCodeType,\n        // Должен быть number, но бэк отдаёт так\n        count: PropTypes.string,\n    }),\n    profRoleGroup: PropTypes.arrayOf(PropTypes.string),\n    region: regionIdType,\n});\n","import { makeSetStoreField } from '@hh.ru/redux-create-reducer';\n\nimport { vacancyUpdateInitialBodyAction } from 'lux/models/vacancyCreate/vacancyCreateInitialBody';\nimport fetcher from 'lux/modules/fetcher';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nconst vacancyFeaturesAction = makeSetStoreField('vacancyFeatures');\n\nexport default (params) => async (dispatch, getState) => {\n    const { employerManagerId } = getState().vacancyCreateDefaultBody;\n    let upgradedInfo;\n    try {\n        upgradedInfo = await fetcher.get('/shards/employer/vacancies/upgraded_vacancy_info', {\n            params: { ...params, employerManagerId },\n        });\n    } catch (err) {\n        showDefaultError(err);\n        return;\n    }\n\n    dispatch([\n        vacancyFeaturesAction(upgradedInfo.vacancyFeatures),\n        vacancyUpdateInitialBodyAction(upgradedInfo.vacancyCreateInitialBody),\n    ]);\n};\n","import { VACANCY_UPGRADE_SUCCESS } from 'lux/components/Notifications/EmployerVacancies';\nimport { upgradeManagerVacancy } from 'lux/models/employerVacancies/managerVacancies';\nimport { clearUpgradeInfo } from 'lux/models/employerVacancies/vacancyUpgrades';\nimport fetcher from 'lux/modules/fetcher';\nimport addNotification from 'lux/requests/notifications/addNotification';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nexport default (params) => async (dispatch) => {\n    let vacancy;\n    try {\n        vacancy = (await fetcher.get('/shards/employer/vacancies/get_full_vacancy', { params })).vacancy;\n    } catch (error) {\n        dispatch(showDefaultError(error));\n    }\n    dispatch([clearUpgradeInfo(params.vacancyId), upgradeManagerVacancy({ vacancy })]);\n    dispatch(\n        addNotification(VACANCY_UPGRADE_SUCCESS, {\n            name: vacancy.name,\n            metallic: vacancy.metallic,\n        })\n    );\n};\n","import { Fragment, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport vacancyUpgradeButtonClick from '@hh.ru/analytics-js-events/build/xhh/employer/vacancy/vacancy_upgrade_button_click';\nimport { vacancyUpgradeElementShownRaw } from '@hh.ru/analytics-js-events/build/xhh/employer/vacancy/vacancy_upgrade_element_shown';\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Button, { ButtonKind } from 'bloko/blocks/button';\nimport Text from 'bloko/blocks/text';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { formatToReactComponent } from 'bloko/common/trl';\nimport urlParser from 'bloko/common/urlParser';\n\nimport FormatMoney from 'lux/components/FormatMoney';\nimport translation from 'lux/components/translation';\nimport { currencyType, productCodeType, regionIdType } from 'lux/modules/price/propTypes';\nimport { createCart } from 'lux/requests/price/cart';\nimport upgradeVacancy from 'lux/requests/vacancyUpgrades/upgradeVacancy';\n\nconst FINISH_URL = '/employer/invoice/finish';\nconst CARTS_URL = '/employer/carts';\n\nconst VARIANT_BUY = 'BUY';\nconst VARIANT_UPGRADE = 'UPGRADE';\nconst VARIANT_ACTIVATE = 'ACTIVATE';\n\nconst getCartUrl = (carts, vacancyId) => {\n    if (carts?.length === 1) {\n        const finishUrl = urlParser(FINISH_URL);\n        finishUrl.params.cartId = carts[0].cartId;\n        finishUrl.params.backurl = `/vacancy/${vacancyId}#upgrade`;\n        return finishUrl.href;\n    }\n    return CARTS_URL;\n};\n\nconst UpgradeVariants = ({\n    afterVacancyTypeHasBeenChanged,\n    createCart,\n    isEdit,\n    suitableUpgrades,\n    upgradeVacancy,\n    backurl,\n    vacancyId,\n    employerId,\n    handleClose,\n    trls,\n}) => {\n    useEffect(() => {\n        suitableUpgrades?.forEach((suitableUpgrade) => {\n            let currentUpgrade = VARIANT_BUY;\n            if (suitableUpgrade.canUpgrade) {\n                currentUpgrade = VARIANT_UPGRADE;\n            }\n            if (suitableUpgrade.canActivate) {\n                currentUpgrade = VARIANT_ACTIVATE;\n            }\n            if (suitableUpgrade.quotasExhausted) {\n                return;\n            }\n            vacancyUpgradeElementShownRaw({\n                type: suitableUpgrade.metallic,\n                vacancyId,\n                currentUpgrade,\n            });\n        });\n    }, [suitableUpgrades, vacancyId]);\n\n    if (!suitableUpgrades) {\n        return null;\n    }\n\n    const renderActivateButton = (carts, vacancyId, sendAnalytics) => (\n        <Button\n            kind={ButtonKind.Primary}\n            Element={Link}\n            to={getCartUrl(carts, vacancyId)}\n            data-qa=\"vacancy-upgrade-popup-submit_activate\"\n            onClick={() => sendAnalytics(VARIANT_ACTIVATE)}\n        >\n            {trls[UpgradeVariants.trls.activate]}\n        </Button>\n    );\n\n    const renderUpgradeButton = (metallic, sendAnalytics) => (\n        <Button\n            kind={ButtonKind.Primary}\n            onClick={() => {\n                sendAnalytics(VARIANT_UPGRADE);\n                upgradeVacancy({\n                    afterVacancyTypeHasBeenChanged,\n                    isEdit: !!isEdit,\n                    params: { vacancyId, metallic },\n                })\n                    .then(handleClose)\n                    .catch(console.error);\n            }}\n            data-qa=\"vacancy-upgrade-popup-submit_upgrade\"\n        >\n            {trls[UpgradeVariants.trls.update]}\n        </Button>\n    );\n\n    const renderBuyButton = (purchase, sendAnalytics) => {\n        const renderPrice = () =>\n            formatToReactComponent(trls[UpgradeVariants.trls.buyFor], {\n                '{0}': (\n                    <FormatMoney inCents={true} currency={purchase.currency}>\n                        {purchase.totalPrice}\n                    </FormatMoney>\n                ),\n            });\n\n        const onBuyButtonClick = () => {\n            sendAnalytics(VARIANT_BUY);\n            createCart(\n                purchase.products,\n                {\n                    backurl: backurl.buy,\n                    source: 'upgradePopup',\n                    hhtmFromLabel: 'vacancy_upgrade_popup',\n                },\n                employerId ? String(employerId) : undefined\n            );\n        };\n\n        return (\n            <Button kind={ButtonKind.Primary} onClick={onBuyButtonClick} data-qa=\"vacancy-upgrade-popup-submit_buy\">\n                {purchase?.totalPrice ? renderPrice() : trls[UpgradeVariants.trls.buy]}\n            </Button>\n        );\n    };\n\n    const renderButton = (suitableUpgrade) => {\n        const sendAnalytics = (currentUpgrade) => {\n            vacancyUpgradeButtonClick({\n                type: suitableUpgrade.metallic,\n                vacancyId,\n                currentUpgrade,\n            });\n        };\n\n        if (suitableUpgrade.canUpgrade) {\n            return renderUpgradeButton(suitableUpgrade.metallic, sendAnalytics);\n        }\n        if (suitableUpgrade.canActivate) {\n            return renderActivateButton(suitableUpgrade.carts, vacancyId, sendAnalytics);\n        }\n        if (suitableUpgrade.quotasExhausted) {\n            return (\n                <span data-qa=\"vacancy-upgrade-popup_quotas-exhausted\">\n                    {trls[UpgradeVariants.trls.quotasExhausted]}\n                </span>\n            );\n        }\n        return renderBuyButton(suitableUpgrade.purchase, sendAnalytics);\n    };\n\n    return (\n        <Fragment>\n            {suitableUpgrades.map((suitableUpgrade) => (\n                <div key={suitableUpgrade.metallic} data-qa={`vacancy-upgrade-variant_${suitableUpgrade.metallic}`}>\n                    <VSpacing base={5} />\n                    <Text strong>{trls[UpgradeVariants.trls[`${suitableUpgrade.metallic}_IMPROVE`]]}</Text>\n                    <div className=\"vacancy-upgrade-variant-info\">\n                        <div className=\"vacancy-upgrade-variant-benefits\">\n                            {trls[UpgradeVariants.trls[suitableUpgrade.metallic]]}\n                        </div>\n                        <div className=\"vacancy-upgrade-variant-button\">{renderButton(suitableUpgrade)}</div>\n                    </div>\n                </div>\n            ))}\n        </Fragment>\n    );\n};\n\nUpgradeVariants.propTypes = {\n    afterVacancyTypeHasBeenChanged: PropTypes.func,\n    createCart: PropTypes.func,\n    trls: PropTypes.object,\n    isEdit: PropTypes.bool,\n    suitableUpgrades: PropTypes.arrayOf(\n        PropTypes.shape({\n            // STANDARD | STANDARD_PLUS | PREMIUM\n            metallic: PropTypes.string.isRequired,\n            canUpgrade: PropTypes.bool.isRequired,\n            canActivate: PropTypes.bool.isRequired,\n            canBuy: PropTypes.bool.isRequired,\n            quotasExhausted: PropTypes.bool.isRequired,\n            carts: PropTypes.arrayOf(\n                PropTypes.shape({\n                    cartId: PropTypes.number,\n                })\n            ),\n            // Может отсутствовать, если нет вариантов покупки\n            purchase: PropTypes.shape({\n                // В копейках\n                totalPrice: PropTypes.number.isRequired,\n                currency: PropTypes.string,\n                // VPPL с (VP | RENEWAL_VP | VPREM) внутри\n                products: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        code: productCodeType,\n                        count: PropTypes.number,\n                        currency: currencyType,\n                        // Должен быть periodType, но бэк отдаёт так\n                        period: PropTypes.string,\n                        price: PropTypes.number,\n                        pricePerOne: PropTypes.number,\n                        products: PropTypes.shape({\n                            code: productCodeType,\n                            count: PropTypes.number,\n                        }),\n                        profRoleGroup: PropTypes.arrayOf(PropTypes.string),\n                        region: regionIdType,\n                    })\n                ),\n            }),\n        })\n    ),\n    backurl: PropTypes.object,\n    vacancyId: PropTypes.number,\n    employerId: PropTypes.number,\n    upgradeVacancy: PropTypes.func,\n    handleClose: PropTypes.func,\n};\n\nUpgradeVariants.trls = {\n    quotasExhausted: 'vacancy.tools.improve.quotasExhausted',\n    STANDARD_PLUS_IMPROVE: 'vacancy.tools.improve.standard_plus',\n    PREMIUM_IMPROVE: 'vacancy.tools.improve.premium',\n    STANDARD_IMPROVE: 'vacancy.tools.improve.standard',\n    PREMIUM: 'vacancy.tools.improve.premium.benefits',\n    STANDARD_PLUS: 'vacancy.tools.improve.standard_plus.benefits',\n    STANDARD: 'vacancy.tools.improve.standard.benefits',\n    buyFor: 'vacancy.tools.improve.buyFor',\n    buy: 'vacancy.tools.improve.buy',\n    update: 'vacancy.update.yes',\n    activate: 'vacancy.tools.improve.toCarts',\n};\n\nexport const UpgradeVariantsRaw = translation(UpgradeVariants);\n\nexport default connect(\n    ({ vacancyUpgrades }, { vacancyId }) => ({\n        suitableUpgrades: vacancyUpgrades[vacancyId]?.suitableUpgrades,\n        backurl: vacancyUpgrades[vacancyId]?.backurl,\n    }),\n    { createCart, upgradeVacancy }\n)(UpgradeVariantsRaw);\n","import { push } from 'connected-react-router';\n\nimport fetcher from 'lux/modules/fetcher';\nimport showDefaultError from 'lux/requests/notifications/showDefaultError';\n\nimport getUpgradedEditBody from 'lux/requests/vacancyUpgrades/getUpgradedEditBody';\nimport getUpgradedFullVacancy from 'lux/requests/vacancyUpgrades/getUpgradedFullVacancy';\n\nexport default ({ afterVacancyTypeHasBeenChanged, isEdit, params }) =>\n    async (dispatch, getState) => {\n        const { location } = getState().router;\n        let response;\n        try {\n            response = await fetcher.postFormData('/shards/employer/vacancies/upgrade', params);\n            afterVacancyTypeHasBeenChanged?.();\n        } catch (error) {\n            dispatch(showDefaultError(error));\n        }\n        if (location.pathname.match('/vacancy/')) {\n            dispatch(push(`${location.pathname}${response.data.query}`));\n            return;\n        }\n\n        if (isEdit) {\n            dispatch(getUpgradedEditBody(params));\n        } else {\n            dispatch(getUpgradedFullVacancy(params));\n        }\n    };\n","import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from 'bloko/blocks/button';\nimport Gap from 'bloko/blocks/gap';\nimport Modal, { ModalHeader, ModalTitle, ModalContent, ModalFooter } from 'bloko/blocks/modal';\n\nimport { ADD_MODAL, MODAL_UPGRADE } from 'lux/components/VacancyModals/constants';\nimport translation from 'lux/components/translation';\n\nimport BuyClickme from 'lux/components/VacancyModals/UpgradeModal/BuyClickme';\nimport UpgradeVariants from 'lux/components/VacancyModals/UpgradeModal/UpgradeVariants';\n\nconst UpgradeModal = ({\n    afterVacancyTypeHasBeenChanged,\n    handleCloseModal,\n    vacancyId,\n    employerId,\n    isVisible,\n    isEdit,\n    trls,\n    from,\n    dispatchModal,\n    openModal,\n}) => (\n    <Modal visible={isVisible} onClose={handleCloseModal}>\n        <Fragment>\n            <ModalHeader outlined>\n                <ModalTitle>{trls[UpgradeModal.trls.upgradeTitle]}</ModalTitle>\n            </ModalHeader>\n            <ModalContent>\n                <div className=\"vacancy-upgrade-popup-content\" data-qa=\"vacancy-upgrade-menu\">\n                    <p>{trls[UpgradeModal.trls.info]}</p>\n                    <div className=\"vacancy-upgrade__variants\">\n                        <UpgradeVariants\n                            afterVacancyTypeHasBeenChanged={afterVacancyTypeHasBeenChanged}\n                            isEdit={isEdit}\n                            vacancyId={vacancyId}\n                            employerId={employerId}\n                            handleClose={handleCloseModal}\n                        />\n                        <BuyClickme\n                            vacancyId={vacancyId}\n                            handleCloseModal={handleCloseModal}\n                            onClickBack={() =>\n                                dispatchModal\n                                    ? dispatchModal({\n                                          type: ADD_MODAL,\n                                          payload: {\n                                              modalType: MODAL_UPGRADE,\n                                              data: { vacancyId, employerId, from },\n                                          },\n                                      })\n                                    : openModal()\n                            }\n                        />\n                    </div>\n                </div>\n                <Gap top>\n                    <div className=\"vacancy-upgrade-warning\">{trls[UpgradeModal.trls.autoUpdateWarning]}</div>\n                </Gap>\n            </ModalContent>\n            <ModalFooter>\n                <Button onClick={handleCloseModal}>{trls[UpgradeModal.trls.cancel]}</Button>\n            </ModalFooter>\n        </Fragment>\n    </Modal>\n);\n\nUpgradeModal.propTypes = {\n    afterVacancyTypeHasBeenChanged: PropTypes.func,\n    isEdit: PropTypes.bool,\n    handleCloseModal: PropTypes.func,\n    vacancyUpgrades: PropTypes.object,\n    vacancyId: PropTypes.number,\n    employerId: PropTypes.number,\n    isVisible: PropTypes.bool,\n    from: PropTypes.string,\n    dispatchModal: PropTypes.func,\n    openModal: PropTypes.func,\n    trls: PropTypes.object,\n};\n\nUpgradeModal.trls = {\n    info: 'vacancy.update.text',\n    upgradeTitle: 'vacancy.upgrade.popup.title',\n    cancel: 'employer.myVacancyes.move.cancel',\n    autoUpdateWarning: 'vacancy.autoUpdate.notCancel',\n};\n\nexport default translation(UpgradeModal);\n","export const ADD_MODAL = 'addModal';\nexport const CLOSE_MODAL = 'closeModal';\n\nexport const MODAL_VIDEOINTERVIEW = 'video-interview';\nexport const MODAL_PROLONGATE = 'prolongate';\nexport const MODAL_ARCHIVE = 'archive';\nexport const MODAL_UPGRADE = 'upgrade';\nexport const MODAL_TRANSFER = 'transfer';\nexport const MODAL_AUTO_PROLONG = 'auto-prolong';\nexport const MODAL_AUTO_UPDATE = 'auto-update';\nexport const MODAL_AUTO_UPDATE_SUMMARY = 'group-auto-update-summary';\nexport const MODAL_AUTO_UPDATE_WARNING = 'auto-update-warning';\nexport const MODAL_REMOVE_AUTO_UPDATE = 'remove-auto-update';\nexport const MODAL_UPDATES_SCHEDULE = 'update-schedule';\nexport const MODAL_AUTO_PUBLICATION_DISABLE = 'disable-auto-publication';\nexport const MODAL_AUTO_PUBLICATION_PREVIEW = 'preview-auto-publication';\nexport const MODAL_BUY_OPTION = 'buy-vacancy-option';\nexport const MODAL_HIRING_PLAN = 'hiring-plan';\nexport const MODAL_TRANSFER_DRAFTS = 'transfer-drafts';\nexport const MODAL_VACANCY_ADVICE = 'vacancy-advice';\n","export enum MetallicVacancyType {\n    Standard = 'STANDARD',\n    StandardPlus = 'STANDARD_PLUS',\n    Premium = 'PREMIUM',\n    Free = 'FREE',\n    StandardAnonymous = 'STANDARD_ANONYMOUS',\n    StandardPlusAnonymous = 'STANDARD_PLUS_ANONYMOUS',\n    PremiumAnonymous = 'PREMIUM_ANONYMOUS',\n    StandardAdvertising = 'STANDARD_ADVERTISING',\n    PremiumAdvertising = 'PREMIUM_ADVERTISING',\n}\n\nexport enum MetallicVacancyTypeLower {\n    Standard = 'standard',\n    StandardPlus = 'standard_plus',\n    Premium = 'premium',\n    Free = 'free',\n    StandardAnonymous = 'standard_anonymous',\n    StandardPlusAnonymous = 'standard_plus_anonymous',\n    PremiumAnonymous = 'premium_anonymous',\n    StandardAdvertising = 'standard_advertising',\n    PremiumAdvertising = 'premium_advertising',\n}\n\nexport const ANONYMOUS_TYPES = [\n    MetallicVacancyType.StandardAnonymous,\n    MetallicVacancyType.StandardPlusAnonymous,\n    MetallicVacancyType.PremiumAnonymous,\n];\nexport const ADVERTISING_TYPES = [MetallicVacancyType.StandardAdvertising, MetallicVacancyType.PremiumAdvertising];\n\nexport default MetallicVacancyType;\n","import { setClickmeAutoCampaignInfo } from 'lux/models/clickmeAutoCampaign';\nimport {\n    fetchVacancyUpgradesStart,\n    fetchVacancyUpgradesSuccess,\n    fetchVacancyUpgradesFailed,\n} from 'lux/models/employerVacancies/vacancyUpgrades';\nimport fetcher from 'lux/modules/fetcher';\n\nexport default ({ params: { employerId, vacancyId } }) =>\n    async (dispatch) => {\n        dispatch(fetchVacancyUpgradesStart(vacancyId));\n\n        try {\n            const { backurl, suitableUpgrades, clickmeInfo } = await fetcher.get(\n                '/shards/employer/vacancies/suitableUpgrades',\n                {\n                    params: {\n                        employerId,\n                        vacancyId,\n                    },\n                }\n            );\n\n            dispatch(fetchVacancyUpgradesSuccess({ id: vacancyId, data: { backurl, suitableUpgrades } }));\n\n            if (clickmeInfo) {\n                dispatch(setClickmeAutoCampaignInfo(clickmeInfo));\n            }\n        } catch (err) {\n            dispatch(fetchVacancyUpgradesFailed(vacancyId));\n\n            throw err;\n        }\n    };\n"],"names":["putScript","context","remote","onerror","onload","props","node","document","createElement","Object","entries","forEach","prop","value","addEventListener","src","dataset","webpack","appendChild","getRemoteWebpackModuleLink","window","getExistingRemote","querySelector","loadingRemoteEntry","loggingPlaces","getRemoteModule","async","url","container","shareScope","remoteFallbackUrl","loadEntry","Promise","resolve","existingRemote","__webpack_init_sharing__","linkToRemoteWebpackModule","inited","init","__webpack_share_scopes__","onError","remoteScriptResource","PerformanceObserver","supportedEntryTypes","includes","performance","getEntriesByType","filter","entry","name","remoteScriptResourceDuration","reduce","prev","item","duration","StatsSender","globalVars","sendMetrics","report","then","type","crossOrigin","getOrLoadRemote","error","Module","get","classList","hasDefault","moduleValue","default","toString","length","getAndLoadARemoteApp","globalServiceName","identifier","initApp","globalServiceVars","hasSupportToDestroyApp","unmountApp","STATE_LOADERS_MAPPING","userNotifications","dispatch","addUserNotifications","place","serviceInfo","isFullPage","undefined","loadService","add","data","isSuccessSSR","renderResult","remoteServiceName","inlineScript","innerHTML","remoteEntry","ssrRenderNode","styles","href","promise","keys","putLink","rel","scripts","notLoadedScript","useSSRResult","fetcher","headers","pageName","analyticsParams","hhtmSource","build","params","console","noContent","getStore","deleteMicroFrontend","store","storeFieldName","proxiedState","loader","processProxiedState","TrlKeys","Advantages","trls","Fragment","base","className","translation","Banner","campaignData","switchToEditingState","isEdit","BannerContent","title","CampaignDataField","text","IconLink","onClick","view","IconView","scale","IconScale","initial","IconColor","Control","Element","openDashboard","hhtmFromLabel","CampaignState","getClickmeLink","target","disableVisited","Form","campaignErrors","setCampaignData","setCampaignErrors","errorTitle","errorText","setCampaignField","fieldName","newCampaignErrors","strong","FormItem","onChange","invalid","FormError","show","FormErrorHint","content","contentLimit","LimitBannerContent","event","Price","product","size","TextSize","FormatMoney","currency","inCents","price","SourceCode","Sources","initClickmeInfo","useSelector","state","clickmeAutoCampaign","clickmeUpgrades","map","sourceCode","purchase","products","currentSourceCode","checked","importance","TextImportance","ClickmeUrl","start","created","createdButPaymentRequired","alreadyCreated","save","pay","fill","goClickme","goBanner","back","ClickmeAutoCampaignModal","isVisible","onClickBack","useDispatch","campaignState","setCampaignState","useState","INIT_STATE_CAMPAIGN_DATA","showDefaultError","setDefaultError","resetDefaultError","useOnOffState","find","sources","SOURCES_CONFIG","useEffect","startCampaign","useCallback","isOnlyValidation","currentState","vacancyId","response","clickNext","buttonName","ANALYTICS_PARAMS","next","join","Validate","Create","mapOutgoingSourceConfig","budget","count","errors","validationErrors","formSubmit","formName","form","JSON","stringify","onClose","setClickmeAutoCampaignConfig","BLOCK_CONTENT","clickEdit","footer","kind","ButtonKind","appearance","ButtonAppearance","clickBack","openCart","createCart","source","visible","clickClose","ModalHeader","ModalTitle","ModalContent","ModalError","ModalFooter","alignmentLeft","id","ContainerForMicroFrontend","preloadContent","LoadingScale","containerRef","useRef","classNameForJS","useContext","CodeInjectorContext","getClassName","current","dangerouslySetInnerHTML","__html","app","loadProxyService","appModule","globalServiceNameValue","setTimeout","isSupportDestroy","ref","ContainerForMicroFrontendWrapper","microFrontends","keyComponent","setKeyComponent","previousServiceInfoRef","Date","now","memo","TYPE_CLICKME","BuyClickme","handleCloseModal","upgrades","onClickmeClick","showPopup","vacancyUpgradeButtonClick","currentUpgrade","isAlreadyCreated","vacancyUpgradeElementShownRaw","promo","clickme","format","promotionClickme","NumberFormatter","String","decimalLength","groupSeparator","NON_BREAKING_SPACE","runClickme","propTypes","PropTypes","regionIdType","currencyType","productCodeType","code","period","profRoleGroup","region","vacancyFeaturesAction","makeSetStoreField","VARIANT_UPGRADE","VARIANT_ACTIVATE","getCartUrl","carts","finishUrl","urlParser","cartId","backurl","UpgradeVariants","afterVacancyTypeHasBeenChanged","suitableUpgrades","upgradeVacancy","employerId","handleClose","suitableUpgrade","canUpgrade","canActivate","quotasExhausted","metallic","renderButton","sendAnalytics","catch","update","renderUpgradeButton","Link","to","activate","renderActivateButton","buy","totalPrice","formatToReactComponent","buyFor","renderBuyButton","canBuy","pricePerOne","STANDARD_PLUS_IMPROVE","PREMIUM_IMPROVE","STANDARD_IMPROVE","PREMIUM","STANDARD_PLUS","STANDARD","UpgradeVariantsRaw","connect","vacancyUpgrades","getState","location","router","pathname","match","push","query","employerManagerId","vacancyCreateDefaultBody","upgradedInfo","err","vacancyFeatures","vacancyUpdateInitialBodyAction","vacancyCreateInitialBody","getUpgradedEditBody","vacancy","clearUpgradeInfo","upgradeManagerVacancy","addNotification","VACANCY_UPGRADE_SUCCESS","getUpgradedFullVacancy","UpgradeModal","from","dispatchModal","openModal","outlined","upgradeTitle","info","ADD_MODAL","payload","modalType","MODAL_UPGRADE","top","autoUpdateWarning","cancel","CLOSE_MODAL","MODAL_VIDEOINTERVIEW","MODAL_PROLONGATE","MODAL_ARCHIVE","MODAL_TRANSFER","MODAL_AUTO_PROLONG","MODAL_AUTO_UPDATE","MODAL_AUTO_UPDATE_SUMMARY","MODAL_AUTO_UPDATE_WARNING","MODAL_REMOVE_AUTO_UPDATE","MODAL_UPDATES_SCHEDULE","MODAL_AUTO_PUBLICATION_DISABLE","MODAL_AUTO_PUBLICATION_PREVIEW","MODAL_BUY_OPTION","MODAL_HIRING_PLAN","MODAL_TRANSFER_DRAFTS","MODAL_VACANCY_ADVICE","MetallicVacancyType","MetallicVacancyTypeLower","StandardAnonymous","StandardPlusAnonymous","PremiumAnonymous","StandardAdvertising","PremiumAdvertising","fetchVacancyUpgradesStart","clickmeInfo","fetchVacancyUpgradesSuccess","setClickmeAutoCampaignInfo","fetchVacancyUpgradesFailed"],"sourceRoot":""}