{"version":3,"file":"EmployersList.dc1c347e839796ebee25.js","mappings":"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","sources":["xhh/./webapp-static/js/HH/LoadBannerOnVisibleModule.js","xhh/./webapp-static/js/HHC/areaId.ts","xhh/./webapp-static/js/Utils/VisibilityWatcher.js","xhh/./webapp-static/lux/components/ApplicantSideBar/index.jsx","xhh/./webapp-static/lux/components/Banner/index.tsx","xhh/./webapp-static/lux/components/Banner/AdsExternalBanner.tsx","xhh/./webapp-static/lux/components/Banner/BannerPropType.ts","xhh/./webapp-static/lux/components/Clickme/Wrapper.jsx","xhh/./webapp-static/lux/components/Clickme/List.jsx","xhh/./webapp-static/lux/components/Clickme/ReferralLink.jsx","xhh/./webapp-static/lux/components/Banner/BannersGroup.jsx","xhh/./webapp-static/lux/components/Clickme/index.jsx","xhh/./webapp-static/lux/components/Employer/OrganizationForm/index.tsx","xhh/./webapp-static/lux/hooks/useAreasDataProvider.ts","xhh/./webapp-static/lux/hooks/useFetchAreaTree.ts","webpack://xhh/./webapp-static/lux/pages/EmployersList/components/alphabet.less?bec7","xhh/./webapp-static/lux/pages/EmployersList/components/Alphabet.tsx","webpack://xhh/./webapp-static/lux/pages/EmployersList/components/companies.less?1f9b","xhh/./webapp-static/lux/pages/EmployersList/components/Companies.tsx","xhh/./webapp-static/lux/pages/EmployersList/components/EmployerRegistrationButton.tsx","webpack://xhh/./webapp-static/lux/pages/EmployersList/components/filters.less?13dc","xhh/./webapp-static/lux/pages/EmployersList/components/AreaSelection.tsx","xhh/./webapp-static/lux/pages/EmployersList/components/Filters.tsx","xhh/./webapp-static/lux/pages/EmployersList/EmployersList.route.tsx"],"sourcesContent":["import Banners from 'HHC/Banners';\nimport visibilityWatcher from 'Utils/VisibilityWatcher';\n/**\n * Подгружает баннер в ноду компонента, при видимости этой ноды.\n *\n * @param {String|Number}   id              ID баннера\n * @param {Array}           ids             ID баннеров, имеет приоритет перед id\n * @param {String}          [templateName]  Имя шаблона для баннера, если имя шаблона не указано, то баннер будет\n *                                          добавлен в текущую ноду без применения шаблонов\n *\n * @name HH/LoadBannerOnVisibleModule\n * @constructor\n */\nexport default (element, params) => {\n    window.requestIdleCallback(() => {\n        visibilityWatcher.init({\n            element,\n            onVisible() {\n                const { ids, id, templateName, adfoxParams } = params;\n                let banners = [id];\n                if (ids) {\n                    banners = ids;\n                }\n                Banners.create(element, banners, templateName, adfoxParams);\n            },\n        });\n    });\n};\n","export default {\n    Russia: '113',\n    RootArea: '0',\n};\n","/**\n * Утилита следит за видимостью элемента на странице, и запускает калбеки при изменении состояния. <br>\n *\n * @type {Object}\n * @exports Utils/VisibilityWatcher\n */\nconst visibilityWatcher = {\n    /**\n     * Инициализирует вотчер на элементе.\n     *\n     * @param {Object}   options\n     * @param {Element}  options.element   DOM элемент за которым наблюдаем\n     * @param {Function} options.onVisible Функция, которая будет вызвана, когда элемент отобразится\n     *\n     * @member\n     * @method\n     */\n    init(options) {\n        let visible = false;\n        const element = options.element;\n        const checkVisible = () => {\n            if (visible) {\n                return;\n            }\n            if (element.offsetWidth || element.offsetHeight || element.getClientRects().length) {\n                visible = true;\n                options.onVisible();\n                window.removeEventListener('resize', checkVisible);\n                window.removeEventListener('element-displayed', checkVisible);\n                element.dataset.listenersSetted = 'false';\n            } else {\n                visible = false;\n            }\n        };\n        if (options.element.dataset.listenersSetted !== 'true') {\n            window.addEventListener('resize', checkVisible);\n            window.addEventListener('element-displayed', checkVisible);\n            options.element.dataset.listenersSetted = 'true';\n        }\n        checkVisible();\n    },\n};\nexport default visibilityWatcher;\n","import Column from 'bloko/blocks/column';\n\nimport AdsExternalBanner from 'lux/components/Banner/AdsExternalBanner';\nimport ClickmeList from 'lux/components/Clickme/List';\nimport ClickmeReferralLink from 'lux/components/Clickme/ReferralLink';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst ApplicantSideBar = () => {\n    const rightBanners = useSelector(({ banners }) => banners[`right-column`]);\n    return (\n        <>\n            <Column xs=\"4\" m=\"4\" l=\"5\">\n                {rightBanners && rightBanners.map((banner) => <AdsExternalBanner key={banner.id} {...banner} />)}\n            </Column>\n            <ClickmeList\n                clickmeReferralLink={\n                    <Column xs=\"4\" m=\"4\" l=\"5\">\n                        <ClickmeReferralLink />\n                    </Column>\n                }\n            />\n        </>\n    );\n};\n\nexport default ApplicantSideBar;\n","import { Component, ReactNode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect, DefaultRootState } from 'react-redux';\n\nimport LoadBannerOnVisibleSignature from 'HH/LoadBannerOnVisibleModule.d';\nimport { YandexAdfoxBannerProps } from 'lux/models/banners/YandexAdfoxBanner.types';\nimport { UserTargeting } from 'lux/models/userTargeting';\n\nlet loadBannerOnVisible: typeof LoadBannerOnVisibleSignature | undefined;\n\nif (!process.env.LUX_SERVER) {\n    /* eslint @typescript-eslint/no-var-requires: \"off\" */\n    /* eslint @typescript-eslint/no-unsafe-member-access: \"off\" */\n    loadBannerOnVisible = require('HH/LoadBannerOnVisibleModule').default as typeof LoadBannerOnVisibleSignature;\n}\n\ninterface BannerProps {\n    /** Индификатор баннера */\n    id: string;\n    /** Название шаблона для баннера */\n    templateName?: string;\n    /** Нода в которую кладется баннер */\n    children?: ReactNode;\n    /** Флаг отмены отправки запросов в баннерную систему */\n    cancelFetchBanners?: boolean;\n    /** Строка текущих get параметров URL */\n    search?: string;\n    /** Строка текущего URL без параметров */\n    pathname?: string;\n    /** Параметры для Yandex adfox баннеров */\n    adfoxParams?: Omit<YandexAdfoxBannerProps, 'id'>;\n    /** Строит пустой див вместо баннера **/\n    isEmpty?: boolean;\n    userTargeting?: UserTargeting;\n}\n\nclass Banner extends Component<BannerProps> {\n    element: HTMLElement | null = null;\n    static defaultProps = {\n        templateName: 'HHC-Banners-Place-Template',\n    };\n\n    componentDidMount() {\n        this.element = this.props.isEmpty ? null : (ReactDOM.findDOMNode(this) as HTMLElement);\n        if (this.element) {\n            this.element.addEventListener('HH-Banners-Init', this.setAutoHeight.bind(this));\n            this.initBanners();\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.element) {\n            this.initBanners();\n        }\n    }\n\n    componentWillUnmount() {\n        this.element?.removeEventListener('HH-Banners-Init', this.setAutoHeight);\n    }\n\n    shouldComponentUpdate(nextProps: BannerProps) {\n        if (nextProps.cancelFetchBanners) {\n            return false;\n        }\n        return nextProps.search !== this.props.search || nextProps.pathname !== this.props.pathname;\n    }\n\n    initBanners() {\n        const { id, templateName, adfoxParams, userTargeting } = this.props;\n        if (this.element) {\n            this.element.style.height = `${this.element.clientHeight}px`;\n            this.element.innerHTML = '';\n        }\n        let adfoxParamsProperty;\n        if (adfoxParams) {\n            adfoxParamsProperty = {\n                ...adfoxParams,\n                type: 'adfox',\n                bannerId: id,\n                place: id,\n                bannerCommonTargeting: userTargeting,\n                bannerAdTargeting: adfoxParams.bannerAdTargeting || {},\n            };\n        }\n        const bannerParams = {\n            id,\n            templateName,\n            adfoxParams: adfoxParamsProperty,\n        };\n\n        loadBannerOnVisible?.(this.element, bannerParams);\n    }\n\n    setAutoHeight = (): void => {\n        if (this.element) {\n            this.element.style.height = 'auto';\n        }\n    };\n\n    render() {\n        return this.props.children || <div />;\n    }\n}\n\nexport default connect((state: DefaultRootState) => ({\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    cancelFetchBanners: state.cancelFetchBanners,\n    userTargeting: state.userTargeting,\n}))(Banner);\n","import type { FC } from 'react';\n\nimport { isExternalBannersRestricted } from 'HHC/Banners';\nimport { useIsBelarus } from 'lux/hooks/useCountries';\nimport { AdsExternalBannerProps } from 'lux/models/banners/AdsExternalBanner.types';\n\nimport Banner from 'lux/components/Banner';\n\nconst AdsExternalBanner: FC<AdsExternalBannerProps> = ({ id, cId, pp, p2, ...adfoxParams }) => {\n    const enableAdfox = pp && p2;\n    const shouldHideExternalBanners = isExternalBannersRestricted(useIsBelarus());\n\n    if (!enableAdfox || shouldHideExternalBanners) {\n        return <Banner key={cId} id={id} isEmpty={shouldHideExternalBanners} />;\n    }\n\n    return (\n        <Banner\n            key={cId}\n            id={id}\n            templateName=\"\"\n            adfoxParams={{\n                pp,\n                p2,\n                cId,\n                ...adfoxParams,\n            }}\n        >\n            <div\n                id={cId}\n                className={`HHC-Banner-${id} HH-Banner-Adfox banner-place banner-place_${id} banner-place-adfox banner-place-adfox_${id}`}\n                data-banner-id={id}\n                data-empty-class=\"banner-place_hide\"\n                data-loaded-class=\"banner-place_show\"\n            />\n        </Banner>\n    );\n};\n\nexport default AdsExternalBanner;\n","import PropTypes from 'prop-types';\n\nexport default PropTypes.shape({\n    id: PropTypes.string,\n});\n","import PropTypes from 'prop-types';\n\nconst Wrapper = ({ children }) => (\n    <div className=\"HHC-Banner-Wrapper clickme\" data-loaded-class=\"clickme_loaded\">\n        {children}\n    </div>\n);\n\nWrapper.propTypes = {\n    children: PropTypes.node,\n};\n\nexport default Wrapper;\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Column from 'bloko/blocks/column';\nimport Gap from 'bloko/blocks/gap';\n\nimport bannerPropType from 'lux/components/Banner/BannerPropType';\n\nimport Clickme from 'lux/components/Clickme';\nimport ClickmeWrapper from 'lux/components/Clickme/Wrapper';\n\nconst HIDE_ON_XS_SCREEN_POSITION = new Set([1, 2]);\nconst HIDE_ON_S_SCREEN_POSITION = 2;\n\nconst List = ({ banners, clickmeReferralLink }) => {\n    if (!banners || banners.length === 0) {\n        return null;\n    }\n    return (\n        <ClickmeWrapper>\n            <Gap bottom>\n                {clickmeReferralLink}\n                <Clickme banners={banners}>\n                    {banners.map(({ id }, index) => (\n                        <Column\n                            key={id}\n                            xs={HIDE_ON_XS_SCREEN_POSITION.has(index) ? '0' : '4'}\n                            s={index === HIDE_ON_S_SCREEN_POSITION ? '0' : '4'}\n                            m=\"4\"\n                            l=\"5\"\n                        >\n                            <div className=\"HHC-Group-Banners-Place\" data-banner-id={id} />\n                        </Column>\n                    ))}\n                </Clickme>\n            </Gap>\n        </ClickmeWrapper>\n    );\n};\n\nList.propTypes = {\n    banners: PropTypes.arrayOf(bannerPropType),\n    clickmeReferralLink: PropTypes.node,\n};\n\nexport default connect(\n    (state) => ({ banners: state.banners }),\n    undefined,\n    (stateProps, dispatchProps, ownProps) => ({\n        banners: stateProps.banners['right-column-clickme'],\n        ...ownProps,\n        ...dispatchProps,\n    })\n)(List);\n","import PropTypes from 'prop-types';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Text, { TextSize } from 'bloko/blocks/text';\n\nimport translation from 'lux/components/translation';\n\nconst ReferralLink = ({ trls }) => (\n    <div className=\"clickme__link-wrapper\">\n        <Link\n            to=\"https://clickme.hh.ru/new/dashboard?utm_source=block_referral\"\n            rel=\"noopener noreferrer\"\n            className=\"clickme__link\"\n            target=\"_blank\"\n        >\n            <Text size={TextSize.Small}>{trls[ReferralLink.trls.link]}</Text>\n        </Link>\n    </div>\n);\n\nReferralLink.trls = {\n    link: 'clickme.adv.here',\n};\n\nReferralLink.propTypes = {\n    trls: PropTypes.object,\n};\n\nexport default translation(ReferralLink);\n","import { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nlet loadBannerOnVisible = () => {};\n\nif (!process.env.LUX_SERVER) {\n    loadBannerOnVisible = require('HH/LoadBannerOnVisibleModule').default;\n}\n\nclass BannersGroup extends Component {\n    static propTypes = {\n        /** Индификаторы баннеров */\n        banners: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.string })),\n        /** Название шаблона для баннеров */\n        templateName: PropTypes.string,\n        /** Нода в которую кладется баннер */\n        children: PropTypes.node,\n        /** Класс для групповой банерной ноды */\n        groupClassNames: PropTypes.string,\n    };\n\n    static defaultProps = {\n        templateName: 'HHC-Banners-Place-Template',\n        groupClassNames: '',\n    };\n\n    componentDidMount() {\n        this.element = ReactDOM.findDOMNode(this);\n        this.initBanners();\n    }\n\n    initBanners() {\n        const { banners, templateName } = this.props;\n        const bannerParams = {\n            ids: banners.map(({ id }) => id),\n            templateName,\n        };\n        loadBannerOnVisible(this.element, bannerParams);\n    }\n\n    render() {\n        const { groupClassNames, children } = this.props;\n        return <div className={groupClassNames}>{children}</div>;\n    }\n}\n\nexport default BannersGroup;\n","import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport BannersGroup from 'lux/components/Banner/BannersGroup';\n\nimport ClickmeReferralLink from 'lux/components/Clickme/ReferralLink';\n\nconst Clickme = ({ banners, showReferralLink, children, groupClassNames }) => (\n    <Fragment>\n        {showReferralLink && <ClickmeReferralLink />}\n        <BannersGroup banners={banners} groupClassNames={groupClassNames}>\n            {children}\n        </BannersGroup>\n    </Fragment>\n);\n\nClickme.defaultProps = {\n    showReferralLink: false,\n    groupClassNames: '',\n};\n\nClickme.propTypes = {\n    banners: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.string })),\n    showReferralLink: PropTypes.bool,\n    children: PropTypes.node,\n    groupClassNames: PropTypes.string,\n};\n\nexport default Clickme;\n","import React from 'react';\n\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport isValidKey from 'bloko/common/isValidKey';\n\nimport translation from 'lux/components/translation';\nimport { NON_BREAKING_SPACE } from 'lux/modules/symbols';\n\ninterface OrganizationFormProps {\n    /** ID организационной формы (ИП, ООО...) */\n    organizationFormId: number | null;\n    useSuffix?: boolean;\n}\n\nconst TrlKeys = {\n    'organization.form.0': 'organization.form.0',\n    'organization.form.1': 'organization.form.1',\n    'organization.form.2': 'organization.form.2',\n    'organization.form.3': 'organization.form.3',\n    'organization.form.4': 'organization.form.4',\n    'organization.form.5': 'organization.form.5',\n    'organization.form.6': 'organization.form.6',\n    'organization.form.7': 'organization.form.7',\n    'organization.form.8': 'organization.form.8',\n    'organization.form.9': 'organization.form.9',\n    'organization.form.10': 'organization.form.10',\n    'organization.form.11': 'organization.form.11',\n    'organization.form.12': 'organization.form.12',\n    'organization.form.13': 'organization.form.13',\n    'organization.form.14': 'organization.form.14',\n    'organization.form.15': 'organization.form.15',\n    'organization.form.16': 'organization.form.16',\n    'organization.form.17': 'organization.form.17',\n    'organization.form.18': 'organization.form.18',\n    'organization.form.19': 'organization.form.19',\n    'organization.form.20': 'organization.form.20',\n    'organization.form.21': 'organization.form.21',\n    'organization.form.22': 'organization.form.22',\n    'organization.form.23': 'organization.form.23',\n    'organization.form.24': 'organization.form.24',\n    'organization.form.25': 'organization.form.25',\n    'organization.form.26': 'organization.form.26',\n    'organization.form.27': 'organization.form.27',\n    'organization.form.28': 'organization.form.28',\n    'organization.form.29': 'organization.form.29',\n    'organization.form.30': 'organization.form.30',\n    'organization.form.31': 'organization.form.31',\n    'organization.form.32': 'organization.form.32',\n    'organization.form.33': 'organization.form.33',\n    'organization.form.34': 'organization.form.34',\n    'organization.form.35': 'organization.form.35',\n    'organization.form.36': 'organization.form.36',\n    'organization.form.37': 'organization.form.37',\n    'organization.form.38': 'organization.form.38',\n    'organization.form.39': 'organization.form.39',\n    'organization.form.40': 'organization.form.40',\n    'organization.form.41': 'organization.form.41',\n    'organization.form.42': 'organization.form.42',\n    'organization.form.43': 'organization.form.43',\n    'organization.form.44': 'organization.form.44',\n    'organization.form.45': 'organization.form.45',\n    'organization.form.46': 'organization.form.46',\n    'organization.form.47': 'organization.form.47',\n    'organization.form.48': 'organization.form.48',\n    'organization.form.49': 'organization.form.49',\n    'organization.form.50': 'organization.form.50',\n    'organization.form.51': 'organization.form.51',\n    'organization.form.52': 'organization.form.52',\n    'organization.form.53': 'organization.form.53',\n    'organization.form.54': 'organization.form.54',\n    'organization.form.55': 'organization.form.55',\n    'organization.form.56': 'organization.form.56',\n    'organization.form.57': 'organization.form.57',\n    'organization.form.58': 'organization.form.58',\n    'organization.form.59': 'organization.form.59',\n    'organization.form.60': 'organization.form.60',\n};\n\nconst OrganizationForm: TranslatedComponent<OrganizationFormProps> = ({\n    trls,\n    organizationFormId = null,\n    useSuffix = true,\n}) => {\n    if (organizationFormId === null) {\n        return null;\n    }\n    const organizationFormKey = `organization.form.${organizationFormId}`;\n    if (isValidKey(TrlKeys, organizationFormKey)) {\n        const organizationForm = TrlKeys[organizationFormKey];\n        return <>{`${trls[organizationForm]}${(useSuffix && NON_BREAKING_SPACE) || ''}`}</>;\n    }\n    return null;\n};\n\nexport default translation(OrganizationForm);\n","import { useMemo } from 'react';\n\nimport createRemoteDataProvider from 'bloko/blocks/suggest/createRemoteDataProvider';\nimport { DataProvider } from 'bloko/blocks/suggest/types';\n\nimport AreaId from 'HHC/areaId';\nimport { updateUrl } from 'Modules/url';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport { useIsZarplataPlatform } from 'lux/hooks/usePlatform';\n\nconst WILDCARD = '%QUERY%';\nconst REMOTE = `/autosuggest/multiprefix/v2`;\n\nconst useAreasDataProvider = (allowRegions: boolean, rootAreaId: string | null = null): DataProvider => {\n    const lang = useSelector((state) => state.langs[0]);\n    const isZarplata = useIsZarplataPlatform();\n    const filter = isZarplata ? AreaId.Russia : rootAreaId;\n\n    const remoteUrl = updateUrl(REMOTE, {\n        d: allowRegions ? `areas_${lang}` : `area_leafs_${lang}`,\n        f: filter,\n    });\n\n    return useMemo(() => createRemoteDataProvider(`${remoteUrl}&q=${WILDCARD}`, WILDCARD), [remoteUrl]);\n};\n\nexport default useAreasDataProvider;\n","import { useContext, useEffect, useMemo, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { makeSetStoreField } from '@hh.ru/redux-create-reducer';\nimport { TranslationLangContext } from 'bloko/common/hooks/useTranslations';\nimport { ModelData, AdditionalDefault } from 'bloko/common/tree/types';\n\nimport AreaId from 'HHC/areaId';\nimport { UserType } from 'lux/models/userType';\nimport fetcher from 'lux/modules/fetcher';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport { useIsHrZarplataDomain } from 'lux/hooks/useIsHrZarplataDomain';\nimport { useIsZarplataPlatform } from 'lux/hooks/usePlatform';\n\nconst AREA_URL = '/shards/regions_tree';\n\ndeclare global {\n    interface FetcherGetApi {\n        [AREA_URL]: {\n            queryParams: {\n                lang: string;\n                site: string;\n                rootAreaId: string | null;\n                needSorting?: boolean;\n            };\n            response: { items: ModelData<AdditionalDefault>[] };\n        };\n    }\n}\n\nconst areaTreeAction = makeSetStoreField('areaTree');\n\ntype TreeCacheType = Record<string, ModelData<AdditionalDefault>[]>;\n\ninterface UseFetchAreaTree {\n    queryParams?: Partial<Pick<FetcherGetApi[typeof AREA_URL]['queryParams'], 'rootAreaId' | 'needSorting'>>;\n    disableFetching?: boolean;\n}\n\nexport default function useFetchAreaTree(args: UseFetchAreaTree = {}): void {\n    const isHrZarplataRu = useIsHrZarplataDomain();\n    const isZarplataPlatform = useIsZarplataPlatform();\n    const userType = useSelector(({ userType }) => userType);\n    const isEmployer = UserType.Employer === userType;\n\n    const areaTreeCache = useRef<TreeCacheType>({});\n    const dispatch = useDispatch();\n    const lang = useContext(TranslationLangContext);\n    const isRussianAreaRequest = isHrZarplataRu || (isZarplataPlatform && isEmployer);\n\n    const queryParams = useMemo(\n        () => ({\n            rootAreaId: args.queryParams?.rootAreaId || isRussianAreaRequest ? AreaId.RootArea : null,\n            ...args.queryParams,\n        }),\n        [args.queryParams, isRussianAreaRequest]\n    );\n    const disableFetching = args.disableFetching || false;\n\n    useEffect(() => {\n        if (disableFetching) {\n            return;\n        }\n\n        const cacheKey = `${lang}${queryParams.rootAreaId || ''}`;\n\n        if (!(cacheKey in areaTreeCache.current)) {\n            areaTreeCache.current[cacheKey] = [];\n\n            fetcher\n                .get(AREA_URL, {\n                    params: {\n                        ...queryParams,\n                        lang,\n                        site: window.globalVars.siteId,\n                    },\n                })\n                .then((areaTree) => {\n                    areaTreeCache.current[cacheKey] = areaTree.items;\n                    dispatch(areaTreeAction(areaTree.items));\n                })\n                .catch(() => {\n                    delete areaTreeCache.current[cacheKey];\n                });\n        } else {\n            dispatch(areaTreeAction(areaTreeCache.current[cacheKey]));\n        }\n    }, [lang, disableFetching, queryParams, dispatch]);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"list--yxUDK8BJ9Nj4C7TeRZ01\",\"item\":\"item--NshyTF7HlN2FrnBceyYT\"};","import { memo } from 'react';\n\nimport Link from 'bloko/blocks/link';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport urlParser from 'bloko/common/urlParser';\n\nimport translation from 'lux/components/translation';\nimport useUrl from 'lux/hooks/useUrl';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport styles from './alphabet.less';\n\nconst RUS_ALLOWED_LETTERS = 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЭЮЯ';\nconst ENG_ALLOWER_LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nfunction getLetterUrl(url: string, letter: string) {\n    const parsedUrl = urlParser(url);\n    parsedUrl.params.letter = letter;\n    delete parsedUrl.params.page;\n    return parsedUrl.href;\n}\n\nconst TrlKeys = {\n    numerics: 'employersList.find.by.employer.name.numerics',\n    all: 'employersList.find.by.employer.name.all',\n};\n\nconst Alphabet: TranslatedComponent = ({ trls }) => {\n    const { letter: queryLetter } = useSelector(({ router }) => router.location.query);\n    const url = useUrl();\n\n    const renderLetter = (letter: string, text?: string) => (\n        <li className={styles.item} key={letter}>\n            {letter === decodeURIComponent(queryLetter || '') ? (\n                <strong data-qa=\"alfabeta-list-strong\">{text || letter}</strong>\n            ) : (\n                <Link data-qa={`alfabeta-list-link-${text || letter}`} disableVisited href={getLetterUrl(url, letter)}>\n                    {text || letter}\n                </Link>\n            )}\n        </li>\n    );\n\n    return (\n        <div>\n            <ul className={styles.list}>{RUS_ALLOWED_LETTERS.split('').map((letter) => renderLetter(letter))}</ul>\n            <ul className={styles.list}>{ENG_ALLOWER_LETTERS.split('').map((letter) => renderLetter(letter))}</ul>\n            <ul>\n                {renderLetter('#', trls[TrlKeys.numerics])}\n                {renderLetter('', trls[TrlKeys.all])}\n            </ul>\n        </div>\n    );\n};\n\nexport default memo(translation(Alphabet));\n","// extracted by mini-css-extract-plugin\nexport default {\"totals\":\"totals--rE1moq2jhLukW5QVcI6L\",\"companiesContainer\":\"companies-container--mCaynEZ2On5c543KBEqT\",\"cell\":\"cell--vxNBrAA_x7Y2YDDkFPFn\",\"item\":\"item--M8c5L2cxia1xqTMmWUFN\"};","import { useMemo } from 'react';\n\nimport ConversionNumber from 'bloko/blocks/conversion';\nimport Gap from 'bloko/blocks/gap';\nimport Link from 'bloko/blocks/link';\nimport Text from 'bloko/blocks/text';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport OrganizationForm from 'lux/components/Employer/OrganizationForm';\nimport Pagination from 'lux/components/Pagination';\nimport translation from 'lux/components/translation';\nimport { Employer } from 'lux/models/employersList';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport styles from './companies.less';\n\nconst TrlKeys = {\n    employersOne: 'main.counter.employers.one',\n    employersSome: 'main.counter.employers.some',\n    employersMany: 'main.counter.employers.many',\n    companyOne: 'search.company.found.one',\n    companyMany: 'search.company.found.many',\n};\n\nconst MAX_COMPANIES_PER_LIST = 34;\n\nconst Companies: TranslatedComponent = ({ trls }) => {\n    const { employers, totalEmployersFound, paging } = useSelector((state) => state.employersList);\n\n    const separatedEmployers = useMemo(() => {\n        if (!employers.length) {\n            return [];\n        }\n        const memo: Employer[][] = [[employers[0]]];\n        let listIndex = 0;\n\n        for (let i = 1; i < employers.length; i++) {\n            const employer = employers[i];\n            if (i % MAX_COMPANIES_PER_LIST === 0) {\n                listIndex += 1;\n                memo[listIndex] = [];\n            }\n            memo[listIndex].push(employer);\n        }\n\n        return memo;\n    }, [employers]);\n\n    return (\n        <>\n            <div className={styles.totals}>\n                <Text Element=\"span\" strong>\n                    {totalEmployersFound}{' '}\n                </Text>\n                <Text Element=\"span\">\n                    <ConversionNumber\n                        value={totalEmployersFound}\n                        hasValue={false}\n                        one={trls[TrlKeys.employersOne]}\n                        some={trls[TrlKeys.employersSome]}\n                        many={trls[TrlKeys.employersMany]}\n                        zero={trls[TrlKeys.employersMany]}\n                    />{' '}\n                </Text>\n                <Text Element=\"span\">\n                    <ConversionNumber\n                        value={totalEmployersFound}\n                        hasValue={false}\n                        one={trls[TrlKeys.companyOne]}\n                        some={trls[TrlKeys.companyMany]}\n                        many={trls[TrlKeys.companyMany]}\n                        zero={trls[TrlKeys.companyMany]}\n                    />\n                </Text>\n            </div>\n            {employers.length > 0 ? (\n                <>\n                    <table className={styles.companiesContainer}>\n                        <tbody>\n                            <tr>\n                                {separatedEmployers.map((employers, index) => (\n                                    <td data-qa=\"employers-list-company-list\" key={index} className={styles.cell}>\n                                        {employers.map(({ id, name, organizationFormId, vacanciesOpen }) => (\n                                            <div key={id} className={styles.item}>\n                                                <Link href={`/employer/${id}`} disableVisited>\n                                                    {name}\n                                                </Link>\n                                                {', '}\n                                                <OrganizationForm organizationFormId={organizationFormId} />{' '}\n                                                <Text\n                                                    data-qa={`employers-list-vacancies-open-${name}`}\n                                                    Element=\"span\"\n                                                    italic\n                                                >\n                                                    {vacanciesOpen}\n                                                </Text>\n                                            </div>\n                                        ))}\n                                    </td>\n                                ))}\n                            </tr>\n                        </tbody>\n                    </table>\n                    {paging && (\n                        <Gap top>\n                            <Pagination {...paging} />\n                        </Gap>\n                    )}\n                </>\n            ) : null}\n        </>\n    );\n};\n\nexport default translation(Companies);\n","import { memo } from 'react';\n\nimport { Link } from '@hh.ru/redux-spa-middleware';\nimport Button, { ButtonKind, ButtonScale } from 'bloko/blocks/button';\nimport Gap from 'bloko/blocks/gap';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport translation from 'lux/components/translation';\nimport { UserType } from 'lux/models/userType';\nimport { useSelector } from 'lux/modules/useSelector';\n\nconst TrlKeys = {\n    title: 'title.newEmployer',\n};\n\nconst EmployerRegistrationButton: TranslatedComponent = ({ trls }) => {\n    const userType = useSelector(({ userType }) => userType);\n    const backUrl = useSelector((state) => state.request.url);\n\n    return userType === UserType.Anonymous ? (\n        <Gap bottom>\n            <Button\n                Element={Link}\n                scale={ButtonScale.Small}\n                kind={ButtonKind.Success}\n                to={`/auth/employer/?backurl=${encodeURIComponent(backUrl)}`}\n            >\n                {trls[TrlKeys.title]}\n            </Button>\n        </Gap>\n    ) : null;\n};\n\nexport default memo(translation(EmployerRegistrationButton));\n","// extracted by mini-css-extract-plugin\nexport default {\"left\":\"left--DnoaYTHyEQfcGyEfHKjv\",\"right\":\"right--p6D6inbnmmPXWAVROBWw\",\"flexAlignCenter\":\"flex-align-center--H9KYf5Z1n_XK8ouZrMYg\",\"region\":\"region--XMjPKZIswlv4MPhAJlK5\",\"agenciesLink\":\"agencies-link--AAcSho1y_d1b_x8kXn68\",\"lLite\":\"l-lite--K31NCv9_YvtzDy1tHo46\"};","import { useCallback, useMemo, useState } from 'react';\n\nimport CompositeSelection from 'bloko/blocks/compositeSelection';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\nimport { fromTree } from 'bloko/common/tree/treeCollectionHelper';\n\nimport AreaId from 'HHC/areaId';\nimport { SUPERNOVA_SEARCH_FORM_ID } from 'lux/components/SupernovaSearch';\nimport translation from 'lux/components/translation';\nimport useAreasDataProvider from 'lux/hooks/useAreasDataProvider';\nimport useFetchAreaTree from 'lux/hooks/useFetchAreaTree';\nimport { useIsZarplataPlatform } from 'lux/hooks/usePlatform';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport styles from './filters.less';\n\nconst TrlKeys = {\n    selectRegion: 'vacancySearch.selectregionfromlist',\n    submit: 'treeselector.save',\n    cancel: 'treeselector.cancel',\n    search: 'treeselector.quicksearch',\n    notFound: 'treeselector.notFound',\n};\n\nconst AreaSelection: TranslatedComponent<{ areaId?: string }> = ({ trls, areaId }) => {\n    const isZarplata = useIsZarplataPlatform();\n    const fetcherArgs = isZarplata ? { queryParams: { rootAreaId: AreaId.Russia } } : {};\n    useFetchAreaTree(fetcherArgs);\n    const dataProvider = useAreasDataProvider(true);\n    const areaTree = useSelector((state) => state.areaTree);\n    const [items, setItems] = useState(areaId ? [areaId] : []);\n    const collection = useMemo(() => fromTree(areaTree), [areaTree]);\n\n    const defaultCountryCompanySearchId = useSelector(\n        ({ defaultCountryCompanySearchId }) => defaultCountryCompanySearchId\n    );\n    const defaultValue = `${defaultCountryCompanySearchId ?? ''}`;\n\n    const handleChange = useCallback(\n        (items: string[]) => {\n            setItems(items);\n        },\n        [setItems]\n    );\n\n    return (\n        <>\n            <input\n                form={SUPERNOVA_SEARCH_FORM_ID}\n                type=\"hidden\"\n                name=\"areaId\"\n                value={items.length ? items[0] : defaultValue}\n            />\n            <CompositeSelection\n                collection={collection}\n                singleChoice\n                value={items}\n                onChange={handleChange}\n                trl={{\n                    submit: trls[TrlKeys.submit],\n                    cancel: trls[TrlKeys.cancel],\n                    searchPlaceholder: trls[TrlKeys.search],\n                    notFound: trls[TrlKeys.notFound],\n                }}\n            >\n                {({ renderInput }) => (\n                    <>\n                        <div className={styles.region}>\n                            {renderInput({\n                                suggest: true,\n                                suggestProps: {\n                                    dataProvider,\n                                    itemContent: (item) => <span data-qa=\"suggester__keywords-item\">{item.text}</span>,\n                                },\n                                'data-qa': 'employers-list-regions-input',\n                            })}\n                        </div>\n                    </>\n                )}\n            </CompositeSelection>\n        </>\n    );\n};\n\nexport default translation(AreaSelection);\n","import { useState, useCallback, ChangeEvent, memo } from 'react';\n\nimport Checkbox from 'bloko/blocks/checkbox';\nimport VSpacing from 'bloko/blocks/vSpacing';\nimport { TranslatedComponent } from 'bloko/common/hooks/useTranslations';\n\nimport { SUPERNOVA_SEARCH_FORM_ID } from 'lux/components/SupernovaSearch';\nimport translation from 'lux/components/translation';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport AreaSelection from 'lux/pages/EmployersList/components/AreaSelection';\n\nimport styles from './filters.less';\n\nconst TrlKeys = {\n    search: 'button.search',\n    vacanciesRequired: 'checkbox.vacanciesRequired',\n    agencies: 'employersList.recruitment.agencies',\n    selectRegion: 'vacancySearch.selectregionfromlist',\n    treeselectorSubmit: 'treeselector.save',\n    treeselectorCancel: 'treeselector.cancel',\n    treeselectorSearch: 'treeselector.quicksearch',\n    treeselectorNotFound: 'treeselector.notFound',\n};\n\nconst Filters: TranslatedComponent = ({ trls }) => {\n    const { areaId, vacanciesNotRequired } = useSelector(({ router }) => router.location.query);\n\n    const [notRequiredCheckbox, setNotRequiredCheckbox] = useState(vacanciesNotRequired?.toLowerCase() === 'true');\n\n    const handleCheckboxChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            setNotRequiredCheckbox(event.target.checked);\n        },\n        [setNotRequiredCheckbox]\n    );\n\n    return (\n        <>\n            <div className={styles.flexAlignCenter}>\n                <AreaSelection areaId={areaId} />\n                <a href=\"/agencies\" className={styles.agenciesLink}>\n                    {trls[TrlKeys.agencies]}\n                </a>\n            </div>\n            <Checkbox\n                form={SUPERNOVA_SEARCH_FORM_ID}\n                value={notRequiredCheckbox ? 'True' : 'False'}\n                checked={notRequiredCheckbox}\n                type=\"checkbox\"\n                onChange={handleCheckboxChange}\n                name=\"vacanciesNotRequired\"\n            >\n                {trls[TrlKeys.vacanciesRequired]}\n            </Checkbox>\n            <VSpacing base={6} />\n        </>\n    );\n};\n\nexport default memo(translation(Filters));\n","import { FC } from 'react';\n\nimport Column from 'bloko/blocks/column';\n\nimport ApplicantSideBar from 'lux/components/ApplicantSideBar';\nimport PageLayout, { SideBarLayout } from 'lux/components/PageLayout';\nimport { useSelector } from 'lux/modules/useSelector';\n\nimport Alphabet from 'lux/pages/EmployersList/components/Alphabet';\nimport Companies from 'lux/pages/EmployersList/components/Companies';\nimport EmployerRegistrationButton from 'lux/pages/EmployersList/components/EmployerRegistrationButton';\nimport Filters from 'lux/pages/EmployersList/components/Filters';\n\nconst EmployersList: FC = () => {\n    const { title, description } = useSelector((state) => state.pageMetaData);\n\n    return (\n        <PageLayout title={title} description={description} layout={SideBarLayout} sidebar={ApplicantSideBar}>\n            <Column m=\"8\" l=\"11\">\n                <EmployerRegistrationButton />\n                <Filters />\n                <Alphabet />\n                <Companies />\n            </Column>\n        </PageLayout>\n    );\n};\n\nexport default EmployersList;\n"],"names":["element","params","window","requestIdleCallback","visibilityWatcher","onVisible","ids","id","templateName","adfoxParams","banners","Banners","Russia","RootArea","init","options","visible","checkVisible","offsetWidth","offsetHeight","getClientRects","length","removeEventListener","dataset","listenersSetted","addEventListener","ApplicantSideBar","rightBanners","useSelector","xs","m","l","map","banner","clickmeReferralLink","loadBannerOnVisible","require","Banner","Component","componentDidMount","this","props","isEmpty","ReactDOM","setAutoHeight","bind","initBanners","componentDidUpdate","componentWillUnmount","shouldComponentUpdate","nextProps","cancelFetchBanners","search","pathname","userTargeting","adfoxParamsProperty","style","height","clientHeight","innerHTML","type","bannerId","place","bannerCommonTargeting","bannerAdTargeting","bannerParams","render","children","connect","state","router","location","AdsExternalBanner","cId","pp","p2","enableAdfox","shouldHideExternalBanners","isExternalBannersRestricted","useIsBelarus","className","PropTypes","Wrapper","propTypes","HIDE_ON_XS_SCREEN_POSITION","Set","List","bottom","Clickme","index","has","s","bannerPropType","undefined","stateProps","dispatchProps","ownProps","ReferralLink","trls","Link","to","rel","target","size","TextSize","link","translation","BannersGroup","groupClassNames","showReferralLink","Fragment","defaultProps","TrlKeys","organizationFormId","useSuffix","organizationFormKey","isValidKey","organizationForm","NON_BREAKING_SPACE","WILDCARD","REMOTE","allowRegions","rootAreaId","lang","langs","isZarplata","useIsZarplataPlatform","filter","AreaId","remoteUrl","updateUrl","d","f","useMemo","createRemoteDataProvider","AREA_URL","areaTreeAction","makeSetStoreField","useFetchAreaTree","args","isHrZarplataRu","useIsHrZarplataDomain","isZarplataPlatform","userType","isEmployer","UserType","areaTreeCache","useRef","dispatch","useDispatch","useContext","TranslationLangContext","isRussianAreaRequest","queryParams","disableFetching","useEffect","cacheKey","current","fetcher","site","globalVars","siteId","then","areaTree","items","catch","getLetterUrl","url","letter","parsedUrl","urlParser","page","href","Alphabet","queryLetter","query","useUrl","renderLetter","text","styles","decodeURIComponent","disableVisited","split","memo","Companies","employers","totalEmployersFound","paging","employersList","separatedEmployers","listIndex","i","employer","push","Element","strong","value","hasValue","one","some","many","zero","name","vacanciesOpen","OrganizationForm","italic","top","Pagination","EmployerRegistrationButton","backUrl","request","scale","ButtonScale","kind","ButtonKind","encodeURIComponent","AreaSelection","areaId","fetcherArgs","dataProvider","useAreasDataProvider","setItems","useState","collection","fromTree","defaultCountryCompanySearchId","defaultValue","handleChange","useCallback","form","SUPERNOVA_SEARCH_FORM_ID","singleChoice","onChange","trl","submit","cancel","searchPlaceholder","notFound","renderInput","suggest","suggestProps","itemContent","item","Filters","vacanciesNotRequired","notRequiredCheckbox","setNotRequiredCheckbox","toLowerCase","handleCheckboxChange","event","checked","base","EmployersList","title","description","pageMetaData","PageLayout","layout","SideBarLayout","sidebar"],"sourceRoot":""}